/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.bot__loading {
  position: fixed;
  z-index: 9999999;
  top: 0;
  bottom: 0;
  background-color: var(--overlay-outside-dialog);
  pointer-events: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.bot-footer-extensions {
  display: inline; }
  .bot-footer-extensions__button {
    display: flex;
    align-items: center;
    font-size: var(--text-size-xs);
    padding: 0.8rem;
    cursor: pointer;
    height: 100%; }
    .bot-footer-extensions__button--active {
      border-bottom: 0.2rem solid var(--brand-red-coral);
      font-weight: 700;
      padding-bottom: 0.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.notifications-container {
  position: absolute;
  top: 65px;
  left: 0;
  width: calc(100vw - 30px);
  height: calc(100% - 65px); }
  .notifications-container .notification-messages {
    transition: transform 0.3s ease, opacity 0.25s linear; }
  .notifications-container--is-panel-open .notification-messages {
    transform: translate3d(calc(-350px), 0, 0); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.bot__chart-container {
  position: relative;
  top: 0; }
  .bot__chart-container-wrapper {
    position: absolute;
    top: 0;
    width: 100vw;
    background-color: var(--general-main-1); }
  .bot__chart-container .cq-context div.ciq-chart div.stx_jump_today.home > svg {
    top: 10px;
    left: 8px;
    padding: 0;
    position: absolute; }
  .bot__chart-container .injectionDiv {
    display: none; }
  .bot__chart-container .cq-dialog-portal {
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@keyframes animate-fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

.db-contract-card__result {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 4px;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  box-sizing: border-box;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var(--overlay-inside-dialog);
  animation: animate-fade-in 0.3s; }
  .db-contract-card__result:hover {
    background: 0; }
    .db-contract-card__result:hover .db-contract-card__result-caption {
      opacity: 0; }
  .db-contract-card__result-caption {
    display: flex;
    align-items: center;
    transition: opacity 0.25s linear; }
  .db-contract-card__result-icon {
    margin-left: 10px; }
  .db-contract-card__result--won {
    background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16)); }
    .db-contract-card__result--won > .db-contract-card__result-caption {
      color: var(--text-profit-success); }
  .db-contract-card__result--lost {
    background-image: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16)); }
    .db-contract-card__result--lost > .db-contract-card__result-caption {
      color: var(--text-loss-danger); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.download__container {
  display: flex;
  padding: 12px;
  padding-left: 16px;
  border: solid 1px var(--general-section-1); }

.download__icon {
  align-self: left;
  width: 16px;
  height: 16px; }

.download__button {
  background-color: transparent;
  width: 23px;
  height: 16px !important;
  padding: 0 !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@keyframes fade-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

.flyout {
  position: absolute;
  left: 250px;
  top: 0;
  background-color: var(--general-main-1);
  height: calc(100% - 40px);
  max-height: calc(100% - 40px);
  z-index: 11;
  border-radius: 4px;
  font-size: 2em;
  margin-left: 15px;
  margin-top: 20px;
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.4);
  min-width: 400px;
  visibility: hidden; }
  .flyout__item:hover .flyout__button-add--hide {
    display: flex !important;
    animation: fade-in 0.3s; }
  .flyout__content {
    overflow: auto;
    height: calc(100% - 56px); }
    .flyout__content .dc-themed-scrollbars {
      padding: 5px 25px; }
    .flyout__content-disclaimer {
      display: flex;
      justify-content: space-around;
      background: #ffad3a;
      font-size: var(--text-size-xs);
      margin-top: 1.6em;
      line-height: 1.3em;
      padding: 0.8rem;
      border-radius: 4px; }
      .flyout__content-disclaimer-text {
        color: #333333;
        width: 324px; }
      .flyout__content-disclaimer-icon {
        padding-top: 0.8rem; }
  .flyout__block-workspace--top {
    margin-bottom: 15px; }
  .flyout__block-workspace--center {
    margin-top: 0.6em; }
  .flyout__block-workspace__header {
    display: flex; }
  .flyout__button-new {
    width: 20%;
    height: 4rem !important;
    font-size: var(--text-size-xs);
    font-weight: bold;
    border-top-left-radius: 0rem !important;
    border-bottom-left-radius: 0rem !important; }
  .flyout__button-add {
    color: var(--general-main-1); }
    .flyout__button-add--hide {
      display: none !important; }
  .flyout__button-back {
    padding: 0 15px;
    align-self: center;
    background-color: transparent;
    color: #000000; }
    .flyout__button-back svg {
      vertical-align: middle; }
    .flyout__button-back:focus {
      outline: none; }
  .flyout__button-next, .flyout__button-previous {
    margin-left: 1em;
    color: rgba(0, 0, 0, 0.8);
    background-color: var(--general-section-1);
    display: flex; }
  .flyout__item {
    line-height: 1.3em;
    font-size: var(--text-size-xs); }
    .flyout__item:not(:last-of-type) {
      margin-bottom: 30px; }
    .flyout__item-header {
      display: flex;
      margin-top: 15px;
      margin-bottom: 10px; }
    .flyout__item-buttons {
      margin-left: auto;
      align-self: center; }
    .flyout__item-info {
      cursor: pointer;
      font-weight: bold;
      display: block;
      color: #e31c4b; }
    .flyout__item-description {
      font-size: var(--text-size-xs);
      margin-bottom: 1em;
      line-height: 1.3em; }
  .flyout__image {
    width: 100%;
    height: auto;
    border-radius: 0.5em; }
  .flyout__video {
    width: 100%;
    height: 20vh;
    border-radius: 0.5em; }
  .flyout__help {
    padding: 0;
    height: 100%;
    visibility: visible; }
    .flyout__help-header {
      padding: 15px;
      display: flex;
      background-color: var(--general-section-1); }
    .flyout__help-content {
      padding: 1.5em;
      font-size: 0.8em;
      overflow-y: auto;
      height: calc(100vh - 295px); }
      .flyout__help-content .flyout__item {
        margin-bottom: 0.8em; }
    .flyout__help-title {
      align-self: center; }
    .flyout__help-footer {
      display: flex;
      justify-content: flex-end;
      padding: 0.5em 0.8em;
      border-top: solid 0.1em var(--general-section-1); }
  .flyout__search {
    padding: 0;
    visibility: visible; }
    .flyout__search-header {
      padding: 20px;
      background-color: var(--general-disabled);
      display: flex;
      justify-content: space-between; }
      .flyout__search-header-text {
        align-self: center; }
    .flyout__search-empty {
      padding: 25px 0; }
    .flyout__search .flyout__help-content {
      height: calc(100% - 60px); }
  .flyout__normal {
    visibility: visible; }
    .flyout__normal-content {
      height: 100%; }
  .flyout__input {
    width: 80% !important;
    height: 4rem;
    border-top-right-radius: 0rem !important;
    border-bottom-right-radius: 0rem !important;
    border: solid 1px #d6dadb !important;
    display: inline-block !important;
    margin-top: 3.3rem; }
  .flyout__hr {
    height: 2px;
    width: 100%;
    border-top: 1px solid var(--general-section-1);
    position: absolute;
    left: 0;
    right: 0;
    margin: 0; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/**
 * @define journal
 */
.journal-empty {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center; }
  .journal-empty__header {
    padding: 0.8rem; }
  .journal-empty__icon {
    align-self: center; }
  .journal-empty__message {
    margin: 0 auto; }
  .journal-empty__list {
    list-style-type: circle;
    margin-left: 20px; }
    .journal-empty__list li::marker {
      color: var(--text-less-prominent); }

.journal__item {
  padding: 16px; }
  .journal__item-list {
    height: calc(100% - 4.2rem); }
  .journal__item-content > * {
    width: 100%; }

.journal__data-list .ReactVirtualized__Grid__innerScrollContainer > div:nth-child(even) {
  background: var(--status-default); }

.journal-tools__container {
  display: flex;
  justify-content: space-between;
  padding: 12px;
  padding-left: 16px;
  border: solid 1px var(--general-section-1); }
  .journal-tools__container-filter {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    cursor: pointer; }
    .journal-tools__container-filter--label {
      margin-right: 0.8rem; }

.journal__text {
  font-size: var(--text-size-xxs);
  line-height: 1.5;
  display: inline; }
  .journal__text-time, .journal__text-date {
    display: inline; }
  .journal__text-datetime {
    color: var(--text-less-prominent);
    font-size: var(--text-size--xxxs);
    margin-top: 6px; }
  .journal__text--error {
    color: var(--status-danger); }
  .journal__text--bold {
    font-weight: bold; }

.journal__loader, .journal__loader--mobile {
  width: 350px;
  height: 9.2rem; }
  .journal__loader--mobile {
    width: 100vw; }

.filter-dialog {
  position: fixed;
  display: grid;
  grid-gap: 1.6rem;
  background: var(--general-main-2);
  border-radius: 4px;
  box-shadow: 0 4px 16px 0 var(--shadow-menu);
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
  padding: 1.6rem 3.6rem 1.6rem 0.8rem;
  z-index: 99;
  right: 16px; }
  .filter-dialog--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0); }
  .filter-dialog--enter, .filter-dialog--exit {
    opacity: 0;
    transform: translate3d(0, -20px, 0); }
  .filter-dialog__input .input-wrapper__input {
    border: 1px solid var(--border-normal); }
  .filter-dialog__button {
    margin-top: 0.8rem; }
    .filter-dialog__button .dc-btn {
      width: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.load-strategy__wrapper {
  position: fixed;
  top: 40px;
  z-index: 10;
  width: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .load-strategy__wrapper .dc-mobile-full-page-modal {
      width: 100%; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .load-strategy__wrapper .dc-tabs {
      height: 100%;
      display: unset; }
      .load-strategy__wrapper .dc-tabs__content {
        height: calc(100% - 40px); } }

@media (min-width: 1024px) {
  .load-strategy__container {
    height: calc(80vh - 0.8rem - 4rem - 4.8rem - 5.8rem); }
    .load-strategy__container--has-footer {
      height: calc(80vh - 0.8rem - 4rem - 4.8rem - 5.8rem - 7.4rem); }
    .load-strategy__container > * {
      height: 100%;
      margin-top: 0.8rem; } }

@media (min-width: 768px) and (max-width: 1023px) {
  .load-strategy__container {
    height: calc(80vh - 0.8rem - 4rem - 4.8rem - 5.8rem); }
    .load-strategy__container--has-footer {
      height: calc(80vh - 0.8rem - 4rem - 4.8rem - 5.8rem - 7.4rem); }
    .load-strategy__container > * {
      height: 100%;
      margin-top: 0.8rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .load-strategy__container {
    height: 100%; } }

.load-strategy__title {
  font-size: var(--text-size-s);
  font-weight: 700;
  margin: 1.5rem; }

.load-strategy__preview-workspace {
  padding: 1.5rem;
  border-radius: 4px;
  border: solid 1px var(--border-normal);
  height: calc(100% - 3.7rem);
  position: relative; }
  .load-strategy__preview-workspace-controls {
    padding: 0.7rem 0.5rem;
    display: flex;
    flex-direction: column;
    position: absolute;
    right: 1.6rem;
    bottom: 1.6rem;
    border-radius: 3rem;
    background-color: #f2f3f4;
    box-shadow: 0.2rem 0.2rem 0.5rem var(--shadow-menu);
    z-index: 99; }
  .load-strategy__preview-workspace-icon {
    margin: 0.5rem;
    cursor: pointer; }

.load-strategy__recent {
  display: flex;
  flex-direction: row;
  gap: 1.6rem; }
  .load-strategy__recent-files {
    flex-basis: 35%; }
    .load-strategy__recent-files-list {
      overflow: auto;
      /* TODO: ThemedScrollbars! */
      height: calc(100% - 52px); }
  .load-strategy__recent-preview {
    flex-basis: 65%;
    display: flex;
    flex-direction: column; }
    .load-strategy__recent-preview-title {
      margin-left: 0; }
  .load-strategy__recent-empty {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    text-align: center; }
    .load-strategy__recent-empty-icon {
      margin-bottom: 1.6rem; }
    .load-strategy__recent-empty-title {
      margin-bottom: 0.8rem;
      font-size: var(--text-size-s);
      font-weight: bold;
      line-height: 2.4rem; }
    .load-strategy__recent-empty-description {
      margin-bottom: 1.6rem;
      font-size: var(--text-size-xs);
      line-height: 2rem; }
    .load-strategy__recent-empty-expand {
      margin-bottom: 0.8rem;
      color: var(--brand-red-coral);
      font-size: var(--text-size-xs);
      font-weight: bold;
      cursor: pointer; }
      .load-strategy__recent-empty-expand:hover {
        text-decoration: underline; }
    .load-strategy__recent-empty-explanation {
      font-size: var(--text-size-xxs);
      text-align: left;
      opacity: 0; }
      .load-strategy__recent-empty-explanation-list {
        margin-top: 0.8rem; }
      .load-strategy__recent-empty-explanation--show {
        opacity: 1;
        width: fit-content; }
  .load-strategy__recent-item {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: "text location";
    padding: 1.6rem;
    height: 100px; }
    .load-strategy__recent-item:not(.load-strategy__recent-item--selected):hover {
      background-color: var(--state-hover);
      cursor: pointer; }
    .load-strategy__recent-item:not(:last-child) {
      border-bottom: solid 0.1rem var(--border-normal); }
    .load-strategy__recent-item--selected {
      background-color: var(--state-active); }
    .load-strategy__recent-item-text {
      flex-direction: column;
      display: flex;
      justify-content: center; }
    .load-strategy__recent-item-title {
      font-size: var(--text-size-s); }
    .load-strategy__recent-item-time {
      font-size: var(--text-size-xxs); }
    .load-strategy__recent-item-location {
      flex-direction: row;
      display: flex;
      align-items: center;
      justify-content: center; }
    .load-strategy__recent-item-saved {
      margin-left: 1rem;
      font-size: var(--text-size-s);
      line-height: 1.43; }

@media (min-width: 1024px) {
  .load-strategy__local-dropzone {
    padding-top: 1.6rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .load-strategy__local-dropzone {
    height: 100%;
    padding: 1.6rem; } }

.load-strategy__local-dropzone-area {
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  border: dashed 0.2rem var(--border-normal);
  border-radius: 4px;
  height: 100%;
  padding: 1.6rem; }

.load-strategy__local-icon {
  margin-bottom: 1.6rem; }

.load-strategy__local-title {
  margin-bottom: 1.6rem;
  font-size: var(--text-size-s); }

.load-strategy__local-description {
  margin-bottom: 1.6rem;
  font-size: var(--text-size-xs); }

.load-strategy__local-preview {
  display: flex;
  flex-direction: column;
  position: relative; }
  @media (min-width: 320px) and (max-width: 767px) {
    .load-strategy__local-preview {
      padding: 1.6rem;
      height: calc(100% - 7.4rem); } }
  .load-strategy__local-preview-close {
    background-image: radial-gradient(at right top);
    position: absolute;
    padding: 25px;
    border-bottom-left-radius: 50%;
    right: 0;
    top: 0;
    z-index: 99;
    cursor: pointer; }

.load-strategy__local-footer {
  padding: 1.6rem;
  display: flex;
  justify-content: flex-end;
  border-top: 1px solid var(--general-section-1); }

.load-strategy__google-drive {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .load-strategy__google-drive {
      border: dashed 0.2rem var(--border-normal);
      border-radius: 4px;
      margin: 1.6rem;
      padding: 1.6rem;
      height: calc(100% - 3.2rem); } }
  .load-strategy__google-drive-icon {
    margin-bottom: 1.6rem; }
    .load-strategy__google-drive-icon--disabled {
      opacity: 0.32; }
  .load-strategy__google-drive-text {
    margin-bottom: 1.6rem;
    font-size: var(--text-size-s);
    font-weight: bold;
    line-height: 2.4rem; }
  .load-strategy__google-drive-terms {
    font-size: var(--text-size-xs);
    line-height: 2rem;
    margin-top: 1.6rem;
    text-align: center; }

.picker {
  max-width: 98%;
  border-radius: 8px;
  max-height: 99%; }
  .picker-content {
    max-width: 98%;
    padding: 1%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .picker {
      height: 100%;
      width: 100%;
      top: 0px; } }

@media (min-width: 768px) and (max-width: 1023px) {
  .dc-modal__container_load-strategy {
    width: calc(100vw - 4.8rem) !important; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.db-toolbox {
  height: var(--bot-content-height) !important;
  top: 10.4rem !important;
  width: 25.6rem !important; }
  .db-toolbox__search {
    padding: 0.8rem;
    height: 5rem; }
    .db-toolbox__search-field {
      margin-bottom: 0 !important; }
      .db-toolbox__search-field input::-ms-clear {
        display: none; }
      .db-toolbox__search-field .dc-input {
        justify-content: center; }
        .db-toolbox__search-field .dc-input__field {
          width: unset;
          height: 3.2rem;
          flex-grow: 1;
          padding: 0.8rem; }
        .db-toolbox__search-field .dc-input__leading-icon {
          position: unset;
          pointer-events: unset;
          margin-left: 0.8rem;
          cursor: pointer; }
  .db-toolbox__content {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    user-select: none;
    z-index: 1;
    visibility: visible; }
  .db-toolbox__header {
    padding: 8px;
    position: relative;
    font-weight: bold;
    font-size: 1.6em;
    background-color: var(--general-section-1);
    text-align: center; }
  .db-toolbox__item {
    display: flex;
    flex-direction: row; }
    .db-toolbox__item:hover {
      background-color: var(--general-hover); }
  .db-toolbox__category-arrow {
    width: 16px;
    height: 16px;
    padding: 6px;
    background-image: url("/js/bot/media/ic-chevron-down-bold.svg");
    margin-right: 10px;
    transition: transform 0.3s ease; }
    .db-toolbox__category-arrow--active {
      transform: rotate(180deg); }
  .db-toolbox__category-menu {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    min-height: 0;
    overflow-y: auto;
    overflow-x: hidden; }
  .db-toolbox__category-text {
    display: flex;
    align-self: center;
    justify-content: space-between;
    margin: 10px;
    width: 100%; }
  .db-toolbox__description {
    font-size: 12px;
    line-height: 1.4; }
  .db-toolbox__icon {
    display: flex;
    align-self: center;
    margin-right: 10px; }
    .db-toolbox__icon > svg {
      height: 25px;
      width: 25px; }
  .db-toolbox__label {
    font-weight: bold;
    font-size: 14px;
    line-height: 1.4; }
  .db-toolbox__row {
    cursor: pointer;
    border-top: 1px solid var(--general-section-1); }
    .db-toolbox__row .db-toolbox__category--selected {
      background-color: var(--general-active); }
    .db-toolbox__row:last-of-type {
      border-bottom: 1px solid var(--general-section-1); }
  .db-toolbox__button.dc-btn {
    margin: 16px auto;
    padding: 0;
    width: 152px;
    height: 32px;
    color: var(--text-colored-background);
    font-size: 14px;
    font-weight: bold;
    line-height: 1.4; }
  .db-toolbox__sub-category-row {
    padding: 1rem;
    cursor: pointer; }
    .db-toolbox__sub-category-row:hover {
      background-color: var(--general-hover); }

.loader {
  border: 1px solid var(--general-active);
  border-top: 1px solid var(--brand-secondary);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
#scratch_div {
  position: relative; }

.blocklyTextRootBlockHeader {
  font-size: calc(var(--text-size-sm) * 0.9);
  font-weight: normal;
  font-stretch: normal;
  font-style: normal;
  line-height: 1.43;
  letter-spacing: normal;
  fill: var(--fill-normal); }

.blocklyMainWorkspaceScrollbar {
  display: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.notify__item-button {
  margin-top: 8px;
  height: 2.8rem !important;
  margin-left: 100%;
  transform: translateX(-100%); }
  .notify__item-button .btn__text {
    font-size: var(--text-size-xxs); }

.notify__item-container {
  display: flex;
  align-items: center; }

.notify__item-message {
  margin-left: 8px;
  font-size: var(--text-size-xxs);
  line-height: 1.2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-modal__container_modal--strategy {
  max-height: 57.1rem !important; }
  .dc-modal__container_modal--strategy .modal__scrollbar {
    max-height: 516px;
    margin-bottom: 75px; }
  .dc-modal__container_modal--strategy .modal__content {
    padding: 1.6rem 2.4rem;
    height: calc(100% - 200px);
    max-height: 636px; }

.quick-strategy__description {
  margin: 15px 0;
  font-size: 14px;
  font-weight: normal;
  line-height: 1.43;
  color: var(--text-general); }

.quick-strategy__tab-content {
  height: calc(100vh - 330px);
  overflow: auto; }

@media (min-width: 320px) and (max-width: 767px) {
  .quick-strategy__form {
    height: calc(100% - 8rem);
    overflow: scroll; }
    .quick-strategy__form--active-keyboard {
      height: 100%; } }

.quick-strategy__form-row {
  align-items: flex-end;
  display: flex;
  justify-content: space-between;
  margin: 4.5rem 0; }
  .quick-strategy__form-row:first-child {
    margin-top: 0; }
  .quick-strategy__form-row > * {
    justify-content: center; }
  .quick-strategy__form-row .quick-strategy__input .dc-field-error {
    left: 0;
    padding-top: 0.4rem;
    padding-left: 0.4rem; }
  .quick-strategy__form-row .quick-strategy__input .dc-input__trailing-icon {
    margin: 1.1rem;
    position: unset;
    height: 1.6rem; }
  .quick-strategy__form-row--multiple > *:first-child {
    margin-right: 1.2rem; }
  .quick-strategy__form-row--multiple > * + * {
    margin-left: 1.2rem; }

.quick-strategy__form-content {
  margin-bottom: 12rem;
  padding: 0 1.6rem; }
  .quick-strategy__form-content--active-keyboard {
    margin-bottom: 12rem; }
  .quick-strategy__form-content--safari-fix {
    margin-bottom: 0;
    padding-bottom: 10rem; }

.quick-strategy__form-footer {
  border-top: 1px solid var(--general-section-1);
  padding: 1.6rem 2.4rem;
  position: fixed;
  bottom: 0px;
  left: 0px;
  background: var(--general-main-1);
  width: 100%; }
  .quick-strategy__form-footer--active-keyboard {
    position: unset;
    display: block; }

.quick-strategy__form .dc-autocomplete {
  margin-bottom: unset; }

.quick-strategy__form .dc-input {
  margin-bottom: 0; }

.quick-strategy__form .dc-btn__group {
  display: flex;
  justify-content: flex-end;
  flex-direction: row; }

.quick-strategy__option {
  display: flex; }
  .quick-strategy__option > * {
    align-self: center; }
  .quick-strategy__option .icons-underlying {
    margin-top: 5px; }

.quick-strategy__symbol {
  margin-left: 8px; }

.quick-strategy__icon {
  width: 24px;
  height: 24px;
  padding: 3px;
  margin: 2px;
  background-color: var(--general-section-1); }

.quick-strategy__duration-dropdown {
  width: 100%;
  margin-left: 0;
  margin-right: 1.2rem; }

.quick-strategy__leading .dc-input__field {
  padding-left: 6rem; }

.quick-strategy__leading .dc-input__leading-icon .dc-icon {
  margin-left: 0.2rem;
  margin-right: 0.3rem; }

.quick-strategy__wrapper {
  position: absolute;
  top: 40px;
  height: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .quick-strategy__wrapper .dc-dropdown-list__group-header {
      padding: 0.6rem 2rem !important;
      color: var(--brand-dark-grey) !important;
      justify-content: start !important; }
    .quick-strategy__wrapper .quick-strategy__tabs {
      padding: 0 0.5rem; }
    .quick-strategy__wrapper .dc-tabs {
      display: flex;
      flex-direction: column;
      height: 100%; }
      .quick-strategy__wrapper .dc-tabs__list {
        width: 100%;
        height: 4rem; }
      .quick-strategy__wrapper .dc-tabs__item {
        width: 50%; }
      .quick-strategy__wrapper .dc-tabs__content {
        height: calc(100% - 4rem); }
    .quick-strategy__wrapper .dc-page-overlay__header {
      position: fixed;
      top: 4rem;
      width: 100%;
      height: 4rem; }
    .quick-strategy__wrapper .dc-page-overlay__content {
      z-index: 5; }
    .quick-strategy__wrapper .dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
      display: unset; }
    .quick-strategy__wrapper .dc-themed-scrollbars {
      height: 100%; } }

/* stylelint-disable */
@media (max-resolution: 200dpi) {
  .quick-strategy__tab-content {
    height: 100%; } }

/* stylelint-enable */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.summary {
  padding: 16px; }
  .summary__tiles {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin: 24px 0; }
  .summary__tile {
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-radius: 4px;
    width: 32%;
    max-width: 32%;
    text-align: center;
    background-color: var(--general-section-1);
    padding: 8px 8px 0;
    margin-bottom: 2%;
    height: 56px; }
    .summary__tile-title {
      height: 18px;
      margin-bottom: 4px;
      font-size: 1.2rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: center;
      line-height: 1.25; }
    .summary__tile-content {
      height: 18px;
      margin-bottom: 4px;
      font-size: 1.2rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: center;
      line-height: 1.25; }
  .summary__amount {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25; }
    .summary__amount--positive {
      font-weight: bold;
      color: var(--text-profit-success); }
    .summary__amount--negative {
      font-weight: bold;
      color: var(--text-loss-danger); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.db-summary-card {
  border: 1px solid var(--border-disabled);
  border-radius: 4px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  position: relative; }
  .db-summary-card--inactive {
    background-color: var(--general-section-1);
    border: 1px solid var(--general-main-1);
    font-size: 14px;
    justify-content: center;
    margin: auto;
    text-align: center;
    height: 157px; }
  .db-summary-card--is-loading {
    background-color: inherit;
    border: 1px solid var(--general-main-1); }
  .db-summary-card--completed {
    border: 1px solid var(--general-main-1); }
    .db-summary-card--completed:hover {
      border: 1px solid var(--border-disabled); }
    .db-summary-card--completed-mobile {
      border: 1px solid var(--border-normal); }
  .db-summary-card .dc-contract-card {
    padding: 1.6rem; }
  .db-summary-card .dc-contract-card__grid-underlying-trade {
    grid-template-columns: 1.5fr 1fr; }
  .db-summary-card .dc-contract-card-items-wrapper {
    grid-template-columns: 1.5fr 1fr;
    margin-top: 0.8rem; }
  .db-summary-card--mobile .dc-contract-card {
    padding: 1.6rem 0.8rem 0.8rem; }
  .db-summary-card--mobile .dc-contract-card__grid-underlying-trade--mobile {
    grid-template-columns: 1fr 1.25fr; }
  .db-summary-card--mobile .dc-contract-card-items-wrapper {
    grid-template-columns: 1fr 1fr; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.transactions-empty {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center; }
  .transactions-empty-box {
    display: grid;
    flex: 1;
    height: 100%; }
  .transactions-empty__header {
    padding: 0.8rem; }
  .transactions-empty__icon-box {
    display: flex;
    justify-content: center;
    margin-top: 0.3rem; }
  .transactions-empty__icon {
    align-self: center; }
  .transactions-empty__message {
    margin: 0 auto;
    margin-bottom: 2rem; }
  .transactions-empty__list {
    list-style-type: circle;
    margin-left: 2rem;
    font-size: var(--text-size-xxs);
    line-height: var(--text-lh-m);
    color: var(--text-less-prominent); }

.transactions__header {
  border-bottom: 1px solid var(--general-section-1);
  width: 100%;
  display: grid;
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.25;
  grid-template-columns: 0.9fr 1fr 1fr;
  grid-template-areas: 'type spot profit';
  padding: 1.2rem 1.6rem;
  height: 5rem;
  align-items: center; }
  .transactions__header-type {
    grid-column: type; }
  .transactions__header-spot {
    grid-column: spot;
    text-align: start; }
  .transactions__header-profit {
    grid-column: profit;
    text-align: end; }

.transactions__content {
  height: calc(100% - 9.2rem); }
  .transactions__content--mobile {
    height: calc(100% - 4.2rem); }

.transactions__scrollbar {
  height: 100%; }
  .transactions__scrollbar .dc-themed-scrollbars {
    height: 100%;
    width: 100%; }

.transactions__item {
  display: grid;
  font-size: 12px;
  grid-row-gap: 3px;
  grid-template-columns: 0.9fr 1fr 1fr;
  grid-template-rows: auto auto;
  grid-template-areas: "trade-type entry-spot stake" "trade-type exit-spot  profit";
  padding: 0.8rem 0; }
  .transactions__item-wrapper {
    height: 5.2rem;
    padding: 0 1.6rem;
    cursor: pointer;
    position: relative;
    border-top: 1px solid var(--general-section-1); }
    .transactions__item-wrapper:hover {
      background-color: var(--state-hover); }

.transactions__trade-type {
  grid-column: trade-type;
  grid-row: trade-type;
  justify-content: flex-start; }

.transactions__entry-spot {
  grid-column: entry-spot;
  grid-row: entry-spot;
  justify-content: flex-start; }

.transactions__exit-spot {
  grid-column: exit-spot;
  grid-row: exit-spot;
  justify-content: flex-start; }

.transactions__stake {
  grid-column: stake;
  grid-row: stake;
  justify-content: flex-end; }

.transactions__profit {
  grid-column: profit;
  grid-row: profit;
  justify-content: flex-end; }

.transactions__divider {
  border-top: 1px solid var(--general-section-1);
  padding: 8px 16px; }
  .transactions__divider-line {
    height: 4px;
    background-color: var(--general-section-1); }

.transactions__item-wrapper + .transactions__divider {
  border-top: none; }

.transactions__divider + .transactions__item-wrapper {
  border-top: none; }

.transactions__loader-text {
  width: 7.2rem;
  height: 1rem; }

.transactions__loader-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.4rem;
  height: 2.4rem;
  margin-right: 0.4rem; }

.transactions__loader-icon {
  width: 2.4rem;
  height: 2.4rem; }

.transactions__icon {
  margin-right: 0.8rem;
  max-height: 1.6rem;
  max-width: 1.6rem;
  min-height: 1.6rem;
  min-width: 1.6rem; }

.transactions__cell {
  display: flex;
  align-items: center; }

.transactions__profit--win {
  color: var(--text-profit-success); }
  .transactions__profit--win:before {
    content: '+'; }

.transactions__profit--loss {
  color: var(--text-loss-danger); }
  .transactions__profit--loss:before {
    content: '-'; }

.transactions__info-header {
  font-weight: bold; }

.transactions__popover-title {
  font-size: 1rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.4; }

.transactions__popover-item {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.25; }
  .transactions__popover-item:not(:last-of-type) {
    margin-bottom: 0.8rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@keyframes animate-progress {
  0% {
    width: 0%; }
  100% {
    width: 51%; } }

@keyframes animate-progress-complete {
  0% {
    width: 50%; }
  100% {
    width: 100%; } }

@keyframes animate-circle {
  0% {
    transform: scale(0); }
  50% {
    transform: scale(1.5); }
  100% {
    transform: scale(0); } }

@keyframes animate-circle-appear {
  0% {
    transform: scale(0); }
  100% {
    transform: scale(1); } }

@keyframes animate-circle-pop {
  0% {
    transform: scale(0); }
  50% {
    transform: scale(1); }
  100% {
    transform: scale(0); } }

.animation__wrapper {
  display: flex;
  align-items: center;
  height: 40px; }

.animation__overlay {
  border-top-left-radius: 0;
  border-bottom-right-radius: 4px; }

.animation__info {
  font-size: 10px;
  margin: 8px;
  cursor: pointer; }

.animation__button {
  width: fit-content;
  height: 100% !important;
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important; }

.animation__container {
  width: 232px;
  height: 100%;
  padding: 5px 12px;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border: solid 1px var(--border-normal);
  position: relative; }

.animation__text {
  font-size: 12px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 5px;
  line-height: 18px; }

.animation__progress {
  display: flex;
  justify-content: space-between;
  position: relative;
  height: 6px; }
  .animation__progress .circular-wrapper {
    width: 2px;
    height: 2px;
    align-self: center;
    display: flex; }
    .animation__progress .circular-wrapper .static-circle {
      width: 2px;
      height: 2px;
      background-color: #000000;
      border-radius: 100%;
      align-self: center;
      z-index: 1; }
    .animation__progress .circular-wrapper .dynamic-circle {
      border-radius: 100%;
      height: 10px;
      width: 10px;
      margin-left: -4px;
      margin-top: -4px;
      opacity: 0.32;
      position: absolute; }
    .animation__progress .circular-wrapper:nth-child(2) {
      margin-left: 3px; }
    .animation__progress .circular-wrapper:last-child {
      margin-right: 3px; }
  .animation__progress-line {
    background-color: var(--border-normal);
    height: 100%;
    width: 100%;
    border-radius: 4px;
    position: absolute; }
  .animation__progress-bar {
    background-color: var(--status-success);
    border-radius: 4px;
    width: 0;
    height: 100%; }
  .animation__progress-3 {
    animation: animate-progress 0.5s 1;
    animation-fill-mode: forwards; }
  .animation__progress-4 {
    width: 51%;
    border-radius: 5px 0 0 5px; }
  .animation__progress-5 {
    animation: animate-progress-complete 0.5s 1;
    animation-fill-mode: forwards; }

.animation--running .animation__progress .circular-wrapper.completed .static-circle, .animation--running .animation__progress .circular-wrapper.active .static-circle {
  background-color: #3d9494; }

.animation--running .animation__progress .circular-wrapper.active .dynamic-circle {
  animation: animate-circle 0.8s infinite;
  animation-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);
  background-color: var(--status-success); }

.animation--running .animation__progress .circular-wrapper .static-circle {
  animation: animate-circle-appear 1s;
  background-color: #ff444f; }

.animation--running .animation__progress .circular-wrapper .dynamic-circle {
  animation: animate-circle 1s;
  background-color: #ff444f;
  transform: scale(0); }

.animation__modal {
  height: 28.4rem !important;
  width: 44rem !important;
  font-size: 1.6rem;
  padding: 2.4rem; }
  .animation__modal--mobile {
    font-size: 1.6rem !important; }
  .animation__modal-body {
    height: 438px; }
    .animation__modal-body--mobile {
      padding: 1.6rem 0 !important; }
    .animation__modal-body--content {
      margin-top: 2rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_animation__modal {
    width: 31.2rem !important; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/**
* @define -panel
**/
.run-panel__container {
  height: var(--bot-content-height) !important;
  top: 10.4rem !important;
  width: 36.6rem !important; }
  .run-panel__container--mobile {
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw; }
    .run-panel__container--mobile-closed {
      position: unset; }

.run-panel__tile {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%; }
  .run-panel__tile-title {
    height: 18px;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.25; }
  .run-panel__tile-content {
    height: 18px;
    margin-bottom: 4px;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25; }

.run-panel__stat {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  width: 350px;
  background-color: var(--general-section-1);
  position: fixed;
  bottom: 5.7rem; }
  .run-panel__stat--info {
    display: flex;
    justify-content: center;
    width: 33%;
    padding: 16px 0px 2px 0;
    cursor: pointer; }
    .run-panel__stat--info-item {
      display: inline-block;
      border-bottom: 1px dotted #4b4b4b; }
  .run-panel__stat--tiles {
    width: 100%;
    display: grid;
    grid-template: 64px 64px / 1fr 1fr 1fr; }
  .run-panel__stat-amount {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25; }
    .run-panel__stat-amount--positive {
      font-weight: bold;
      color: var(--text-profit-success); }
    .run-panel__stat-amount--negative {
      font-weight: bold;
      color: var(--text-loss-danger); }
  .run-panel__stat--mobile {
    width: 100%;
    bottom: 0; }

.run-panel__footer {
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center; }
  .run-panel__footer-button {
    width: 318px;
    height: 32px !important;
    margin: 12px 24px; }

.run-panel__content {
  overflow: hidden !important; }

.run-panel__buttons {
  display: inline-flex !important;
  justify-content: space-between;
  width: 67%;
  margin-top: 1rem;
  align-items: center; }

.run-panel-tab__content {
  height: var(--drawer-content-height); }
  .run-panel-tab__content--no-stat {
    height: var(--drawer-content-height-no-stat); }
  .run-panel-tab__content--mobile {
    height: var(--drawer-content-height-mobile);
    position: fixed;
    bottom: 15.7rem;
    width: 100vw; }

@media (min-width: 320px) and (max-width: 767px) {
  .run-panel__clear-button {
    position: absolute !important;
    top: 0.5rem;
    right: 1.6rem;
    height: 2.6rem !important;
    width: 8rem; } }

.controls__section {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  bottom: 0;
  width: 100%;
  background-color: var(--general-main-1);
  border-top: solid 2px var(--general-section-1);
  z-index: 5; }

.controls__buttons {
  padding: 0.8rem 2.4rem;
  height: 6rem;
  display: flex;
  width: inherit;
  padding-right: 8px; }

.controls__stop-button, .controls__run-button {
  width: 40%;
  border-radius: 4px 0px 0px 4px !important; }

.controls__animation {
  width: 100%;
  height: 4rem;
  border-radius: 0px 4px 4px 0px; }

.list__animation-enter {
  height: 0;
  transform: translateX(200%); }
  .list__animation-enter-active {
    height: auto;
    transform: translateX(0%);
    transition: height 500ms, transform 500ms; }

.list__animation-exit {
  opacity: 1; }
  .list__animation-exit-active {
    opacity: 0;
    transition: opacity 300ms; }

.db-self-exclusion {
  font-size: var(--text-size-xs);
  font-weight: normal;
  line-height: 1.43;
  color: var(--text-general); }
  .db-self-exclusion__content {
    margin: 2.4rem;
    margin-right: 1.4rem;
    padding-right: 1rem; }
  .db-self-exclusion .dc-themed-scrollbars__track--vertical {
    right: -0.2rem; }
  .db-self-exclusion__dialog {
    max-height: 500px !important;
    width: 460px; }
  .db-self-exclusion__footer {
    height: 72px;
    display: block;
    position: fixed;
    width: 100%;
    left: 0px;
    bottom: 0px;
    padding: 1.4rem;
    border-top: 2px solid var(--general-section-2); }
    @media (min-width: 320px) and (max-width: 767px) {
      .db-self-exclusion__footer {
        position: absolute;
        width: 100%;
        bottom: 40px;
        left: 0px; }
        .db-self-exclusion__footer--relative {
          position: relative;
          margin-top: 5rem; } }
    .db-self-exclusion__footer-btn-group {
      display: flex;
      justify-content: flex-end; }
  .db-self-exclusion__info {
    margin-bottom: 2rem; }
  .db-self-exclusion__limit-status {
    margin: 1rem 0; }
    .db-self-exclusion__limit-status--bold {
      font-weight: 700; }
    .db-self-exclusion__limit-status--danger {
      font-weight: 700;
      color: var(--status-danger); }
  .db-self-exclusion--danger {
    color: var(--status-danger); }
  .db-self-exclusion .dc-btn {
    margin-left: 0.8rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .limits__wrapper {
    position: fixed;
    z-index: 5;
    width: 100%;
    left: 0px;
    top: 0px;
    background: var(--general-main-1); }
    .limits__wrapper .db-self-exclusion {
      height: calc(100vh - 40px);
      display: flex;
      justify-content: space-between;
      flex-direction: column; }
      .limits__wrapper .db-self-exclusion__content {
        margin-top: 56px; }
      .limits__wrapper .db-self-exclusion__form-group {
        margin-bottom: 1.6rem;
        display: flex; } }

.dc-modal__container_self-exclusion__modal {
  display: flex;
  flex-direction: row;
  align-content: space-between;
  width: 440px !important;
  height: 374px !important; }

.statistics__modal {
  height: 28.4rem !important;
  width: 44rem !important;
  font-size: 1.6rem;
  padding: 2.4rem; }
  .statistics__modal--mobile {
    font-size: 1.6rem !important; }
  .statistics__modal-body {
    height: calc(100vh - 40.6rem);
    min-height: 10rem;
    max-height: 45rem; }
    .statistics__modal-body--mobile {
      padding: 0.6rem 0 1.6rem !important;
      height: 40.4rem; }
    .statistics__modal-body--content {
      margin-top: 1rem; }
      .statistics__modal-body--content-stake {
        margin-top: unset;
        font-weight: bold; }
  .statistics__modal-scrollbar {
    padding-right: 1.2rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_statistics__modal {
    width: 31.2rem !important; } }

.dc-modal__container_statistics__modal .dc-modal-body {
  padding: 2.4rem 1.2rem 2.4rem 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.picker-dialog {
  z-index: 9999 !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-modal__container_modal--save {
  min-width: 320px !important; }
  .dc-modal__container_modal--save .modal__content {
    padding: 16px 24px; }
  .dc-modal__container_modal--save .modal__footer {
    text-align: right;
    border-top: 2px solid var(--general-section-2); }
    .dc-modal__container_modal--save .modal__footer--button {
      margin: 1.4rem 1.6rem 1.4rem 0;
      display: inline-block; }
  .dc-modal__container_modal--save .modal__content-row {
    display: flex;
    align-items: center;
    justify-content: center; }
  .dc-modal__container_modal--save form {
    height: 445px;
    display: flex;
    justify-content: space-between;
    flex-direction: column; }

div.radio-group__save-type {
  display: flex;
  justify-content: center;
  margin: 8% 0px; }
  div.radio-group__save-type .dc-radio-group__item {
    display: flex;
    flex-direction: column;
    padding: 24px;
    width: 128px;
    border-radius: 4px; }
    div.radio-group__save-type .dc-radio-group__item--selected {
      border: solid 1px #85acb0; }
      div.radio-group__save-type .dc-radio-group__item--selected .save-type__radio-text {
        font-weight: 700; }
    div.radio-group__save-type .dc-radio-group__item-disabled .save-type__text {
      color: var(--general-disabled) !important; }
    div.radio-group__save-type .dc-radio-group__item-disabled .dc-radio-group__circle {
      border-color: var(--general-disabled) !important; }
  div.radio-group__save-type .dc-radio-group__circle {
    display: none; }
  div.radio-group__save-type .dc-radio-group__label {
    align-self: center; }

.save-type__checkbox-text {
  font-size: 14px;
  font-weight: bold;
  line-height: 1.43;
  letter-spacing: normal;
  color: var(--text-prominent); }

.save-type__checkbox-description {
  font-size: 14px;
  font-weight: normal;
  line-height: 1.43;
  letter-spacing: normal;
  color: var(--text-prominent);
  margin: 8px 0 0 32px; }

.save-type__container {
  text-align: center; }

.save-type__input {
  margin: 12px 0 0 !important; }

.save-type__radio {
  text-align: center; }

.save-type__radio-text {
  letter-spacing: normal; }

.save-type__drive-status {
  cursor: pointer;
  position: absolute;
  margin-top: 5px;
  width: 71px; }

.save-type__icon--disabled {
  opacity: 0.32; }

.save-modal__wrapper {
  position: fixed;
  top: 40px;
  z-index: 10; }
  @media (min-width: 320px) and (max-width: 767px) {
    .save-modal__wrapper form {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      height: 100%; }
      .save-modal__wrapper form--acitve-keyboard {
        justify-content: flex-start; }
    .save-modal__wrapper .dc-input {
      width: 100% !important; }
    .save-modal__wrapper .dc-radio-group__item {
      width: calc(50vw - 24px) !important;
      height: 35vw; }
    .save-modal__wrapper .save-type__drive-status {
      position: relative; }
    .save-modal__wrapper .modal__content {
      padding: 0px 1.6rem;
      height: calc(100% - 70px); }
    .save-modal__wrapper .modal__footer {
      position: fixed;
      bottom: 0px;
      left: 0px;
      display: flex;
      flex-direction: row;
      justify-content: flex-end;
      padding: 1.4rem;
      height: 70px;
      border-top: solid 0.1em var(--general-section-1);
      width: 100%; }
      .save-modal__wrapper .modal__footer--active-keyboard {
        margin-top: 1.6rem;
        position: relative;
        display: block;
        left: unset;
        bottom: unset; }
      .save-modal__wrapper .modal__footer--button {
        float: right;
        margin-left: 0.8rem;
        height: 4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.toolbar {
  height: 56px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: inset 0 1px 0 0 var(--general-section-1), inset 0 -1px 0 0 var(--general-section-1);
  padding: 5px 6px; }
  .toolbar__btn {
    background-color: var(--button-primary-default) !important; }
    .toolbar__btn--icon {
      display: flex;
      justify-content: center;
      margin: 0 4px;
      height: calc(56px - 16px) !important; }
      .toolbar__btn--icon .dc-btn__icon {
        padding-right: 0.4rem; }
      .toolbar__btn--icon > * {
        align-self: center; }
      .toolbar__btn--icon-text {
        font-size: 1.6rem;
        color: var(--text-colored-background);
        font-weight: 700;
        text-transform: none;
        text-align: center;
        line-height: 1.75; }
  .toolbar__section {
    display: flex; }
    .toolbar__section > * {
      align-self: center;
      margin: 0 4px; }
  .toolbar__icon {
    cursor: pointer;
    border: none;
    margin: auto 12px;
    height: 16px;
    width: 16px; }
  .toolbar__group {
    display: flex;
    border-radius: 4px;
    border: solid 1px var(--border-normal);
    height: 40px; }
    .toolbar__group-btn {
      padding: 0px 12px;
      height: 40px; }
      .toolbar__group-btn > * {
        align-self: center; }
  .toolbar__animation {
    margin-right: 0.5rem; }
  .toolbar__dialog-text--second {
    margin-top: 2.4rem; }

@keyframes spin {
  0% {
    transform: rotate(0deg); }
  100% {
    transform: rotate(360deg); } }

.vertical-divider {
  width: 1px;
  height: 17px;
  margin: 8px;
  background-color: var(--border-normal); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.bot {
  --bot-content-height: calc(100vh - 140px);
  --bot-content-width: calc(100vw - 366px);
  --drawer-content-height: calc(100vh - 394px);
  --drawer-content-height-no-stat: calc(100vh - 233px);
  --drawer-scroll-height: calc(100vh - 365px);
  --drawer-content-height-mobile: calc(100% - 233px); }

