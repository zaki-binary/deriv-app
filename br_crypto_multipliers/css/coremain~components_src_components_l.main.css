/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-text {
  font-size: var(--text-size);
  color: var(--text-color);
  line-height: var(--text-lh);
  font-weight: var(--text-weight);
  text-align: var(--text-align); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define barspinner */
.barspinner {
  margin: auto;
  width: 6rem;
  height: 2rem;
  white-space: nowrap; }
  .barspinner__rect {
    margin: 0.4rem;
    border-radius: 20px;
    height: 60%;
    width: 0.6rem;
    display: inline-block;
    -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
            animation: sk-stretchdelay 1.2s infinite ease-in-out; }
    .barspinner__rect--1 {
      -webkit-animation-delay: -1.2s;
              animation-delay: -1.2s; }
    .barspinner__rect--2 {
      -webkit-animation-delay: -1.1s;
              animation-delay: -1.1s; }
    .barspinner__rect--3 {
      -webkit-animation-delay: -1s;
              animation-delay: -1s; }
    .barspinner__rect--4 {
      -webkit-animation-delay: -0.9s;
              animation-delay: -0.9s; }
    .barspinner__rect--5 {
      -webkit-animation-delay: -0.8s;
              animation-delay: -0.8s; }
  .barspinner--dark .barspinner__rect {
    background-color: var(--brand-secondary); }

@-webkit-keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

@keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

/** @define initial-loader */
.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent; }
  .initial-loader--fullscreen {
    width: 100vw;
    height: 100vh; }
    @media (min-width: 1024px) {
      .initial-loader--fullscreen {
        height: calc(100vh - 48px - 36px); } }
    @media (min-width: 320px) and (max-width: 767px) {
      .initial-loader--fullscreen {
        height: calc(100vh - 40px); } }
  .initial-loader__barspinner {
    margin: 5rem auto; }
    .initial-loader__barspinner--rect {
      background-color: var(--brand-secondary); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent); }
  .dc-icon--disabled, .dc-popover__target__icon--disabled .info, .dc-popover__target__icon--disabled .info:hover {
    --fill-color1: var(--text-disabled);
    --fill-color2: var(--text-disabled); }
  .dc-icon--active {
    --fill-color1: #ffffff;
    --fill-color2: #ffffff; }
  .dc-icon--green {
    --fill-color1: var(--text-profit-success);
    --fill-color2: var(--text-profit-success);
    --fill-color3: #ffffff; }
  .dc-icon--red {
    --fill-color1: var(--text-loss-danger);
    --fill-color2: var(--text-loss-danger);
    --fill-color3: #ffffff; }
  .dc-icon--secondary, .dc-popover__target__icon .info {
    --fill-color1: var(--text-less-prominent);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: #ffffff; }
  .dc-icon--brand {
    --fill-color1: var(--brand-red-coral);
    --fill-color2: var(--brand-secondary);
    --fill-color3: #ffffff; }
  .dc-icon--black {
    --fill-color1: #000000; }

.dc-popover__wrapper {
  position: relative; }

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px; }
  .dc-popover__container-relative {
    position: relative; }

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%); }

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.8rem;
  max-width: 31.7rem;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1; }
  .dc-popover__bubble__icon {
    flex-grow: 1;
    margin-right: 0.7em;
    padding-top: 3px; }
  .dc-popover__bubble__text {
    flex-grow: 2; }
  .dc-popover__bubble--error {
    background-color: var(--status-danger); }

.react-tiny-popover-container--disabled-pointer-event {
  pointer-events: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-slider */
.dc-progress-slider {
  position: relative;
  width: 100%;
  padding: unset;
  box-sizing: border-box;
  margin: 8px 0;
  border-bottom: 1px solid var(--general-section-1); }
  .dc-progress-slider--completed {
    border-bottom: 1px solid var(--general-section-1);
    margin: 0.4rem 0 0.8rem; }
  .dc-progress-slider__track {
    background: var(--text-disabled);
    position: relative;
    margin: 2px 0 8px;
    height: 6px;
    width: 100%;
    border-radius: 8px; }
  .dc-progress-slider__ticks {
    position: relative; }
    .dc-progress-slider__ticks-wrapper {
      position: relative;
      margin: 2px 0 8px;
      height: 6px;
      width: 100%;
      display: flex;
      flex-direction: row;
      justify-content: space-evenly; }
    .dc-progress-slider__ticks-step {
      height: 6px;
      width: 100%;
      margin: 0 2px;
      position: relative;
      background: var(--state-hover); }
      .dc-progress-slider__ticks-step:before {
        position: absolute;
        content: '';
        transition: transform 0.25s ease-in;
        transform: scale3d(0, 1, 1);
        transform-origin: left;
        left: 0;
        top: 0;
        height: 6px;
        width: 100%;
        background-color: var(--brand-secondary); }
      .dc-progress-slider__ticks-step--marked:before {
        transform: scale3d(1, 1, 1); }
      .dc-progress-slider__ticks-step:first-child {
        margin-left: 0; }
      .dc-progress-slider__ticks-step:last-child {
        margin-right: 0; }
      .dc-progress-slider__ticks-step:first-child, .dc-progress-slider__ticks-step:first-child:before {
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px; }
      .dc-progress-slider__ticks-step:last-child, .dc-progress-slider__ticks-step:last-child:before {
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px; }
    .dc-progress-slider__ticks-caption {
      display: flex;
      justify-content: space-between; }
  .dc-progress-slider__line {
    background: var(--state-hover);
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    border-radius: 8px;
    pointer-events: none;
    transition: width 0.3s; }
    .dc-progress-slider__line--ticks {
      height: 2px; }
    .dc-progress-slider__line--green {
      background: var(--status-success) !important; }
    .dc-progress-slider__line--yellow {
      background: var(--status-warning) !important; }
    .dc-progress-slider__line--red {
      background: var(--status-danger) !important; }
  .dc-progress-slider__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden; }
    .dc-progress-slider__infinite-loader--indeterminate {
      background-color: var(--state-active); }
      .dc-progress-slider__infinite-loader--indeterminate:before, .dc-progress-slider__infinite-loader--indeterminate:after {
        content: '';
        position: absolute;
        background-color: inherit;
        top: 0;
        left: 0;
        bottom: 0;
        will-change: left, right; }
      .dc-progress-slider__infinite-loader--indeterminate:before {
        -webkit-animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
                animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }
      .dc-progress-slider__infinite-loader--indeterminate:after {
        -webkit-animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
                animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
        -webkit-animation-delay: 1.15s;
                animation-delay: 1.15s; }

@-webkit-keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@-webkit-keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-mobile-dialog; weak */
.dc-mobile-dialog {
  box-sizing: border-box;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 999;
  overflow: auto;
  transition: opacity 0.2s;
  opacity: 0;
  pointer-events: none;
  background: var(--fill-normal); }
  .dc-mobile-dialog--enter, .dc-mobile-dialog--exit {
    opacity: 0;
    pointer-events: none; }
    .dc-mobile-dialog--enter .dc-mobile-dialog__content, .dc-mobile-dialog--exit .dc-mobile-dialog__content {
      transform: scale(0); }
    .dc-mobile-dialog--enter .dc-mobile-dialog__header, .dc-mobile-dialog--exit .dc-mobile-dialog__header {
      transform: translateY(-100%); }
  .dc-mobile-dialog--enter-done {
    opacity: 1;
    pointer-events: auto; }
    .dc-mobile-dialog--enter-done .dc-mobile-dialog__content {
      transform: scale(1); }
    .dc-mobile-dialog--enter-done .dc-mobile-dialog__header {
      transform: translateY(0); }
  .dc-mobile-dialog__container--has-scroll {
    overflow-x: hidden;
    overflow-y: auto; }
  .dc-mobile-dialog__content {
    margin-top: 0.4rem;
    box-sizing: border-box;
    position: relative;
    padding-top: 3.6rem;
    z-index: 1;
    background: var(--fill-normal);
    transition: all 0.2s ease-out; }
    .dc-mobile-dialog__content--is-full-height {
      height: calc(100% - 0.4rem); }
    .dc-mobile-dialog__content > div {
      height: 100%; }
  .dc-mobile-dialog__header {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    position: fixed;
    top: 0;
    padding: 1rem;
    height: 40px;
    z-index: 4;
    background: var(--fill-normal);
    transition: all 0.2s ease-out;
    transition-delay: 0.2s;
    border-bottom: 1px solid var(--border-disabled); }
  .dc-mobile-dialog__footer {
    position: fixed;
    width: 100%;
    bottom: 0px;
    z-index: 4; }
  .dc-mobile-dialog__title {
    padding: 1.2rem 1.2rem 1.2rem 0.4rem;
    margin: 0; }
  .dc-mobile-dialog__close-btn-icon {
    margin: 1.2rem 0.4rem;
    width: 1.6rem;
    height: 1.6rem;
    /* postcss-bem-linter: ignore */
    --fill-color1: var(--text-prominent) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-progress-slider-mobile {
  display: flex;
  flex-direction: column;
  align-items: center; }
  .dc-progress-slider-mobile__timer {
    margin: 0.2rem auto; }
  .dc-progress-slider-mobile__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden; }
    .dc-progress-slider-mobile__infinite-loader--indeterminate {
      background-color: var(--state-active); }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:before, .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
        content: '';
        position: absolute;
        background-color: inherit;
        top: 0;
        left: 0;
        bottom: 0;
        will-change: left, right; }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:before {
        -webkit-animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
                animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
        -webkit-animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
                animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
        -webkit-animation-delay: 1.15s;
                animation-delay: 1.15s; }

@-webkit-keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@-webkit-keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-linear-progress; weak */
.dc-linear-progress {
  display: flex;
  height: 4px;
  justify-content: flex-start;
  align-items: flex-start;
  flex-direction: column;
  position: absolute;
  bottom: 0;
  width: 100%;
  left: 0; }
  .dc-linear-progress__bar {
    height: 100%;
    transition: width 0.5s cubic-bezier(0.62, 0.01, 0.51, 0.95);
    background-color: var(--brand-red-coral); }
  .dc-linear-progress__countdown {
    position: absolute;
    left: 1rem;
    bottom: 1rem;
    font-size: 12px;
    color: var(--brand-red-coral);
    font-weight: bold; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-carousel */
.dc-carousel {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  justify-self: center; }
  .dc-carousel__row {
    display: grid;
    grid-template-columns: 2rem 22.7rem 2rem;
    align-items: center;
    overflow-x: scroll; }
  .dc-carousel__body {
    display: flex;
    justify-content: flex-start;
    align-items: start;
    transition: all 0.3s ease;
    opacity: 1;
    overflow: hidden;
    scroll-behavior: smooth; }
  .dc-carousel__footer {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 1rem; }
  .dc-carousel__circle {
    background-color: var(--text-prominent);
    opacity: 0.5;
    margin: 0.5rem;
    width: 8px;
    height: 8px;
    border-radius: 50%; }
    .dc-carousel__circle--is-active {
      opacity: 1; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
  .dc-mobile-drawer__header-close {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-mobile-drawer__header-close .color1-fill {
      fill: var(--text-prominent); }
    .dc-mobile-drawer__header-close .color1-stroke {
      stroke: var(--text-prominent); }

/**
 * Define Breakpoints here.
 */
/* @define dc-mobile-drawer; weak */
.dc-mobile-drawer {
  position: absolute;
  top: 0;
  left: 0;
  will-change: transform;
  transform: translate3d(0, 0, 0); }
  .dc-mobile-drawer__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    background-color: var(--general-main-2);
    box-shadow: 0 16px 16px 0 var(--shadow-menu), 0 0 16px 0 var(--shadow-menu); }
  .dc-mobile-drawer__header {
    display: flex;
    width: 100%;
    height: 50px;
    z-index: 4;
    line-height: 24px;
    align-items: center;
    border-bottom: 1px solid var(--general-section-2); }
    .dc-mobile-drawer__header--right {
      flex-direction: row-reverse; }
    .dc-mobile-drawer__header-title {
      padding: 1.2rem 1.6rem;
      height: 40px;
      width: 100%;
      display: flex;
      align-items: center;
      border-left: 1px solid var(--general-section-2); }
    .dc-mobile-drawer__header-section {
      flex-grow: 1;
      padding: 1.6rem;
      line-height: 24px;
      display: flex;
      align-items: center; }
    .dc-mobile-drawer__header-close {
      display: flex;
      align-items: center;
      cursor: pointer;
      padding: 0.6rem 1.2rem;
      height: inherit;
      width: 40px; }
    .dc-mobile-drawer__header-wrapper {
      display: flex;
      width: 100%;
      justify-content: space-between; }
  .dc-mobile-drawer__subheader {
    display: flex;
    height: 72px;
    min-height: 72px;
    border-bottom: 1px solid var(--general-section-2);
    justify-content: center;
    align-items: center;
    margin-bottom: 1.8rem;
    position: absolute;
    width: 100%;
    background: var(--general-main-2);
    z-index: 1; }
    .dc-mobile-drawer__subheader--hidden {
      visibility: hidden; }
  .dc-mobile-drawer__submenu-back {
    width: 16px;
    height: 16px;
    margin-right: 16px; }
  .dc-mobile-drawer__submenu-toggle {
    display: flex;
    padding: 0 0 3.2rem 4.8rem;
    align-items: center; }
    .dc-mobile-drawer__submenu-toggle-icon {
      width: 16px;
      height: 16px;
      margin-right: 16px; }
    .dc-mobile-drawer__submenu-toggle-suffix-icon {
      width: 16px;
      height: 16px;
      margin-right: 8.3rem;
      margin-left: auto; }
  .dc-mobile-drawer__submenu-list {
    background: var(--general-main-2);
    position: absolute;
    z-index: 2;
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow: auto; }
    .dc-mobile-drawer__submenu-list--enter, .dc-mobile-drawer__submenu-list--exit {
      transform: translateX(-100%);
      opacity: 0;
      pointer-events: none; }
    .dc-mobile-drawer__submenu-list--enter-done {
      transform: translateX(0);
      opacity: 1;
      pointer-events: auto; }
    .dc-mobile-drawer__submenu-list--has-subheader {
      height: 100%; }
    .dc-mobile-drawer__submenu-list-title {
      display: flex;
      padding: 2rem 0 3.2rem 3.2rem;
      align-items: center; }
  .dc-mobile-drawer__submenu-section {
    display: flex;
    padding-left: 5.6rem;
    padding-bottom: 3.2rem;
    flex-direction: column; }
    .dc-mobile-drawer__submenu-section-title {
      display: flex;
      align-items: center; }
      .dc-mobile-drawer__submenu-section-title-text {
        padding-left: 1.6rem; }
    .dc-mobile-drawer__submenu-section-content {
      padding-left: 4.8rem; }
      .dc-mobile-drawer__submenu-section-content .header__menu-mobile-link {
        padding-top: 1.6rem; }
      .dc-mobile-drawer__submenu-section-content .header__menu-mobile-link--disabled {
        opacity: 0.32;
        pointer-events: none; }
  .dc-mobile-drawer__body {
    font-size: 1.4rem;
    height: 100%;
    padding-top: 8.8rem;
    line-height: 1.5;
    color: var(--text-prominent);
    overflow-y: auto;
    overflow-x: hidden; }
  .dc-mobile-drawer__item {
    padding: 0 0 3.2rem 4.8rem;
    font-size: 1.4rem;
    line-height: 1.5;
    color: var(--text-prominent); }
  .dc-mobile-drawer__footer {
    display: flex;
    height: 36px;
    z-index: 4;
    border-top: 1px solid var(--general-section-2);
    justify-content: flex-start;
    align-items: center;
    padding: 1.6rem; }
  .dc-mobile-drawer__wrapper {
    z-index: 9999 !important;
    background-color: var(--overlay-outside-dialog) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-mobile-full-page-modal {
  height: calc(100% - 40px - 40px);
  position: fixed;
  z-index: 6;
  width: 100%;
  left: 0px;
  top: calc(40px + 40px);
  background: var(--general-main-1);
  max-height: 100%;
  overflow-y: scroll; }
  .dc-mobile-full-page-modal--flex {
    display: flex;
    flex-direction: column;
    flex: 1; }
  .dc-mobile-full-page-modal--popup {
    height: calc(100% - 40px - 1px);
    top: calc(40px - 1px); }
  .dc-mobile-full-page-modal__header {
    align-items: center;
    display: flex;
    flex-direction: row;
    padding: 1.6rem;
    flex: 0; }
    .dc-mobile-full-page-modal__header--border-bottom {
      border-bottom: 2px solid var(--general-section-2); }
    .dc-mobile-full-page-modal__header-return {
      display: flex;
      align-items: center;
      margin-right: 1.6rem; }
    .dc-mobile-full-page-modal__header-text {
      display: flex;
      flex-direction: row; }
    .dc-mobile-full-page-modal__header-trailing-icon {
      align-items: center;
      display: flex;
      margin-left: auto; }
  .dc-mobile-full-page-modal__body {
    display: flex;
    flex: 1;
    min-height: 0;
    overflow-y: auto; }
  .dc-mobile-full-page-modal__footer {
    border-top: 2px solid var(--general-section-1);
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    margin-top: auto;
    padding: 1.6rem; }
    .dc-mobile-full-page-modal__footer-parent {
      border-top: 1px solid var(--general-section-2);
      padding: 0.8rem 1.6rem;
      background-color: var(--general-main-1); }
  .dc-mobile-full-page-modal form {
    height: 100%; }
  .dc-mobile-full-page-modal .dc-page-overlay__content {
    position: fixed;
    top: calc(40px + 40px);
    width: 100%;
    height: 100%; }
  .dc-mobile-full-page-modal .dc-page-overlay__header {
    position: fixed;
    top: 40px;
    width: 100%;
    height: 40px; }
  .dc-mobile-full-page-modal .dc-tabs {
    display: flex;
    flex-direction: column;
    height: 100%; }
    .dc-mobile-full-page-modal .dc-tabs__list {
      width: 100%;
      height: 4rem; }
    .dc-mobile-full-page-modal .dc-tabs__item {
      width: 50%; }
    .dc-mobile-full-page-modal .dc-tabs__content {
      height: calc(100% - 40px);
      z-index: 5; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-modal; weak */
.dc-modal {
  /** @define dc-modal-header */
  /** @define dc-modal-body */
  /** @define dc-modal-footer; weak */ }
  .dc-modal__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--general-main-2);
    box-shadow: 0 4px 6px 0 var(--shadow-menu); }
    .dc-modal__container--is-vertical-centered {
      position: absolute;
      top: 50vh;
      transform: translateY(-50%) !important; }
      .dc-modal__container--is-vertical-centered .dc-modal__container {
        min-width: unset;
        top: 2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-centered {
          left: 2.4rem;
          width: calc(100vw - 4.8rem) !important; } }
    .dc-modal__container--is-vertical-top {
      top: 48px;
      position: absolute; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-top {
          top: 40px;
          left: 1.6rem;
          width: calc(100vw - 3.2rem) !important; } }
    .dc-modal__container--is-vertical-bottom {
      bottom: 36px;
      position: absolute; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-bottom {
          left: 1.6rem;
          width: calc(100vw - 3.2rem) !important; } }
    .dc-modal__container--hide {
      display: none; }
    .dc-modal__container--enter, .dc-modal__container--exit {
      transform: translateY(50px);
      opacity: 0;
      pointer-events: none; }
    .dc-modal__container--enter-done {
      transform: translateY(0);
      opacity: 1;
      pointer-events: auto; }
    .dc-modal__container--small {
      max-width: 440px; }
      .dc-modal__container--small .dc-modal-header {
        border-bottom: none; }
    .dc-modal__container--is-confirmation-modal .dc-modal-header {
      border-bottom: none; }
      .dc-modal__container--is-confirmation-modal .dc-modal-header__title {
        padding: 2.4rem; }
    .dc-modal__container--is-confirmation-modal .dc-modal-body {
      padding: 0 2.4rem; }
    .dc-modal__container--is-confirmation-modal .dc-modal-footer {
      padding: 2.4rem; }
    @media (min-width: 1024px) {
      .dc-modal__container {
        min-width: 400px !important;
        max-height: calc(100vh - 48px - 36px) !important; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-modal__container {
        max-width: calc(100vw - 3.2rem) !important; } }
  .dc-modal-header {
    display: flex;
    justify-content: space-between;
    width: 100%;
    line-height: 24px;
    align-items: center; }
    .dc-modal-header__border-bottom {
      border-bottom: 2px solid var(--general-section-2) !important; }
    .dc-modal-header__title {
      padding: 1.6rem 2.4rem;
      display: flex;
      align-items: center;
      height: 100%; }
      .dc-modal-header__title:empty {
        padding: 0;
        border: none; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal-header__title {
          font-size: 1.4rem;
          padding: 1.6rem;
          line-height: 1.2; } }
    .dc-modal-header__section {
      flex-grow: 1;
      padding: 1.6rem;
      line-height: 24px;
      display: flex;
      align-items: center; }
    .dc-modal-header__close {
      display: block;
      cursor: pointer;
      padding: 0.6rem 0.8rem;
      height: 30px;
      width: 32px;
      margin: 1.2rem 1.6rem 1.2rem auto; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal-header__close {
          margin: 0.8rem; } }
    .dc-modal-header--is-title-centered {
      justify-content: flex-end;
      position: relative; }
      .dc-modal-header--is-title-centered .dc-modal-header__title {
        justify-content: center;
        width: 100%; }
        @media (min-width: 320px) and (max-width: 767px) {
          .dc-modal-header--is-title-centered .dc-modal-header__title {
            position: absolute; } }
      .dc-modal-header--is-title-centered .dc-modal-header__close {
        z-index: 1; }
    @media not all and (min-resolution: 0.001dpcm) {
      @supports (-webkit-appearance: none) {
        .dc-modal-header {
          /* postcss-bem-linter: ignore */
          min-height: 4.8rem; } } }
  .dc-modal-body {
    padding: 2.4rem;
    font-size: 1.4rem;
    line-height: 1.43;
    color: var(--text-prominent); }
    .dc-modal-body:first-child {
      padding-top: 2.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-modal-body {
        font-size: 1.2rem;
        padding: 0.8rem 2.4rem; } }
  .dc-modal-footer {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem;
    margin-top: auto; }
    .dc-modal-footer .dc-btn {
      margin: 0 0.8rem; }
      .dc-modal-footer .dc-btn:last-child {
        margin: 0; }
    .dc-modal-footer--separator {
      border-top: 2px solid var(--general-section-1); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define multi-step; weak */
.multi-step {
  width: inherit;
  height: inherit; }
  .multi-step__header {
    display: flex;
    align-items: center;
    margin: 2.4rem 1.6rem; }
  .multi-step__btn {
    display: flex;
    font-size: 1.4rem;
    font-weight: bold;
    cursor: pointer;
    color: var(--text-general); }
    .multi-step__btn-icon {
      margin-right: 8px; }
      .multi-step__btn-icon .color1-fill {
        fill: var(--text-general); }
  .multi-step__component {
    width: 100%;
    height: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@-webkit-keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0); }
  100% {
    transform: translate3d(-100%, 0, 0); } }
@keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0); }
  100% {
    transform: translate3d(-100%, 0, 0); } }

@-webkit-keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0); }
  100% {
    transform: translate3d(-200%, 0, 0); } }

@keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0); }
  100% {
    transform: translate3d(-200%, 0, 0); } }

.dc-news-ticker {
  display: flex;
  white-space: nowrap;
  overflow: hidden; }
  .dc-news-ticker__children {
    -webkit-animation-iteration-count: infinite;
            animation-iteration-count: infinite;
    -webkit-animation-name: dc-news-ticker;
            animation-name: dc-news-ticker;
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    will-change: transform; }
    .dc-news-ticker__children:nth-child(2) {
      -webkit-animation-name: dc-news-ticker-2;
              animation-name: dc-news-ticker-2; }
  .dc-news-ticker__item {
    display: inline-block; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* S: Steps
   N: Number
   B: Backspace
   O: Ok
   Z: Zero
 */
.dc-numpad {
  box-sizing: border-box;
  display: grid;
  grid-gap: 0.3rem;
  grid-template-columns: repeat(4, 1fr); }
  .dc-numpad--is-regular {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z z o';
    grid-template-columns: -webkit-min-content -webkit-min-content -webkit-min-content minmax(48px, 1fr);
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -webkit-min-content;
    max-width: -moz-min-content;
    max-width: min-content; }
  .dc-numpad--is-currency {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z p o';
    grid-template-columns: -webkit-min-content -webkit-min-content -webkit-min-content minmax(48px, 1fr);
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -webkit-min-content;
    max-width: -moz-min-content;
    max-width: min-content; }
  .dc-numpad__input-area {
    display: grid;
    grid-area: np;
    grid-template-areas: 'dc inp inp nc';
    grid-template-columns: -webkit-min-content 1fr 1fr -webkit-min-content;
    grid-template-columns: min-content 1fr 1fr min-content; }
  .dc-numpad__decrement {
    grid-area: dc;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0; }
  .dc-numpad__increment {
    grid-area: nc;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0; }
  .dc-numpad__increment, .dc-numpad__decrement {
    width: 48px;
    height: 48px; }
  .dc-numpad__input-field, .dc-numpad__increment, .dc-numpad__decrement {
    background-color: var(--general-section-2);
    color: var(--text-prominent); }
  .dc-numpad__input-field {
    grid-area: inp;
    padding: 0;
    margin: 0 !important;
    border: none;
    border-radius: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    color: var(--text-prominent); }
    .dc-numpad__input-field input {
      padding: 0;
      max-height: 48px; }
    .dc-numpad__input-field--has-error {
      color: var(--status-danger);
      font-weight: bold; }
  .dc-numpad__number {
    border-radius: 2.4rem;
    background-color: var(--general-section-2);
    width: 48px;
    height: 48px;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    color: var(--text-prominent);
    text-align: left !important; }
    .dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
      background-color: var(--general-disabled) !important;
      pointer-events: none;
      touch-action: none; }
    .dc-numpad__number--r3 {
      grid-row: 2 / 2; }
    .dc-numpad__number--r2 {
      grid-row: 3 / 3; }
    .dc-numpad__number--r1 {
      grid-row: 4 / 4; }
    .dc-numpad__number--zero {
      grid-area: z;
      width: 100% !important; }
    .dc-numpad__number--is-left-aligned {
      text-align: left;
      width: 100%;
      padding: 0 0 0 4px; }
  .dc-numpad__dot {
    grid-area: p; }
  .dc-numpad__bkspace {
    grid-area: b; }
    .dc-numpad__bkspace button {
      height: 100%; }
  .dc-numpad__ok {
    grid-area: o; }
    .dc-numpad__ok button {
      height: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-page-error */
.dc-page-error__container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(100vh - 84px); }
  @media (min-width: 1024px) {
    .dc-page-error__container--left {
      justify-content: left; } }

.dc-page-error__box {
  background: var(--general-main-1);
  border: var(--general-main-1);
  padding: 2rem;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  /* postcss-bem-linter: ignore */ }
  @media (min-width: 1024px) {
    .dc-page-error__box--left {
      align-items: start; } }
  @media screen and (min-width: 1008px) {
    .dc-page-error__box {
      max-width: calc(100vw - 45%); } }
  .dc-page-error__box .inline-icon {
    margin: 0 auto; }

.dc-page-error__message {
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  max-width: 502px;
  margin: 1.6rem 0 2.4rem; }
  .dc-page-error__message-wrapper {
    display: flex;
    justify-content: center; }
    @media (min-width: 1024px) {
      .dc-page-error__message-wrapper--left {
        justify-content: left; } }
    .dc-page-error__message-wrapper--left .dc-page-error__message-paragraph:not(:last-child) {
      margin-bottom: 1.6rem;
      max-width: 38rem; }
  @media (min-width: 1024px) {
    .dc-page-error__message--left {
      text-align: left; } }

.dc-page-error__btn {
  margin: 0 1rem;
  min-width: 14rem; }
  .dc-page-error__btn-wrapper {
    display: flex;
    justify-content: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-error__btn {
      margin: 0 0 1.6rem; }
      .dc-page-error__btn-wrapper {
        flex-direction: column; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-page-overlay-portal {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 48px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2);
  opacity: 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay-portal {
      top: 40px; } }

.dc-page-overlay--enter, .dc-page-overlay--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none; }

.dc-page-overlay--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto; }

.dc-page-overlay__header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 2;
  background-color: var(--general-main-1);
  padding: 0.8rem 2.4rem;
  border-bottom: 1px solid var(--general-section-1); }
  .dc-page-overlay__header-title {
    flex: 1;
    text-align: center;
    font-size: var(--text-size-m);
    color: var(--text-prominent);
    font-weight: bold;
    line-height: 1.5; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-title {
        font-size: 1.6rem; } }
  .dc-page-overlay__header-close {
    cursor: pointer;
    height: 16px;
    position: absolute;
    right: 0; }
    .dc-page-overlay__header-close .dc-icon {
      --fill-color1: var(--text-prominent); }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-close {
        right: 1.2rem; } }
  .dc-page-overlay__header-wrapper {
    width: 100%;
    display: flex;
    align-items: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-wrapper {
        height: 100%;
        padding: 0; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__header {
      height: 4rem;
      z-index: 3;
      padding: 0;
      margin: 0; } }

.dc-page-overlay__content {
  padding: 2.4rem 0 0;
  display: flex;
  background-color: var(--general-main-1); }
  .dc-page-overlay__content-side-note {
    min-width: 256px;
    margin-left: 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__content {
      flex: 1;
      padding: 0; } }

.dc-page-overlay__header-wrapper, .dc-page-overlay__content {
  max-width: 1232px;
  margin: auto;
  position: relative; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__header-wrapper, .dc-page-overlay__content {
      width: 100%; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay {
    display: flex;
    flex-direction: column;
    height: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-password-input__visibility-icon {
  cursor: pointer; }

input[style*='background'] ~ .dc-password-input__visibility-icon {
  right: 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-password-meter {
  transition: transform 0.25s linear;
  background: var(--status-danger);
  transform-origin: left top;
  z-index: 2; }
  .dc-password-meter, .dc-password-meter__bg {
    position: absolute;
    bottom: 1px;
    left: 1px;
    height: 4px;
    border-radius: 0 0 3px 3px;
    width: calc(100% - 2px); }
  .dc-password-meter__bg {
    z-index: 1;
    background: var(--fill-disabled); }
  .dc-password-meter__container {
    position: relative; }
    .dc-password-meter__container .dc-input {
      border-radius: 4px; }
    .dc-password-meter__container .dc-password-meter__warning {
      color: var(--status-warning);
      top: 4.1rem;
      padding-left: 1.3rem; }
  .dc-password-meter--weak {
    background-color: var(--status-danger);
    z-index: 2; }
  .dc-password-meter--strong {
    background-color: var(--status-success);
    z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tabs {
  position: relative;
  display: grid; }
  .dc-tabs--top {
    grid-template-rows: auto 1fr; }
  .dc-tabs--100vw {
    width: 100vw; }
  .dc-tabs__list {
    width: 100%;
    line-height: 38px;
    display: flex;
    position: relative; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__list {
        justify-content: center; } }
    .dc-tabs__list--border-bottom {
      border-bottom: 2px solid var(--general-section-1); }
    .dc-tabs__list--top {
      order: 0; }
    .dc-tabs__list--bottom {
      order: 1;
      border-top: 2px solid var(--general-section-1); }
    .dc-tabs__list--center {
      justify-content: center;
      width: -webkit-fit-content;
      width: -moz-fit-content;
      width: fit-content;
      margin: auto; }
      .dc-tabs__list--center .dc-tabs__item {
        padding: 0 2.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__list--fit-content {
        width: -webkit-fit-content;
        width: -moz-fit-content;
        width: fit-content; } }
    .dc-tabs__list--header-fit-content {
      width: -webkit-fit-content;
      width: -moz-fit-content;
      width: fit-content; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-tabs__list--header-fit-content {
          display: flex;
          justify-content: space-evenly; } }
    .dc-tabs__list:not(.dc-tabs__list--header-fit-content) {
      justify-content: center; }
    .dc-tabs__list--full-width {
      width: 100vw; }
  .dc-tabs__item {
    list-style: none;
    font-size: 14px;
    text-align: center;
    white-space: nowrap;
    color: var(--text-general);
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent; }
    .dc-tabs__item__counter {
      margin-top: -2rem;
      vertical-align: middle; }
    .dc-tabs__item__icon {
      padding-right: 0.7rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-tabs__item__icon {
          padding-right: 0;
          padding-top: 0.5rem; } }
    .dc-tabs__item--header-fit-content {
      padding: 0px 29px; }
    .dc-tabs__item--is-hidden {
      display: none; }
    .dc-tabs__item:not(.dc-tabs__active) {
      cursor: pointer;
      color: var(--text-general); }
    .dc-tabs__item:not(.dc-tabs__item--header-fit-content) {
      width: var(--tab-width); }
  .dc-tabs__active {
    font-weight: 700;
    color: var(--text-prominent); }
  .dc-tabs__active-line {
    display: block;
    position: absolute;
    left: 0;
    height: 2px;
    background: var(--brand-red-coral);
    transition: all ease-in-out 0.3s; }
    .dc-tabs__active-line--top {
      bottom: -2px; }
    .dc-tabs__active-line--bottom {
      top: -2px; }
    .dc-tabs__active-line--is-hidden {
      display: none; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__active-line--fit-content {
        width: 120px; } }
    .dc-tabs__active-line:not(.dc-tabs__active-line--header-fit-content) {
      width: var(--tab-width); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-popup {
  position: relative;
  z-index: 9999; }
  .dc-popup__header {
    display: flex;
    width: 100%; }
    .dc-popup__header-content {
      flex: 1; }
    .dc-popup__header-container {
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center; }
    .dc-popup__header-close {
      margin-left: 2.1rem;
      margin-top: -0.3rem;
      margin-right: -0.3rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-popup__header-close {
          margin-top: 0.5rem;
          margin-right: 0.5rem; } }
      .dc-popup__header-close-icon {
        cursor: pointer; }
    .dc-popup__header-button {
      margin-left: 1.6rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-popup__header-button {
          margin-left: 2.2rem; } }
    .dc-popup__header-balance {
      display: flex;
      align-items: center; }
    .dc-popup__header-banner {
      background-color: var(--status-warning);
      border-radius: 10rem;
      padding: 0.4rem 0.8rem;
      display: flex;
      align-items: center; }
      @media (min-width: 1024px) {
        .dc-popup__header-banner {
          margin-top: 0.4rem; } }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-popup__header-banner {
          background-color: var(--general-main-1);
          margin-left: 0.8rem; } }
    .dc-popup__header-big-text {
      margin-top: 2rem; }
    .dc-popup__header-title-container {
      display: flex;
      align-items: center; }
  .dc-popup__body {
    padding: 0;
    flex: 1;
    min-height: 0; }
    .dc-popup__body:first-child {
      padding-top: 0 !important; }
    .dc-popup__body .dc-tabs__content--popup {
      background: var(--general-main-1); }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup__body .dc-tabs__list--header--popup {
        overflow-y: hidden;
        -ms-overflow-style: none;
        /* IE and Edge */
        scrollbar-width: none;
        /* Firefox */ } }
  @media (min-width: 320px) and (max-width: 767px) and (min-width: 27.5rem) {
    .dc-popup__body .dc-tabs__list--header--popup {
      overflow-x: hidden; } }
    @media (min-width: 320px) and (max-width: 767px) {
        .dc-popup__body .dc-tabs__list--header--popup::-webkit-scrollbar {
          display: none;
          /* Chrome Safari */ } }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup__body .dc-tabs__list--popup {
        height: 5.8rem !important; } }
  @media (min-width: 320px) and (max-width: 767px) and (max-width: 27.5rem) {
    .dc-popup__body .dc-tabs__list--popup {
      margin-right: 4.2rem;
      width: 123% !important; } }
    .dc-popup__body .dc-tabs__item--popup {
      border-radius: 16px 16px 0px 0px;
      display: flex;
      align-items: center;
      justify-content: center; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-popup__body .dc-tabs__item--popup {
          height: 5.8rem;
          width: 8.2rem !important;
          flex-direction: column;
          font-size: 12px;
          box-sizing: border-box; } }
    .dc-popup__body .dc-tabs__active--popup {
      background: var(--general-main-1); }
    .dc-popup__body .dc-tabs--popup {
      height: 100%;
      display: flex;
      flex-direction: column; }
  .dc-popup__footer {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem;
    position: fixed;
    width: 100%;
    bottom: 0; }
    .dc-popup__footer__separator {
      border-top: 2px solid var(--general-section-1); }
  .dc-popup__overlay {
    transition: opacity 0.1s ease-in-out;
    opacity: 0;
    padding: 3.2rem;
    overflow-y: auto;
    background-color: var(--general-main-1);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0; }
    .dc-popup__overlay:empty {
      display: none; }
    .dc-popup__overlay--enter-done {
      opacity: 0.95; }
    .dc-popup__overlay--exit {
      opacity: 0; }
    .dc-popup__overlay-content {
      max-width: 500px; }
      .dc-popup__overlay-content-header {
        margin-bottom: 0.8rem; }
      .dc-popup__overlay-content-separator {
        height: 1px;
        width: 100%;
        background-color: var(--general-section-1); }
      .dc-popup__overlay-content-list {
        padding-left: 1.6rem;
        list-style-type: disc;
        margin-top: 2.4rem; }
        .dc-popup__overlay-content-list li::marker {
          color: var(--text-general);
          font-size: var(--text-size-xs); }
        .dc-popup__overlay-content-list li + li {
          margin-top: 2rem; }
      .dc-popup__overlay-content-button {
        margin-top: 2.4rem; }

.dc-modal-header--popup {
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  align-items: flex-start;
  flex-grow: 0; }

.dc-modal-header__title--popup {
  width: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header__title--popup {
      align-items: flex-start; } }

.dc-modal-header__section--popup {
  padding: 2.4rem; }

.dc-modal-header__section .dc-modal-header__close {
  margin: 2.1rem 2.1rem 0rem 0rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-bar */
.dc-progress-bar__container {
  height: 2.4rem;
  width: 12rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem;
  position: relative;
  overflow: hidden; }

.dc-progress-bar--danger {
  background-color: var(--status-danger); }

.dc-progress-bar--warning {
  background-color: var(--status-warning); }

.dc-progress-bar--normal {
  background-color: var(--status-success); }

.dc-progress-bar__bar {
  height: 100%;
  position: absolute;
  left: 0; }

.dc-progress-bar__empty {
  width: 100%;
  position: absolute;
  opacity: 0.16;
  height: 100%; }

.dc-progress-bar__label {
  z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-indicator */
.dc-progress-indicator {
  position: relative; }
  .dc-progress-indicator__container {
    height: 0.4rem;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    position: relative;
    overflow: hidden; }
  .dc-progress-indicator__bar {
    z-index: 2;
    background-color: var(--status-success);
    height: 100%;
    position: absolute;
    left: 0; }
  .dc-progress-indicator__empty {
    z-index: 1;
    background-color: var(--general-section-1);
    width: 100%;
    height: 100%;
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-radio-group {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  margin-top: 16px; }
  .dc-radio-group__input {
    display: none; }
  .dc-radio-group__item {
    display: flex;
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    cursor: pointer;
    color: var(--text-general); }
  .dc-radio-group__item:not(:last-child) {
    margin-right: 16px; }
  .dc-radio-group__circle {
    border: 2px solid var(--text-general);
    border-radius: 50%;
    box-shadow: 0 0 1px 0 var(--shadow-menu);
    width: 16px;
    height: 16px;
    transition: all 0.3s ease-in-out;
    margin-right: 8px;
    align-self: center; }
    .dc-radio-group__circle--disabled {
      border-color: var(--border-disabled); }
    .dc-radio-group__circle--selected {
      border-width: 4px;
      border-color: var(--brand-red-coral); }
  .dc-radio-group__label--disabled {
    color: var(--text-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-read-more__toggle {
  color: var(--status-danger);
  font-weight: var(--text-weight-bold); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-real-wallet-card {
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  .dc-real-wallet-card__actions-container {
    align-self: center;
    display: flex;
    flex-direction: row;
    height: 4.3rem;
    justify-content: space-between;
    width: calc(100% - 3.2rem); }
    .dc-real-wallet-card__actions-container--temporarily-unavailable {
      height: unset; }
  .dc-real-wallet-card__action {
    align-items: center;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.25s ease-in-out; }
    .dc-real-wallet-card__action--icon {
      border: 0.33px solid var(--general-main-1);
      border-radius: 0.8rem;
      padding: 0.24rem;
      transform: scale(1.6);
      transition: transform 0.25s ease-in-out; }
    .dc-real-wallet-card__action--text {
      display: flex;
      padding-top: 0.4rem;
      transform: scale(1);
      transition: transform 0.25s ease-in-out; }
  .dc-real-wallet-card__content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 0 1.6rem; }
    .dc-real-wallet-card__content--no-footer {
      justify-content: flex-end;
      padding-bottom: 1.6rem; }
  .dc-real-wallet-card__footer--temporarily-unavailable {
    align-items: center;
    align-self: center;
    background: var(--status-warning);
    border-radius: 1.6rem;
    display: flex;
    height: 2.2rem;
    justify-content: center;
    margin: 0 1rem 0.8rem;
    width: calc(100% - 2rem); }
  .dc-real-wallet-card__footer--deposit {
    align-self: flex-end;
    border-radius: 2.1rem;
    height: 2.4rem;
    margin: 0 1.6rem 1.6rem;
    width: 7.1rem; }
    .dc-real-wallet-card__footer--deposit .dc-btn__icon {
      padding-right: 0.3rem; }
  .dc-real-wallet-card__header {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem 1.6rem 0.4rem; }
    .dc-real-wallet-card__header--icon {
      height: 4rem;
      width: 6.4rem; }
    .dc-real-wallet-card__header--selected {
      justify-content: space-between; }
  .dc-real-wallet-card--linked {
    border: 4px solid var(--status-info); }
  .dc-real-wallet-card--no-funds {
    background: rgba(255, 255, 255, 0.32);
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-select-native {
  width: 100%;
  position: relative; }
  .dc-select-native--hide-selected-value {
    margin-left: 10px;
    width: 40px; }
    .dc-select-native--hide-selected-value .dc-select-native__wrapper {
      width: 40px; }
  .dc-select-native__wrapper {
    height: 38px; }
    .dc-select-native__wrapper .dc-input {
      margin-bottom: 0px; }
  .dc-select-native__arrow {
    position: absolute;
    right: 1.2rem;
    top: 1.2rem;
    --fill-color1: var(--text-less-prominent); }
  .dc-select-native__display {
    height: 38px;
    width: 100%;
    max-width: calc(100vw - 4rem);
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding-left: 1.2rem; }
    .dc-select-native__display-text {
      color: var(--text-prominent);
      font-size: 1.4rem;
      white-space: nowrap;
      overflow: hidden;
      max-width: calc(100% - 4rem);
      text-overflow: ellipsis;
      display: block;
      height: 100%;
      line-height: 3.8rem; }
  .dc-select-native__placeholder {
    position: absolute;
    left: 1rem;
    top: 1rem;
    pointer-events: none;
    transition: transform 0.25s linear;
    padding: 0 0.4rem;
    font-size: 1.4rem;
    transform: none;
    background-color: var(--fill-normal);
    color: var(--text-less-prominent);
    transform-origin: top left;
    line-height: 1.43;
    white-space: nowrap;
    max-width: calc(100% - 3.6rem);
    text-overflow: ellipsis;
    overflow: hidden; }
    .dc-select-native__placeholder--has-value {
      transform: translate(0, -1.8rem) scale(0.75);
      color: var(--text-general);
      max-width: 100%; }
    .dc-select-native__placeholder--disabled {
      color: var(--text-disabled); }
  .dc-select-native__picker {
    opacity: 0;
    width: 100%;
    height: 38px;
    left: 0;
    top: 0;
    position: absolute; }
  .dc-select-native--disabled .dc-select-native__display-text {
    color: var(--text-disabled); }
  .dc-select-native--disabled .dc-select-native__placeholder:not(.dc-select-native__placeholder--has-value) {
    color: var(--text-disabled); }
  .dc-select-native--disabled .dc-icon {
    --fill-color1: var(--text-disabled); }
  .dc-select-native--error .dc-select-native__placeholder {
    color: var(--brand-red-coral); }
  .dc-select-native__hint {
    margin-left: 1.2rem; }
  .dc-select-native__suffix-icon {
    position: absolute;
    left: 11px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define send-email-template */
.send-email-template {
  padding: 0 16px; }
  .send-email-template__title {
    margin-bottom: 0.8rem;
    line-height: 1.5; }
  .send-email-template__subtitle {
    margin-bottom: 1.6rem; }
  .send-email-template__icon {
    margin-top: 5.6rem;
    margin-bottom: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .send-email-template__icon {
        margin-top: 3.2rem; } }
  .send-email-template__sent, .send-email-template__cta {
    text-align: center; }
  .send-email-template__cta-btn {
    margin: 3.2rem auto 0; }
  .send-email-template__btn {
    margin: 0 auto; }
  .send-email-template-dashboard {
    width: calc(100vw - 33rem); }
  @media (min-width: 320px) and (max-width: 767px) {
    .send-email-template {
      margin-bottom: 1.6rem;
      width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-swipeable {
  position: relative;
  height: 100%; }
  .dc-swipeable__view {
    display: flex;
    flex-direction: row;
    transition: transform 0.1s linear;
    width: -webkit-max-content;
    width: -moz-max-content;
    width: max-content;
    height: inherit; }
  .dc-swipeable__item {
    position: relative;
    display: inline-flex;
    width: 100vw; }
    .dc-swipeable__item--is-disabled .dc-swipeable__view {
      transform: translateX(-100vw);
      transition: none; }
  .dc-swipeable__nav {
    position: absolute;
    bottom: 0;
    width: 100vw;
    z-index: 3;
    display: flex;
    padding: 1.6rem 0.8rem;
    justify-content: space-between; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-relative-datepicker {
  width: 100%;
  text-align: center;
  padding-bottom: 16px;
  position: relative; }
  .dc-relative-datepicker__span {
    width: 100%;
    cursor: pointer; }
  .dc-relative-datepicker__input {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-table {
  color: var(--text-general);
  background: inherit; }
  .dc-table__row {
    display: grid;
    border-bottom: 1px solid var(--general-section-1);
    height: 100%; }
    .dc-table__row--hover:hover {
      background-color: var(--general-section-1);
      cursor: pointer; }
  .dc-table__header {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px; }
  .dc-table__cell, .dc-table__head {
    font-size: 1.4rem;
    line-height: 1.43;
    display: flex;
    align-items: center;
    white-space: unset;
    text-align: left;
    -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
    word-wrap: break-word;
    word-break: break-word;
    word-wrap: break-word; }
  .dc-table__cell--right {
    display: flex;
    justify-content: flex-end; }
  .dc-table__cell--fixed {
    position: -webkit-sticky;
    position: sticky;
    left: 0;
    z-index: 2; }
  .dc-table__head {
    font-weight: bold; }
    .dc-table__head--right {
      display: flex;
      justify-content: flex-end; }
  .dc-table--scroll .dc-table__header {
    position: -webkit-sticky;
    position: sticky;
    top: 0;
    z-index: 3; }
  .dc-table--scrollbar {
    display: block; }
    @supports (-webkit-hyphens: none) {
      .dc-table--scrollbar {
        display: unset; } }

