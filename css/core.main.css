@import url(https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300,400,500,700&display=swap&subset=cyrillic,cyrillic-ext,latin-ext,vietnamese);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent); }
  .dc-icon--disabled {
    --fill-color1: var(--text-disabled);
    --fill-color2: var(--text-disabled); }
  .dc-icon--active {
    --fill-color1: #ffffff;
    --fill-color2: #ffffff; }
  .dc-icon--green {
    --fill-color1: var(--text-profit-success);
    --fill-color2: var(--text-profit-success);
    --fill-color3: #ffffff; }
  .dc-icon--red {
    --fill-color1: var(--text-loss-danger);
    --fill-color2: var(--text-loss-danger);
    --fill-color3: #ffffff; }
  .dc-icon--secondary {
    --fill-color1: var(--text-less-prominent);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: #ffffff; }
  .dc-icon--brand {
    --fill-color1: var(--brand-red-coral);
    --fill-color2: var(--brand-secondary);
    --fill-color3: #ffffff; }
  .dc-icon--black {
    --fill-color1: #000000; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */ }
  .dc-accordion__wrapper > div:last-child {
    border-bottom-right-radius: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-width: 1px; }

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem; }
  .dc-accordion__item--first {
    border-top-right-radius: 4px;
    border-top-left-radius: 4px; }
  .dc-accordion__item--open .dc-accordion__item-header {
    border-bottom: 1px solid var(--general-section-1); }
  .dc-accordion__item--open .dc-accordion__item-content {
    display: block; }
  .dc-accordion__item--close .dc-accordion__item-content {
    display: none; }
  .dc-accordion__item-header {
    cursor: pointer;
    line-height: 1.43;
    padding: 8px 16px; }
    .dc-accordion__item-header-icon {
      vertical-align: middle;
      /* postcss-bem-linter: ignore */ }
      .dc-accordion__item-header-icon-wrapper {
        float: right;
        padding-left: 16px; }
      .dc-accordion__item-header-icon path,
      .dc-accordion__item-header-icon rect {
        fill: var(--text-general); }
  .dc-accordion__item-content {
    padding: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-text {
  font-size: var(--text-size);
  color: var(--text-color);
  line-height: var(--text-lh);
  font-weight: var(--text-weight);
  text-align: var(--text-align); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-app-card__wrapper {
  display: flex;
  flex-direction: column;
  position: relative;
  align-items: flex-start; }
  .dc-app-card__wrapper--virtual {
    width: 28rem;
    height: 21.4rem;
    background: var(--app-card-virtual);
    border-radius: 0.8rem;
    padding: 0.8rem 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--virtual {
        width: 27.2rem;
        height: 17.6rem;
        padding: 0.8rem 1.2rem; } }
    .dc-app-card__wrapper--virtual-swap-free {
      background: var(--app-card-virtual-swap-free); }
  .dc-app-card__wrapper--real {
    width: 28rem;
    height: 18.2rem;
    background: var(--general-main-1);
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.05), 0px 16px 20px rgba(0, 0, 0, 0.05);
    border-radius: 1.6rem;
    padding: 1.6rem; }
    .dc-app-card__wrapper--real-background {
      position: absolute;
      top: 0;
      left: 0;
      height: 6rem;
      width: 100%;
      border-radius: 1.6rem 1.6rem 0 0; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--real {
        width: 27.2rem;
        height: 14.4rem;
        padding: 1.2rem; } }
  .dc-app-card__wrapper--mini {
    height: 12.8rem;
    width: 21.6rem;
    padding: 1.6rem; }
  .dc-app-card__wrapper--micro {
    height: 9.6rem;
    width: 16.2rem;
    padding: 1.2rem; }

.dc-app-card__badge {
  height: 1.6rem;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 0.8rem;
  padding: 0.2rem 0.8rem;
  border-radius: 1.2rem; }

.dc-app-card-header__wrapper {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center; }

.dc-app-card-header__container {
  display: flex;
  flex-direction: row; }

.dc-app-card-header__badge--demo {
  background: var(--badge-white);
  cursor: text; }

.dc-app-card-header__badge--swap-free {
  background: var(--badge-green);
  cursor: text; }

.dc-app-card-header__badge--add-real {
  height: 2.4rem;
  background: var(--badge-blue);
  margin-right: unset;
  cursor: pointer; }
  .dc-app-card-header__badge--add-real-icon {
    height: 1.2rem;
    width: 1.2rem;
    border: 1px solid var(--general-main-1);
    border-radius: 0.6rem; }
  .dc-app-card-header__badge--add-real-text {
    margin-left: 0.4rem; }

.dc-app-card-body__wrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: flex-start;
  z-index: 5; }
  .dc-app-card-body__wrapper--no-hover {
    flex-grow: 1;
    justify-content: space-between; }
  .dc-app-card-body__wrapper--virtual-default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__wrapper--virtual-default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__wrapper--virtual-mini {
    margin-top: 0; }
  .dc-app-card-body__wrapper--virtual-micro {
    flex-grow: unset;
    justify-content: unset; }
  .dc-app-card-body__wrapper--real-micro {
    flex-grow: unset;
    justify-content: unset; }

.dc-app-card-body__app-info-wrapper {
  display: flex;
  align-items: center; }

.dc-app-card-body__app-info-icon--default {
  height: 48px;
  width: 48px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-body__app-info-icon--default {
      height: 32px;
      width: 32px; } }

.dc-app-card-body__app-info-icon--mini {
  height: 24px;
  width: 24px; }

.dc-app-card-body__app-info-icon--micro {
  height: 18px;
  width: 18px; }

.dc-app-card-body__app-info-name--default {
  margin-left: 0.8rem; }

.dc-app-card-body__app-info-name--mini {
  margin-left: 0.6rem; }

.dc-app-card-body__app-info-name--micro {
  margin-left: 0.4rem; }

.dc-app-card-body__balance-info-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%; }

.dc-app-card-body__balance-info-content {
  display: flex;
  flex-direction: column;
  justify-content: center; }
  .dc-app-card-body__balance-info-content--default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__balance-info-content--default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__balance-info-content--mini {
    margin-top: 0.8rem; }
  .dc-app-card-body__balance-info-content--micro {
    margin-top: 0.4rem; }

.dc-app-card-body__badge--swap-free {
  background: var(--badge-violet);
  cursor: text;
  margin-right: unset;
  position: absolute;
  right: 1rem;
  top: 1rem; }

.dc-app-card-footer__wrapper {
  width: calc(100% - 3.2rem);
  height: 3.2rem;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  position: absolute;
  bottom: 1.6rem; }
  .dc-app-card-footer__wrapper--default {
    bottom: 1.8rem; }
  .dc-app-card-footer__wrapper--mini {
    bottom: 1.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-footer__wrapper {
      height: unset;
      bottom: 1.2rem; } }

.dc-app-card-footer__info {
  display: flex;
  flex-direction: column;
  justify-content: center; }

.dc-app-card-actions__wrapper {
  height: 3.2rem;
  width: calc(100% - 2.4rem);
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  position: absolute;
  bottom: 1.2rem; }

.dc-app-card-actions__content-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s;
  cursor: pointer; }
  .dc-app-card-actions__content-wrapper:hover {
    transform: scale(1.5); }

.dc-app-card-actions__icon {
  height: 1.6rem;
  width: 1.6rem; }
  .dc-app-card-actions__icon--hover {
    padding: 0.2rem;
    border-radius: 0.8rem; }
    .dc-app-card-actions__icon--hover-virtual {
      border: 1px solid var(--general-main-1); }
    .dc-app-card-actions__icon--hover-real {
      border: 1px solid var(--border-hover-1); }
  .dc-app-card-actions__icon--play {
    height: 3.2rem;
    width: 3.2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 1.6rem;
    background: var(--brand-red-coral);
    transition: transform 0.2s;
    cursor: pointer; }
    @media (min-width: 1024px) {
      .dc-app-card-actions__icon--play:hover {
        transform: scale(1.3); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-field {
  position: absolute;
  top: 4rem;
  text-align: left !important;
  font-size: var(--text-size-xxs);
  line-height: 1.25; }
  .dc-field--error {
    padding-left: 1rem;
    font-size: 1.2rem;
    color: var(--text-loss-danger);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.25; }
  .dc-field--warn {
    padding-left: 1.2rem;
    padding-top: 0.4rem;
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    color: #999999; }

.dc-input__footer .dc-field {
  position: relative;
  top: unset; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-input {
  position: relative;
  width: 100%;
  border-radius: 4px;
  border: 1px solid var(--border-normal);
  display: flex;
  align-items: center;
  margin-bottom: 3.2rem;
  line-height: 1.43; }
  .dc-input:hover:not(.dc-input--disabled) {
    border-color: var(--border-hover); }
  .dc-input[focus-within] {
    border-color: var(--brand-secondary); }
  .dc-input:focus-within {
    border-color: var(--brand-secondary); }
    .dc-input[focus-within]:hover {
      border-color: var(--brand-secondary); }
    .dc-input:focus-within:hover {
      border-color: var(--brand-secondary); }
  .dc-input--disabled {
    border-color: var(--general-disabled);
    color: var(--text-disabled); }
  .dc-input__field {
    background: none;
    color: var(--text-prominent);
    font-size: var(--text-size-xs);
    padding: 1rem 1.2rem;
    width: 100%;
    height: 3.8rem;
    display: block;
    min-width: 0;
    box-sizing: border-box;
    /* Not empty fields */
    /* To get rid of ugly chrome autofill shadow dom-applied background color */ }
    .dc-input__field::-moz-placeholder {
      line-height: 1.5;
      opacity: 0;
      -moz-transition: opacity 0.25s;
      transition: opacity 0.25s; }
    .dc-input__field:-ms-input-placeholder {
      line-height: 1.5;
      opacity: 0;
      -ms-transition: opacity 0.25s;
      transition: opacity 0.25s; }
    .dc-input__field::placeholder {
      line-height: 1.5;
      opacity: 0;
      transition: opacity 0.25s; }
    .dc-input__field--placeholder-visible::-moz-placeholder {
      opacity: 0.2; }
    .dc-input__field--placeholder-visible:-ms-input-placeholder {
      opacity: 0.2; }
    .dc-input__field--placeholder-visible::placeholder {
      opacity: 0.2; }
    .dc-input__field:focus, .dc-input__field:disabled, .dc-input__field:not(:focus):not([value='']) {
      outline: none; }
      .dc-input__field:focus ~ label, .dc-input__field:disabled ~ label, .dc-input__field:not(:focus):not([value='']) ~ label {
        transform: translate(0, -1.8rem) scale(0.75);
        padding: 0 4px; }
    .dc-input__field:disabled {
      -webkit-text-fill-color: var(--text-disabled);
      opacity: 1;
      color: var(--text-disabled);
      /* stylelint-disable */
      /* stylelint-enable */ }
      .dc-input__field:disabled ~ label {
        color: var(--text-disabled) !important; }
      .dc-input__field:disabled ~ svg .color1-fill {
        fill: var(--text-disabled); }
      @media not all and (min-resolution: 0.001dpcm) {
        @supports (-webkit-appearance: none) {
          .dc-input__field:disabled {
            color: var(--text-prominent); } } }
    .dc-input__field:focus {
      outline: none; }
      .dc-input__field:focus ~ label {
        color: var(--brand-secondary); }
      .dc-input__field:focus::-moz-placeholder {
        opacity: 0.4; }
      .dc-input__field:focus:-ms-input-placeholder {
        opacity: 0.4; }
      .dc-input__field:focus::placeholder {
        opacity: 0.4; }
    .dc-input__field:not(.dc-input--no-placeholder):not(:focus):not([value='']) ~ label {
      color: var(--text-general); }
    .dc-input__field[type='number']::-webkit-inner-spin-button, .dc-input__field[type='number']::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0; }
    .dc-input__field[type='number'] {
      -moz-appearance: textfield; }
    .dc-input__field[type='textarea'] {
      height: 9.6rem;
      border: none;
      resize: none; }
      .dc-input__field[type='textarea'] ~ .dc-field--error {
        top: 10rem; }
    .dc-input__field:-webkit-autofill {
      border-radius: 4px;
      -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
      -webkit-text-fill-color: var(--text-prominent) !important; }
      .dc-input__field:-webkit-autofill:hover, .dc-input__field:-webkit-autofill:focus, .dc-input__field:-webkit-autofill:active {
        -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important; }
    .dc-input__field::-ms-reveal {
      display: none; }
  .dc-input__textarea:not(.dc-input--no-placeholder):not(:focus):empty ~ label {
    transform: none;
    color: var(--text-less-prominent);
    padding: 0 4px; }
  .dc-input__leading-icon {
    margin-left: 1rem;
    top: 1rem;
    position: absolute;
    left: 0;
    pointer-events: none;
    cursor: text;
    font-size: var(--text-size-xs); }
    .dc-input__leading-icon.symbols {
      top: 0.9rem; }
      .dc-input__leading-icon.symbols + .dc-input__field {
        padding-left: calc(1.6rem + 2.4rem); }
      .dc-input__leading-icon.symbols--usdc + .dc-input__field,
      .dc-input__leading-icon.symbols--ust + .dc-input__field {
        padding-left: calc(1.6rem + 3.2rem); }
  .dc-input__trailing-icon {
    margin-right: 1rem;
    position: absolute;
    right: 0;
    font-size: var(--text-size-xs); }
    .dc-input__trailing-icon.symbols {
      top: 0.9rem; }
      .dc-input__trailing-icon.symbols + .dc-input__field {
        padding-right: calc(1.6rem + 2.4rem); }
      .dc-input__trailing-icon.symbols--usdc + .dc-input__field,
      .dc-input__trailing-icon.symbols--ust + .dc-input__field {
        padding-right: calc(1.6rem + 3.2rem); }
  .dc-input__label {
    color: var(--text-less-prominent);
    font-size: var(--text-size-xs);
    background-color: var(--fill-normal);
    position: absolute;
    pointer-events: none;
    left: 1rem;
    top: 1rem;
    transition: 0.25s ease all;
    transform-origin: top left; }
  .dc-input:not(.dc-input--no-placeholder)__label {
    color: var(--text-general);
    transition: 0.25s ease all;
    transform: translateZ(0); }
  .dc-input__hint {
    margin-left: 1.2rem;
    position: absolute;
    top: 4rem; }
    .dc-input__hint--relative {
      margin-left: 1.2rem;
      position: relative;
      top: unset; }
  .dc-input__counter {
    color: var(--text-less-prominent);
    font-size: 1.2rem;
    margin-left: 1.2rem; }
  .dc-input--no-placeholder label {
    transform: translate(0, -1.8rem) scale(0.75);
    color: var(--text-prominent);
    padding: 0 4px;
    background-color: var(--fill-normal); }
  .dc-input--error {
    border-color: var(--brand-red-coral) !important; }
    .dc-input--error label {
      color: var(--brand-red-coral) !important; }
  .dc-input__footer {
    display: flex;
    flex-direction: row; }
    .dc-input__footer > :not(.dc-input__counter) {
      margin-right: 1.2rem; }
    .dc-input__footer > .dc-input__counter {
      margin-left: auto; }
  .dc-input__wrapper {
    margin-bottom: 1.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-dropdown-list {
  position: absolute;
  margin-top: 4px;
  border-radius: 4px;
  z-index: 1;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
  transform-origin: top;
  transition: transform 0.25s ease, opacity 0.25s linear;
  transform: scale(1, 0);
  cursor: pointer;
  background-color: var(--state-normal); }
  .dc-dropdown-list--enter, .dc-dropdown-list--exit {
    transform: scale(1, 0);
    opacity: 0; }
  .dc-dropdown-list--enter-done {
    transform: scale(1, 1);
    opacity: 1; }
  .dc-dropdown-list__group-header {
    padding: 0.6rem;
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--brand-red-coral);
    height: 3.6rem;
    display: flex;
    align-items: center;
    justify-content: center; }
  .dc-dropdown-list__item {
    min-height: 40px;
    display: flex;
    align-items: center;
    padding: 1rem 1.6rem;
    font-size: 1.4rem;
    color: var(--text-general); }
    .dc-dropdown-list__item:hover {
      background-color: var(--state-hover); }
    .dc-dropdown-list__item--active {
      background-color: var(--state-active); }
    .dc-dropdown-list__item-icon {
      margin-right: 8px; }
    .dc-dropdown-list__item--disabled {
      color: var(--text-disabled);
      cursor: not-allowed; }
  .dc-dropdown-list__separator {
    display: flex;
    width: calc(100% - 3.2rem);
    border-bottom: 1px solid var(--border-normal);
    margin: 1.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-autocomplete {
  width: 100%;
  position: relative; }
  .dc-autocomplete__trailing-icon {
    position: absolute;
    right: 0;
    pointer-events: none;
    cursor: text;
    transition: transform 0.2s ease;
    transform: rotate(0deg);
    transform-origin: 50% 45%; }
    .dc-autocomplete__trailing-icon--opened {
      transform: rotate(-180deg); }
    .dc-autocomplete__trailing-icon--disabled {
      --fill-color1: var(--text-disabled) !important; }
    .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--text-less-prominent); }
  .dc-autocomplete .dc-input {
    margin-bottom: 0; }
    .dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--text-loss-danger); }
  .dc-autocomplete .dc-input__field {
    white-space: nowrap;
    text-overflow: ellipsis;
    padding-right: 2.4rem; }
  .dc-autocomplete .dc-dropdown-list {
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    background: var(--general-main-2); }
  .dc-autocomplete:focus, .dc-autocomplete[focus-within], .dc-autocomplete:active {
    outline: 0; }
  .dc-autocomplete:focus, .dc-autocomplete:focus-within, .dc-autocomplete:active {
    outline: 0; }
    .dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--brand-secondary); }
    .dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--brand-secondary); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define barspinner */
.barspinner {
  margin: auto;
  width: 6rem;
  height: 2rem;
  white-space: nowrap; }
  .barspinner__rect {
    margin: 0.4rem;
    border-radius: 20px;
    height: 60%;
    width: 0.6rem;
    display: inline-block;
    -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
            animation: sk-stretchdelay 1.2s infinite ease-in-out; }
    .barspinner__rect--1 {
      -webkit-animation-delay: -1.2s;
              animation-delay: -1.2s; }
    .barspinner__rect--2 {
      -webkit-animation-delay: -1.1s;
              animation-delay: -1.1s; }
    .barspinner__rect--3 {
      -webkit-animation-delay: -1s;
              animation-delay: -1s; }
    .barspinner__rect--4 {
      -webkit-animation-delay: -0.9s;
              animation-delay: -0.9s; }
    .barspinner__rect--5 {
      -webkit-animation-delay: -0.8s;
              animation-delay: -0.8s; }
  .barspinner--dark .barspinner__rect {
    background-color: var(--brand-secondary); }

@-webkit-keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

@keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(1); }
  20% {
    transform: scaleY(2); } }

/** @define initial-loader */
.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent; }
  .initial-loader--fullscreen {
    width: 100vw;
    height: 100vh; }
    @media (min-width: 1024px) {
      .initial-loader--fullscreen {
        height: calc(100vh - 48px - 36px); } }
    @media (min-width: 320px) and (max-width: 767px) {
      .initial-loader--fullscreen {
        height: calc(100vh - 40px); } }
  .initial-loader__barspinner {
    margin: 5rem auto; }
    .initial-loader__barspinner--rect {
      background-color: var(--brand-secondary); }
  .initial-loader__text {
    line-height: 44px;
    color: var(--text-prominent);
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
  /*
     * Text will be transformed to sentence case in JS
     * text-transform is declared in .dc-btn instead of .dc-btn__text
     * to ensure consistency (even for children) as per styleguide
     */
  text-transform: none !important;
  /* TODO: confirm this button with designer are we still using this? */
  /* TODO: confirm this button with designer are we still using this? */
  /* postcss-bem-linter: ignore */ }
  .dc-btn__toggle {
    height: auto;
    padding: 0.8rem 2.5rem; }
  .dc-btn__text, .dc-btn__icon {
    display: flex;
    pointer-events: none; }
  .dc-btn__icon {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: unset;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
    padding-right: 0.8rem;
    pointer-events: none; }
    .dc-btn__icon--circle {
      padding-right: 0; }
  .dc-btn:not([disabled]):hover {
    text-decoration: none; }
  .dc-btn__rounded {
    border-radius: 24px; }
  .dc-btn--plus {
    width: 2.4rem;
    height: 2.4rem !important;
    border: 1px solid var(--border-hover) !important;
    padding: 0 !important;
    background: inherit;
    background-repeat: no-repeat;
    background-position: center; }
  .dc-btn--circle {
    height: 3.2rem;
    width: 3.2rem !important;
    border-radius: 50%; }
  .dc-btn--primary {
    background: var(--button-primary-default);
    color: var(--text-colored-background); }
    .dc-btn--primary:hover:not([disabled]) {
      background: var(--button-primary-hover); }
    .dc-btn--primary:active:not([disabled]) {
      background: var(--button-primary-default); }
    .dc-btn--primary:disabled, .dc-btn--primary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
    .dc-btn--primary .dc-btn__text,
    .dc-btn--primary .dc-btn__icon {
      color: var(--text-colored-background); }
  .dc-btn--dashboard-primary {
    background: var(--dashboard-primary); }
    .dc-btn--dashboard-primary:hover:not([disabled]) {
      background: var(--dashboard-hover); }
    .dc-btn--dashboard-primary:active:not([disabled]) {
      background: var(--dashboard-primary); }
  .dc-btn--secondary {
    background: transparent;
    border: 1px solid var(--button-secondary-default); }
    .dc-btn--secondary:hover:not([disabled]) {
      background: var(--button-secondary-hover); }
    .dc-btn--secondary:active:not([disabled]) {
      border: 1px solid var(--button-secondary-default); }
    .dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
    .dc-btn--secondary .dc-btn__text,
    .dc-btn--secondary .dc-btn__icon {
      color: var(--text-prominent); }
  .dc-btn--tertiary {
    background: var(--button-tertiary-default); }
    .dc-btn--tertiary:hover:not([disabled]) {
      background: var(--button-tertiary-hover); }
    .dc-btn--tertiary:active:not([disabled]) {
      background: var(--button-tertiary-default); }
    .dc-btn--tertiary .dc-btn__text,
    .dc-btn--tertiary .dc-btn__icon {
      color: var(--brand-red-coral); }
    .dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
  .dc-btn--dashboard-tertiary:hover:not([disabled]) {
    background: var(--dashboard-alpha); }
  .dc-btn--dashboard-tertiary .dc-btn__text,
  .dc-btn--dashboard-tertiary .dc-btn__icon {
    color: var(--dashboard-primary); }
  .dc-btn--alternate {
    background: var(--button-tertiary-default);
    border: 2px solid var(--button-primary-default); }
    .dc-btn--alternate:hover:not([disabled]) {
      background: var(--button-primary-default); }
      .dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
        color: var(--text-colored-background); }
    .dc-btn--alternate .dc-btn__text,
    .dc-btn--alternate .dc-btn__icon {
      color: var(--brand-red-coral); }
  .dc-btn--green {
    background: var(--status-success); }
    .dc-btn--green:hover:not([disabled]) {
      background: var(--transparent-success); }
    .dc-btn--green:active:not([disabled]) {
      background: var(--status-success); }
    .dc-btn--green .dc-btn__text,
    .dc-btn--green .dc-btn__icon {
      color: var(--text-colored-background); }
  .dc-btn__small {
    height: 2.4rem;
    min-width: 4.8rem;
    border-width: 1px; }
    .dc-btn__small .dc-btn__text {
      font-size: 1.2rem; }
  .dc-btn__medium {
    height: 3.2rem;
    min-width: 5.6rem;
    border-width: 1px; }
    .dc-btn__medium .dc-btn__text {
      font-size: 1.4rem; }
  .dc-btn__large {
    height: 4rem;
    min-width: 6.4rem;
    border-width: 2px; }
    .dc-btn__large .dc-btn__text {
      font-size: 1.4rem; }
  .dc-btn__effect:focus:not(:active):after {
    content: '';
    position: absolute;
    top: -0.1em;
    left: -0.1em;
    bottom: -0.1em;
    right: -0.1em;
    border-radius: inherit;
    border: 0 solid var(--brand-secondary);
    opacity: 0.4;
    -webkit-animation: buttonEffect 0.4s;
            animation: buttonEffect 0.4s;
    -webkit-animation-fill-mode: forwards;
            animation-fill-mode: forwards;
    display: block; }
  .dc-btn__group {
    white-space: nowrap; }
    .dc-btn__group .dc-btn + .dc-btn {
      margin-left: 8px; }
  .dc-btn .initial-loader--btn {
    background-color: unset;
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
      background-color: var(--text-colored-background); }
    .dc-btn .initial-loader--btn .barspinner {
      margin: 0.6rem 4px 0 -4px;
      /* postcss-bem-linter: ignore */ }
      .dc-btn .initial-loader--btn .barspinner__rect {
        height: 35%; }

@-webkit-keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-button-menu */
.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative; }
  .dc-button-menu__button:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px; }
  .dc-button-menu__button:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px; }
  .dc-button-menu__button {
    margin: 0;
    border: none;
    border-radius: 0px;
    width: 50%;
    background-color: var(--state-normal);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-button-menu__button .dc-btn__text {
      display: contents; }
    .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
      background-color: var(--state-hover) !important; }
    .dc-button-menu__button span {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: unset;
      text-align: left;
      line-height: 1.5;
      color: var(--text-general); }
    .dc-button-menu__button--active {
      cursor: auto;
      cursor: initial;
      background-color: var(--state-active) !important; }
      .dc-button-menu__button--active span {
        font-size: 1.4rem;
        color: var(--text-colored-background);
        font-weight: 700;
        text-transform: unset;
        text-align: left;
        line-height: 1.5;
        color: var(--text-prominent); }
  .dc-button-menu__counter {
    margin-left: 0.4rem; }
  .dc-button-menu__wrapper {
    position: relative;
    border-radius: 4px;
    width: 100%;
    background-color: var(--state-normal);
    display: flex; }
    .dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
      background-color: rgba(0, 0, 0, 0) !important;
      z-index: 1;
      padding: 0.8rem 0.6rem;
      white-space: normal; }
      .dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text, .dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
        line-height: normal; }
    .dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px; }
  .dc-button-menu--highlight {
    display: block;
    position: absolute;
    content: '';
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    transition: transform 0.25s ease;
    pointer-events: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent); }
  .dc-icon--disabled, .dc-popover__target__icon--disabled .info, .dc-popover__target__icon--disabled .info:hover {
    --fill-color1: var(--text-disabled);
    --fill-color2: var(--text-disabled); }
  .dc-icon--active {
    --fill-color1: #ffffff;
    --fill-color2: #ffffff; }
  .dc-icon--green {
    --fill-color1: var(--text-profit-success);
    --fill-color2: var(--text-profit-success);
    --fill-color3: #ffffff; }
  .dc-icon--red {
    --fill-color1: var(--text-loss-danger);
    --fill-color2: var(--text-loss-danger);
    --fill-color3: #ffffff; }
  .dc-icon--secondary, .dc-popover__target__icon .info {
    --fill-color1: var(--text-less-prominent);
    --fill-color2: var(--text-less-prominent);
    --fill-color3: #ffffff; }
  .dc-icon--brand {
    --fill-color1: var(--brand-red-coral);
    --fill-color2: var(--brand-secondary);
    --fill-color3: #ffffff; }
  .dc-icon--black {
    --fill-color1: #000000; }

.dc-popover__wrapper {
  position: relative; }

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px; }
  .dc-popover__container-relative {
    position: relative; }

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%); }

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.8rem;
  max-width: 315px;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1; }
  .dc-popover__bubble__icon {
    flex-grow: 1;
    margin-right: 0.7em;
    padding-top: 3px; }
  .dc-popover__bubble__text {
    flex-grow: 2; }
  .dc-popover__bubble--error {
    background-color: var(--status-danger); }

.react-tiny-popover-container--disabled-pointer-event {
  pointer-events: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-calendar */
.dc-calendar {
  outline: 0;
  border-radius: 5px;
  z-index: 999;
  box-sizing: border-box;
  font-size: 1rem;
  background: var(--general-main-2);
  box-shadow: 0 2px 8px 0 var(--shadow-menu); }
  .dc-calendar__header, .dc-calendar__footer {
    position: relative;
    display: flex;
    align-items: center;
    height: 5rem;
    border-radius: 5px;
    padding: 1.6rem;
    box-sizing: border-box; }
  .dc-calendar__header {
    justify-content: center; }
  .dc-calendar__footer :last-child:not(:only-child),
  .dc-calendar__footer .dc-calendar__btn--today {
    margin-left: auto; }
  .dc-calendar__body {
    border-top: 0.1rem solid var(--general-section-2);
    border-bottom: 0.1rem solid var(--general-section-2); }
    .dc-calendar__body--date, .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
      display: grid;
      grid-gap: 1.2rem;
      padding: 0.8rem 2rem; }
      .dc-calendar__body--date .dc-calendar__cell, .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 5px; }
    .dc-calendar__body--date {
      grid-template-columns: repeat(7, 2.4rem);
      grid-auto-rows: 2.4rem; }
      .dc-calendar__body--date .dc-calendar__cell {
        width: 100%;
        height: 100%; }
    .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
      grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
      grid-auto-rows: minmax(4.2rem, auto); }
      .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
        width: 5.6rem;
        height: 3.2rem; }
        .dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
          color: var(--text-general); }
    .dc-calendar__body--decade .dc-calendar__cell {
      width: 100%; }
  .dc-calendar__icon {
    cursor: pointer;
    right: 5%; }
    .dc-calendar__icon--today:hover {
      cursor: pointer; }
  .dc-calendar__btn {
    text-align: center;
    padding: 0 0.2rem;
    font-weight: bold;
    cursor: pointer;
    border: none;
    outline: none;
    background: none; }
    .dc-calendar__btn--disabled {
      cursor: default;
      transition: none; }
      .dc-calendar__btn--disabled .dc-calendar__icon {
        cursor: default; }
    .dc-calendar__btn--is-hidden {
      display: none; }
    .dc-calendar__btn--select {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      color: var(--text-prominent); }
    .dc-calendar__btn--prev-year, .dc-calendar__btn--next-year, .dc-calendar__btn--prev-month, .dc-calendar__btn--next-month {
      position: absolute;
      padding: 0 0.5em;
      height: 1.4em; }
    .dc-calendar__btn--prev-year {
      left: 7%; }
    .dc-calendar__btn--next-year {
      right: 7%; }
    .dc-calendar__btn--prev-month {
      left: 14%; }
    .dc-calendar__btn--next-month {
      right: 14%; }
  .dc-calendar__cell {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    align-self: center;
    justify-self: center;
    position: relative;
    cursor: pointer;
    color: var(--text-general);
    box-sizing: border-box; }
    .dc-calendar__cell:hover:not(.dc-calendar__cell--disabled) {
      color: var(--text-general);
      background: var(--state-hover); }
    .dc-calendar__cell:nth-child(7n):before {
      padding: 0;
      border-radius: 4px; }
    .dc-calendar__cell:nth-child(7n + 1):before {
      left: 0;
      border-radius: 4px; }
    .dc-calendar__cell:nth-child(7n + 1):after {
      content: none; }
    .dc-calendar__cell--bold {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      color: var(--text-prominent); }
    .dc-calendar__cell--disabled:hover {
      cursor: default; }
    .dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between-hover):not(.dc-calendar__cell--between), .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between-hover):not(.dc-calendar__cell--between) {
      color: var(--text-disabled);
      transition: none; }
    .dc-calendar__cell--is-hidden {
      display: none; }
    .dc-calendar__cell--today {
      font-weight: bold;
      color: var(--text-prominent);
      border: 1px solid var(--state-active); }
      .dc-calendar__cell--today-duration {
        background: var(--state-active); }
    .dc-calendar__cell--active {
      font-weight: bold;
      color: var(--text-prominent);
      background: var(--state-active); }
      .dc-calendar__cell--active:hover {
        background: var(--state-active); }
      .dc-calendar__cell--active-duration {
        background: var(--state-active); }
        .dc-calendar__cell--active-duration:after {
          position: absolute;
          content: '';
          width: 100%;
          top: 0;
          right: 50%;
          z-index: -1;
          height: 100%;
          padding-left: 1rem;
          background: var(--state-active); }
    .dc-calendar__cell--between {
      font-weight: bold;
      color: var(--text-prominent);
      background: var(--state-active); }
      .dc-calendar__cell--between-hover:before {
        position: absolute;
        content: '';
        width: 100%;
        z-index: -2;
        height: 100%;
        padding-left: 3.2rem;
        background: var(--state-hover); }
      .dc-calendar__cell--between:hover {
        background: var(--state-active); }
      .dc-calendar__cell--between:before {
        position: absolute;
        content: '';
        width: 100%;
        z-index: -1;
        height: 100%;
        padding-left: 3.2rem;
        background: var(--state-active); }
    .dc-calendar__cell-tooltip {
      position: absolute;
      display: inline-grid;
      cursor: default;
      height: 0;
      top: 0;
      left: 0;
      justify-content: center;
      width: 100%; }
      .dc-calendar__cell-tooltip-icon {
        margin-top: 0.1rem;
        display: inherit; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-card {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px; }
  .dc-card__wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: auto;
    margin: 1.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-carousel {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  .dc-carousel__container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center; }
  .dc-carousel__box {
    overflow: hidden; }
  .dc-carousel__wrapper {
    display: flex;
    flex-direction: row;
    transition: transform 0.3s linear;
    padding: 0.5rem 0;
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: fit-content;
    height: 100%; }
  .dc-carousel__card {
    display: flex;
    flex-direction: column;
    padding-bottom: 0.8rem; }
  .dc-carousel__nav {
    align-items: center;
    box-sizing: border-box;
    display: flex;
    width: 100%;
    padding: 0 2.4rem;
    overflow: hidden;
    margin-bottom: 2.4rem;
    justify-content: space-between; }
    .dc-carousel__nav--upper {
      margin-bottom: 0; }
    .dc-carousel__nav-list {
      display: inline-block;
      text-align: center;
      margin: 0 auto;
      position: relative; }
    .dc-carousel__nav-item {
      width: 0.8rem;
      height: 0.8rem;
      border-radius: 50%;
      display: inline-block;
      margin: 0 0.8rem;
      cursor: pointer; }
      .dc-carousel__nav-item--active {
        position: absolute;
        top: 0;
        left: 0;
        cursor: auto;
        cursor: initial;
        transition: transform 0.3s linear; }
  .dc-carousel__icon {
    cursor: pointer; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-clipboard {
  cursor: pointer; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-checkbox {
  display: flex;
  justify-content: flex-start;
  cursor: pointer;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent; }
  .dc-checkbox__input {
    display: none; }
  .dc-checkbox__box {
    display: flex;
    width: 16px;
    height: 16px;
    transition: 0.3s ease-in-out;
    flex-shrink: 0;
    margin: 0 8px;
    border-radius: 2px;
    align-self: center;
    box-sizing: border-box;
    border: 2px solid var(--text-less-prominent);
    outline: none !important; }
    .dc-checkbox__box--active {
      border: none;
      background-color: var(--brand-red-coral); }
  .dc-checkbox--active {
    border: none;
    background-color: var(--brand-red-coral); }
  .dc-checkbox--disabled {
    opacity: 0.5;
    cursor: not-allowed !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-checklist {
  max-width: 400px; }
  .dc-checklist__item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: solid 1px var(--border-normal);
    padding: 12px; }
    .dc-checklist__item-text {
      max-width: 80%;
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.5; }
    .dc-checklist__item-status {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 32px;
      height: 32px; }
      .dc-checklist__item-status--action {
        cursor: pointer;
        background-color: var(--brand-red-coral);
        border-radius: 4px;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%; }
      .dc-checklist__item-status--disabled {
        pointer-events: none; }
      .dc-checklist__item-status--button {
        width: auto; }
    .dc-checklist__item--disabled {
      opacity: 0.5; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-circular-progress {
  position: relative;
  line-height: 0;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content; }
  .dc-circular-progress__bar {
    transform: scaleX(-1) rotate(-90deg);
    transform-origin: 50% 50%;
    transition: stroke-dashoffset 1s;
    stroke: var(--brand-secondary); }
    .dc-circular-progress__bar--warning {
      stroke: var(--status-warning); }
    .dc-circular-progress__bar--danger {
      stroke: var(--status-danger); }
  .dc-circular-progress--clockwise {
    transform: rotate(-90deg); }
  .dc-circular-progress__icon {
    position: absolute;
    width: 1.6rem;
    height: 100%;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Slideout Animation */
@-webkit-keyframes SlideIn {
  from {
    opacity: 0;
    max-height: 0; }
  to {
    opacity: 1;
    height: auto;
    max-height: 100vh; } }
@keyframes SlideIn {
  from {
    opacity: 0;
    max-height: 0; }
  to {
    opacity: 1;
    height: auto;
    max-height: 100vh; } }

@-webkit-keyframes SlideOut {
  from {
    opacity: 1;
    max-height: 100vh; }
  to {
    opacity: 0;
    max-height: 0; } }

@keyframes SlideOut {
  from {
    opacity: 1;
    max-height: 100vh; }
  to {
    opacity: 0;
    max-height: 0; } }

.dc-collapsible {
  padding: 0.8rem;
  border-radius: 0.4rem;
  background-color: var(--general-section-1); }
  .dc-collapsible--has-collapsible-btn {
    padding-top: 0; }
  .dc-collapsible--has-title {
    padding-bottom: 0; }
  .dc-collapsible__button {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 32px; }
  .dc-collapsible__icon {
    transition: transform 0.3s ease-in-out; }
    .dc-collapsible__icon--top {
      transform: rotate(180deg); }
      .dc-collapsible__icon--top.dc-collapsible__icon--is-open {
        transform: rotate(0deg); }
    .dc-collapsible__icon--bottom.dc-collapsible__icon--is-open {
      transform: rotate(180deg); }
  .dc-collapsible__item--collapsed {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    margin: 0 !important;
    margin: initial !important;
    padding: 0 !important;
    padding: initial !important; }
  .dc-collapsible__title {
    margin-left: 0;
    margin-right: auto; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-content-expander__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .dc-content-expander__select-arrow .color1-fill {
    fill: var(--text-general); }
  .dc-content-expander__select-arrow .color1-stroke {
    stroke: var(--text-general); }
  .dc-content-expander__select-arrow .color2-fill {
    fill: none; }
  .dc-content-expander__select-arrow .color2-stroke {
    stroke: none; }
  .active.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.dc-content-expander__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .active.dc-content-expander__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
    .active.dc-content-expander__select-arrow .color2-fill {
      fill: none; }
    .active.dc-content-expander__select-arrow .color2-stroke {
      stroke: none; }
  .disabled.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.dc-content-expander__select-arrow .color1-fill {
      fill: var(--text-disabled); }
    .disabled.dc-content-expander__select-arrow .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.dc-content-expander__select-arrow .color2-fill {
      fill: none; }
    .disabled.dc-content-expander__select-arrow .color2-stroke {
      stroke: none; }
  .white.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.dc-content-expander__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .white.dc-content-expander__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.dc-content-expander__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.dc-content-expander__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.dc-content-expander__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.dc-content-expander__select-arrow .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.dc-content-expander__select-arrow .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
.dc-content-expander {
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 0 0.8rem;
  height: 4rem;
  position: relative; }
  .dc-content-expander__content {
    transition: opacity 0.25s linear; }
    .dc-content-expander__content--enter {
      opacity: 0; }
    .dc-content-expander__content--enter-done {
      opacity: 1; }
    .dc-content-expander__content--exit {
      opacity: 0; }
  .dc-content-expander__title {
    display: block;
    padding-right: 0.8rem; }
    .dc-content-expander__title--spaced {
      flex: 1; }
  .dc-content-expander--expanded .dc-content-expander__select-arrow {
    transform: rotate(180deg); }
    .dc-content-expander--expanded .dc-content-expander__select-arrow--invert {
      transform: rotate(0deg); }
  .dc-content-expander__select-arrow {
    pointer-events: none;
    transform: rotate(0);
    transform-origin: 50% 45%;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1); }
    .dc-content-expander__select-arrow--invert {
      transform: rotate(180deg); }
  .dc-content-expander__wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-counter {
  align-items: center;
  background: var(--status-danger);
  border-radius: 0.8rem;
  color: var(--text-colored-background);
  display: inline-flex;
  font-size: 1rem;
  font-weight: bold;
  justify-content: center;
  line-height: 1;
  padding: 3px 5px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.composite-checkbox {
  border-radius: 0.4rem;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  height: 100%;
  cursor: pointer; }
  .composite-checkbox__description {
    margin: 1.2rem 0 0; }
  .composite-checkbox:hover:not(.composite-checkbox--active) {
    border: 1px solid var(--border-hover); }
  .composite-checkbox--active {
    border: 1px solid var(--border-active); }
  .composite-checkbox .dc-checkbox__box {
    margin-left: 0; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-slider */
.dc-progress-slider {
  position: relative;
  width: 100%;
  padding: unset;
  box-sizing: border-box;
  margin: 8px 0;
  border-bottom: 1px solid var(--general-section-1); }
  .dc-progress-slider--completed {
    border-bottom: 1px solid var(--general-section-1);
    margin: 0.4rem 0 0.8rem; }
  .dc-progress-slider__track {
    background: var(--text-disabled);
    position: relative;
    margin: 2px 0 8px;
    height: 6px;
    width: 100%;
    border-radius: 8px; }
  .dc-progress-slider__ticks {
    position: relative; }
    .dc-progress-slider__ticks-wrapper {
      position: relative;
      margin: 2px 0 8px;
      height: 6px;
      width: 100%;
      display: flex;
      flex-direction: row;
      justify-content: space-evenly; }
    .dc-progress-slider__ticks-step {
      height: 6px;
      width: 100%;
      margin: 0 2px;
      position: relative;
      background: var(--state-hover); }
      .dc-progress-slider__ticks-step:before {
        position: absolute;
        content: '';
        transition: transform 0.25s ease-in;
        transform: scale3d(0, 1, 1);
        transform-origin: left;
        left: 0;
        top: 0;
        height: 6px;
        width: 100%;
        background-color: var(--brand-secondary); }
      .dc-progress-slider__ticks-step--marked:before {
        transform: scale3d(1, 1, 1); }
      .dc-progress-slider__ticks-step:first-child {
        margin-left: 0; }
      .dc-progress-slider__ticks-step:last-child {
        margin-right: 0; }
      .dc-progress-slider__ticks-step:first-child, .dc-progress-slider__ticks-step:first-child:before {
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px; }
      .dc-progress-slider__ticks-step:last-child, .dc-progress-slider__ticks-step:last-child:before {
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px; }
    .dc-progress-slider__ticks-caption {
      display: flex;
      justify-content: space-between; }
  .dc-progress-slider__line {
    background: var(--state-hover);
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    border-radius: 8px;
    pointer-events: none;
    transition: width 0.3s; }
    .dc-progress-slider__line--ticks {
      height: 2px; }
    .dc-progress-slider__line--green {
      background: var(--status-success) !important; }
    .dc-progress-slider__line--yellow {
      background: var(--status-warning) !important; }
    .dc-progress-slider__line--red {
      background: var(--status-danger) !important; }
  .dc-progress-slider__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden; }
    .dc-progress-slider__infinite-loader--indeterminate {
      background-color: var(--state-active); }
      .dc-progress-slider__infinite-loader--indeterminate:before, .dc-progress-slider__infinite-loader--indeterminate:after {
        content: '';
        position: absolute;
        background-color: inherit;
        top: 0;
        left: 0;
        bottom: 0;
        will-change: left, right; }
      .dc-progress-slider__infinite-loader--indeterminate:before {
        -webkit-animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
                animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }
      .dc-progress-slider__infinite-loader--indeterminate:after {
        -webkit-animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
                animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
        -webkit-animation-delay: 1.15s;
                animation-delay: 1.15s; }

@-webkit-keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@-webkit-keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-contract-card-dialog; weak */
.dc-contract-card-dialog {
  position: fixed;
  display: grid;
  background: var(--general-main-2);
  border-radius: 4px;
  box-shadow: 0 4px 8px 2px var(--shadow-menu);
  transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
  padding: 0.8rem;
  width: 240px;
  z-index: 99; }
  .dc-contract-card-dialog--enter-done {
    opacity: 1;
    transform: translate3d(0, 0, 0); }
  .dc-contract-card-dialog--enter, .dc-contract-card-dialog--exit {
    opacity: 0;
    transform: translate3d(-20px, 0, 0); }
  .dc-contract-card-dialog__input .dc-input-wrapper__input {
    border: 1px solid var(--border-normal); }
  .dc-contract-card-dialog__button {
    margin-top: 0.8rem; }
    .dc-contract-card-dialog__button .dc-btn {
      width: 100%; }
  .dc-contract-card-dialog__form {
    display: grid;
    flex: 1; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-contract-card-dialog__form {
        grid-template-rows: auto auto 1fr;
        grid-gap: 1.6rem;
        margin: 1.6rem; } }
    @media (min-width: 1024px) {
      .dc-contract-card-dialog__form {
        grid-gap: 0.8rem; } }
    .dc-contract-card-dialog__form .dc-checkbox__box {
      margin-left: 0; }
  .dc-contract-card-dialog__total-profit {
    height: 5.2rem;
    padding: 1.6rem;
    background: var(--general-section-2);
    color: var(--text-general);
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 1.4rem; }

/** @define dc-contract-card-dialog-toggle; */
.dc-contract-card-dialog-toggle {
  position: absolute;
  width: calc(100% + 0.4rem);
  height: calc(100% + 0.4rem);
  right: 0.4rem;
  top: -0.4rem;
  border: 1px solid var(--general-section-1);
  border-radius: 4px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-contract-card-dialog-toggle {
      width: 100%; } }
  .dc-contract-card-dialog-toggle__icon {
    float: right;
    margin: 3px; }
  .dc-contract-card-dialog-toggle:hover {
    cursor: pointer;
    border-color: var(--button-secondary-default); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tooltip {
  text-decoration: none;
  font-size: inherit;
  color: var(--text-prominent); }
  .dc-tooltip:before {
    background: var(--status-default); }
  .dc-tooltip:after, .dc-tooltip[data-tooltip-pos='top']:after {
    border-top-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-default); }
  .dc-tooltip__balloon-icon {
    position: absolute;
    top: 0;
    left: -319px;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none; }
    .dc-tooltip__balloon-icon--show {
      transition: opacity 0.3s 0.2s;
      opacity: 1; }
  .dc-tooltip[data-tooltip] {
    cursor: auto;
    cursor: initial;
    display: block; }
    .dc-tooltip[data-tooltip]:before {
      background: var(--status-default); }
    .dc-tooltip[data-tooltip]:after, .dc-tooltip[data-tooltip][data-tooltip-pos='top']:after {
      border-top-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
      border-top-color: transparent;
      border-right-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
      border-top-color: transparent;
      border-left-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
      border-top-color: transparent;
      border-bottom-color: var(--status-default); }
    .dc-tooltip[data-tooltip]:hover:after, .dc-tooltip[data-tooltip]:hover:before {
      opacity: 0.96;
      pointer-events: auto;
      transform: translate(-50%, 0); }
    .dc-tooltip[data-tooltip]:before, .dc-tooltip[data-tooltip]:after {
      opacity: 0;
      pointer-events: none;
      transition: all 0.18s ease-out 0.18s;
      bottom: 100%;
      left: 50%;
      position: absolute;
      z-index: 1;
      transform: translate(-50%, 1em);
      transform-origin: top; }
    .dc-tooltip[data-tooltip]:before {
      font-size: 1.2rem;
      color: var(--text-colored-background);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.25;
      line-height: 1.5;
      text-decoration: none;
      letter-spacing: normal;
      border-radius: 4px;
      content: attr(data-tooltip);
      padding: 0.7em;
      margin-bottom: 10px;
      width: -webkit-max-content;
      width: -moz-max-content;
      width: max-content;
      width: 220px;
      max-width: 280px; }
    .dc-tooltip[data-tooltip]:after {
      border: solid transparent;
      content: '';
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
      border-width: 6px;
      margin-bottom: -2px; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
      bottom: auto;
      left: 100%;
      top: 50%;
      transform: translate(-1em, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:before {
      margin-left: 1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:before {
      transform: translate(0, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
      bottom: auto;
      left: auto;
      right: 100%;
      top: 50%;
      transform: translate(1em, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:before {
      margin-right: 1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:before {
      transform: translate(0, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
      bottom: auto;
      left: 50%;
      top: 100%;
      transform: translate(-50%, -1em); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before {
      margin-top: 1.1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:before {
      transform: translate(-50%, 0); }
  .dc-tooltip--with-label[data-tooltip]:before, .dc-tooltip--with-label[data-tooltip]:after {
    margin-top: 1em; }
  .dc-tooltip--error[data-tooltip]:before {
    background: var(--status-danger); }
  .dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%); }
  .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    width: 180px; }
  .dc-tooltip--error-secondary[data-tooltip]:before {
    background: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip]:before, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%);
    top: 55%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-input-wrapper__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .dc-input-wrapper__icon .color1-fill {
    fill: var(--text-general); }
  .dc-input-wrapper__icon .color1-stroke {
    stroke: var(--text-general); }
  .dc-input-wrapper__icon .color2-fill {
    fill: none; }
  .dc-input-wrapper__icon .color2-stroke {
    stroke: none; }
  .active.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.dc-input-wrapper__icon .color1-fill {
      fill: var(--text-prominent); }
    .active.dc-input-wrapper__icon .color1-stroke {
      stroke: var(--text-prominent); }
    .active.dc-input-wrapper__icon .color2-fill {
      fill: none; }
    .active.dc-input-wrapper__icon .color2-stroke {
      stroke: none; }
  .disabled.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.dc-input-wrapper__icon .color1-fill {
      fill: var(--text-disabled); }
    .disabled.dc-input-wrapper__icon .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.dc-input-wrapper__icon .color2-fill {
      fill: none; }
    .disabled.dc-input-wrapper__icon .color2-stroke {
      stroke: none; }
  .white.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.dc-input-wrapper__icon .color1-fill {
      fill: var(--text-prominent); }
    .white.dc-input-wrapper__icon .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.dc-input-wrapper__icon .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.dc-input-wrapper__icon .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.dc-input-wrapper__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.dc-input-wrapper__icon .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.dc-input-wrapper__icon .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
/** @define dc-input-field; weak */
.dc-input-field {
  margin: 0.8rem 0 0;
  position: relative; }
  .dc-input-field__label {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--text-general);
    margin-bottom: 0.2rem;
    display: inline-block;
    text-align: center;
    width: 100%; }
  .dc-input-field .inline-icon {
    position: absolute;
    top: 8px;
    left: 8px;
    z-index: 1;
    cursor: pointer; }
  .dc-input-field__helper {
    font-size: 1.2rem;
    color: var(--text-less-prominent);
    font-weight: 300;
    text-transform: none;
    text-align: left;
    line-height: 1.25; }

/** @define dc-input-wrapper */
.dc-input-wrapper {
  position: relative; }
  .dc-input-wrapper__input::-ms-clear {
    display: none; }
  .dc-input-wrapper__button {
    position: absolute;
    z-index: 1;
    top: 2px;
    height: 28px;
    border: none;
    padding: 0;
    margin: 0;
    margin: initial;
    min-width: 3.2rem;
    border-radius: 3px;
    background-color: transparent;
    background-color: initial;
    display: flex;
    justify-content: center;
    align-items: center; }
    .dc-input-wrapper__button--increment {
      right: 2px; }
    .dc-input-wrapper__button--decrement {
      left: 2px; }
    .dc-input-wrapper__button:hover {
      background: var(--state-hover);
      cursor: pointer; }
    .dc-input-wrapper__button:disabled:hover {
      cursor: not-allowed;
      background: transparent; }
  .dc-input-wrapper--disabled {
    pointer-events: none;
    color: var(--text-disabled); }
  .dc-input-wrapper--inline {
    display: flex;
    justify-content: space-between;
    align-items: center; }

/** @define input */
.input {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  list-style: none;
  position: relative;
  display: inline-block;
  width: 100%;
  height: 32px;
  padding-left: 0.8rem;
  border-radius: 4px;
  transition: transform 0.3s;
  background-color: var(--fill-normal);
  border: 1px solid var(--fill-normal);
  color: var(--text-prominent); }
  .input[type='checkbox'] {
    font-size: 1.2rem;
    cursor: pointer;
    display: inline-block;
    vertical-align: middle;
    width: 16px;
    height: 16px;
    border-radius: 0;
    padding: 0;
    background-color: var(--general-section-1);
    border: 1px solid var(--text-less-prominent); }
    .input[type='checkbox']:active {
      border-radius: 0;
      box-shadow: none;
      border-color: var(--brand-red-coral); }
    .input[type='checkbox']:hover, .dc-input-wrapper__button:hover ~ .dc-input-wrapper__input[type='checkbox'] {
      border-color: var(--border-hover); }
    .input[type='checkbox']:focus {
      border-radius: 0;
      box-shadow: none;
      border-color: var(--border-active); }
    .input[type='checkbox']:checked {
      background: var(--brand-red-coral);
      border-color: var(--brand-red-coral); }
      .input[type='checkbox']:checked:after {
        display: inline-block; }
      .input[type='checkbox']:checked:hover, .dc-input-wrapper__button:hover ~ .dc-input-wrapper__input[type='checkbox']:checked {
        border-color: var(--brand-red-coral); }
    .input[type='checkbox']::-ms-check {
      background: transparent;
      border-color: transparent;
      color: #ffffff; }
    .input[type='checkbox']:after {
      font-size: 1.2rem;
      color: var(--text-colored-background);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.25;
      content: 'L';
      transform: scaleX(-1) rotate(-40deg);
      position: absolute;
      top: -10%;
      left: 25%;
      display: none; }
  .input:not([type='range']) {
    touch-action: manipulation; }
  .input[readonly] {
    cursor: pointer; }
  .input::-moz-placeholder {
    border-color: var(--border-normal); }
  .input:-ms-input-placeholder {
    border-color: var(--border-normal); }
  .input::placeholder {
    border-color: var(--border-normal); }
  .input:hover, .dc-input-wrapper__button:hover ~ .dc-input-wrapper__input {
    border-color: var(--border-hover); }
  .input:active, .input:focus {
    outline: 0;
    border-radius: 4px;
    border-color: var(--border-active);
    color: var(--text-prominent); }
  .input--has-inline-prefix {
    padding-right: 40px !important;
    border-radius: 4px !important; }
  .input--error {
    color: #e31c4b;
    border: 1px solid #e31c4b !important; }
  .input:disabled {
    color: var(--text-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-input-wrapper */
.dc-input-wrapper {
  position: relative; }
  .dc-input-wrapper--inline {
    display: flex;
    justify-content: space-between;
    align-items: center; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-mobile-dialog; weak */
.dc-mobile-dialog {
  box-sizing: border-box;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 999;
  overflow: auto;
  transition: opacity 0.2s;
  opacity: 0;
  pointer-events: none;
  background: var(--general-section-2); }
  .dc-mobile-dialog--enter, .dc-mobile-dialog--exit {
    opacity: 0;
    pointer-events: none; }
    .dc-mobile-dialog--enter .dc-mobile-dialog__content, .dc-mobile-dialog--exit .dc-mobile-dialog__content {
      transform: scale(0); }
    .dc-mobile-dialog--enter .dc-mobile-dialog__header, .dc-mobile-dialog--exit .dc-mobile-dialog__header {
      transform: translateY(-100%); }
  .dc-mobile-dialog--enter-done {
    opacity: 1;
    pointer-events: auto; }
    .dc-mobile-dialog--enter-done .dc-mobile-dialog__content {
      transform: scale(1); }
    .dc-mobile-dialog--enter-done .dc-mobile-dialog__header {
      transform: translateY(0); }
  .dc-mobile-dialog__container--has-scroll {
    overflow-x: hidden;
    overflow-y: auto; }
  .dc-mobile-dialog__content {
    margin-top: 0.4rem;
    box-sizing: border-box;
    position: relative;
    padding-top: 3.6rem;
    z-index: 1;
    background: var(--general-section-2);
    transition: all 0.2s ease-out; }
    .dc-mobile-dialog__content--is-full-height {
      height: calc(100% - 0.4rem); }
    .dc-mobile-dialog__content > div {
      height: 100%; }
  .dc-mobile-dialog__header {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    position: fixed;
    top: 0;
    padding: 1rem;
    height: 40px;
    z-index: 4;
    background: var(--general-section-2);
    transition: all 0.2s ease-out;
    transition-delay: 0.2s;
    border-bottom: 1px solid var(--border-disabled); }
  .dc-mobile-dialog__footer {
    position: fixed;
    width: 100%;
    bottom: 0px;
    z-index: 4; }
  .dc-mobile-dialog__title {
    padding: 1.2rem 1.2rem 1.2rem 0.4rem;
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--text-prominent);
    margin: 0; }
  .dc-mobile-dialog__close-btn-icon {
    margin: 1.2rem 0.4rem;
    width: 1.6rem;
    height: 1.6rem;
    /* postcss-bem-linter: ignore */
    --fill-color1: var(--text-prominent) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define .dc-currency-badge */
.dc-currency-badge {
  align-self: flex-start;
  padding: 0.3rem;
  background-color: #85acb0;
  border-radius: 4px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tick-progress {
  display: grid;
  grid-gap: 0.8rem; }
  .dc-tick-progress__tick {
    border-radius: 50%;
    width: 0.8rem;
    height: 0.8rem;
    background-color: var(--fill-disabled); }
    .dc-tick-progress__tick--on {
      background-color: var(--brand-secondary); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-progress-slider-mobile {
  display: flex;
  flex-direction: column;
  align-items: center; }
  .dc-progress-slider-mobile__timer {
    margin: 0.2rem auto; }
  .dc-progress-slider-mobile__infinite-loader {
    position: relative;
    height: 4px;
    display: block;
    width: 100%;
    background-color: var(--state-hover);
    border-radius: 2px;
    background-clip: padding-box;
    margin: 0.5rem 0 1rem;
    overflow: hidden; }
    .dc-progress-slider-mobile__infinite-loader--indeterminate {
      background-color: var(--state-active); }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:before, .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
        content: '';
        position: absolute;
        background-color: inherit;
        top: 0;
        left: 0;
        bottom: 0;
        will-change: left, right; }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:before {
        -webkit-animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
                animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite; }
      .dc-progress-slider-mobile__infinite-loader--indeterminate:after {
        -webkit-animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
                animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
        -webkit-animation-delay: 1.15s;
                animation-delay: 1.15s; }

@-webkit-keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%; }
  60% {
    left: 100%;
    right: -90%; }
  100% {
    left: 100%;
    right: -90%; } }

@-webkit-keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%; }
  60% {
    left: 107%;
    right: -8%; }
  100% {
    left: 107%;
    right: -8%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-result */
.dc-result__caption {
  text-transform: capitalize;
  font-size: 1.6em;
  font-weight: bold;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: opacity 0.25s ease; }
  .dc-result__caption--won {
    color: var(--text-profit-success); }
  .dc-result__caption--lost {
    color: var(--text-loss-danger); }
  .dc-result__caption-wrapper {
    cursor: pointer;
    width: 100%;
    height: calc(100% - 24px);
    text-decoration: none;
    position: absolute;
    top: 24px;
    z-index: 2;
    display: flex;
    justify-content: center;
    align-items: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-result__caption {
      pointer-events: none; } }

.dc-result__close-btn {
  position: absolute;
  top: 2px;
  right: 8px;
  cursor: pointer;
  visibility: visible; }
  .dc-result__close-btn:after {
    content: '\0000D7';
    font-size: 24px;
    font-weight: 300;
    color: var(--text-general); }

.dc-result__icon {
  margin-left: 10px; }

.dc-result__positions-overlay {
  max-width: 218px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-contract-card {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  text-decoration: none;
  position: relative;
  border-radius: 4px;
  padding: 0.8rem;
  background-color: var(--general-main-1);
  color: var(--text-prominent);
  padding-bottom: 0.8rem; }
  .dc-contract-card:before {
    content: '';
    position: absolute;
    height: 52px;
    width: 100%;
    left: 0;
    top: 0;
    border-radius: 4px; }
  .dc-contract-card--green:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16)); }
  .dc-contract-card--red:before {
    background-image: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16)); }
  .dc-contract-card--loss {
    color: var(--text-loss-danger); }
  .dc-contract-card--profit {
    color: var(--text-profit-success); }
  .dc-contract-card__grid {
    display: grid;
    grid-template-rows: 1fr auto;
    grid-gap: 4px;
    min-height: 4rem; }
    .dc-contract-card__grid-underlying-trade {
      grid-template-columns: 1fr 1fr;
      width: 100%; }
      .dc-contract-card__grid-underlying-trade--trader {
        grid-template-columns: 1.5fr 1fr; }
      .dc-contract-card__grid-underlying-trade--mobile {
        grid-template-columns: 1fr 1fr 25%; }
    .dc-contract-card__grid-profit-payout {
      grid-template-columns: 1fr 1fr;
      padding: 8px 0;
      border-radius: 4px;
      margin-left: -4px;
      margin-right: -4px;
      background: var(--general-hover); }
    .dc-contract-card__grid-label {
      font-size: 1rem;
      align-self: flex-start;
      text-transform: none;
      line-height: 1.5;
      color: var(--text-general);
      white-space: nowrap; }
    .dc-contract-card__grid-value {
      font-size: 1.2rem;
      font-weight: bold;
      align-self: flex-start;
      line-height: 1.5; }
    .dc-contract-card__grid-items {
      grid-template-columns: 1fr 1fr;
      grid-gap: 0.8rem 0.4rem;
      padding: 0.8rem 0; }
  .dc-contract-card__result {
    position: absolute;
    top: 0;
    width: 100%;
    height: calc(100% - 1rem);
    border-radius: 4px;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--overlay-inside-dialog); }
    .dc-contract-card__result--won, .dc-contract-card__result--won:after {
      background-image: var(--gradient-success); }
    .dc-contract-card__result--lost, .dc-contract-card__result--lost:after {
      background-image: var(--gradient-danger); }
    .dc-contract-card__result--lg {
      max-height: 100%; }
    .dc-contract-card__result:hover {
      background: 0 !important; }
      .dc-contract-card__result:hover .dc-result__caption {
        opacity: 0; }
    .dc-contract-card__result:after {
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 4px;
      z-index: 2; }
    .dc-contract-card__result--enter, .dc-contract-card__result--exit {
      opacity: 0; }
    .dc-contract-card__result--enter-done {
      opacity: 1; }
  .dc-contract-card__wrapper {
    margin: 0 1em;
    max-width: 218px;
    border-radius: 4px;
    transition: transform 0.25s ease, opacity 0.25s linear;
    position: relative;
    background: var(--general-main-1); }
    .dc-contract-card__wrapper .currency-badge {
      margin-bottom: 5px; }
    .dc-contract-card__wrapper--active:before {
      content: '';
      top: -1px;
      left: -1px;
      width: calc(100% + 2px);
      height: calc(100% + 2px);
      position: absolute;
      box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
      border-radius: 4px;
      pointer-events: none; }
    .dc-contract-card__wrapper--enter-done {
      opacity: 1;
      transform: translateY(0); }
    .dc-contract-card__wrapper--enter, .dc-contract-card__wrapper--exit {
      opacity: 0;
      transform: translateY(-16px); }
  .dc-contract-card .purchase-price-container,
  .dc-contract-card .potential-payout-container {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center; }
  .dc-contract-card .purchase-price__label,
  .dc-contract-card .potential-payout__label {
    font-size: 1rem;
    align-self: flex-start;
    text-transform: none;
    margin-bottom: 4px;
    color: var(--text-general);
    white-space: nowrap; }
  .dc-contract-card .purchase-price__value,
  .dc-contract-card .potential-payout__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start; }
  .dc-contract-card .potential-payout-container {
    padding-left: 4px; }
  .dc-contract-card .potential-payout-price__value {
    font-size: 1em;
    font-weight: bold;
    align-self: flex-start; }
  .dc-contract-card__separator {
    width: 100%;
    border-top: 1px solid var(--general-section-1);
    margin: 4px 0 0; }
  .dc-contract-card__underlying-name {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold;
    font-size: 1.2em;
    max-width: 18rem;
    min-width: 10rem; }
  .dc-contract-card__type {
    font-size: 1.2em;
    display: flex;
    justify-content: flex-start;
    font-weight: bold;
    /* postcss-bem-linter: ignore */ }
    .dc-contract-card__type .category-type .color1-fill {
      fill: var(--brand-red-coral) !important; }
    .dc-contract-card__type .category-type .color2-fill {
      fill: var(--brand-secondary) !important; }
  .dc-contract-card__symbol {
    margin-left: 0.4rem; }
  .dc-contract-card__header {
    display: flex;
    justify-content: space-evenly;
    flex-direction: column;
    margin: 0.5em 0.2em; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-contract-card__header {
        margin: 0 8px; } }
  .dc-contract-card__body {
    border-radius: 4px;
    width: 100%;
    padding: 0.8rem 0.4rem;
    color: var(--text-prominent);
    display: flex; }
    .dc-contract-card__body-wrapper {
      width: 100%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-contract-card__body {
        padding: 0 8px; }
        .dc-contract-card__body-wrapper {
          display: flex; } }
  .dc-contract-card-items-wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-areas: 'stake current-stake' 'deal-cancel-fee  limit-order-info' 'buy-price  limit-order-info';
    grid-gap: 0.8rem 0.4rem;
    flex: 1;
    margin-top: 0.5rem; }
    .dc-contract-card-items-wrapper--mobile {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      grid-template-areas: 'stake current-stake limit-order-info' 'deal-cancel-fee buy-price limit-order-info';
      grid-gap: 0.8rem 0.4rem;
      flex: 1;
      padding: 0.4rem 0rem; }
  .dc-contract-card__profit-loss {
    font-size: 1.2em;
    text-align: center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    font-weight: bold; }
    .dc-contract-card__profit-loss-label {
      font-size: 1em;
      margin-bottom: 4px;
      font-weight: normal;
      white-space: nowrap;
      max-width: 90px; }
    .dc-contract-card__profit-loss--is-crypto {
      margin-left: -6px; }
    .dc-contract-card__profit-loss--negative {
      color: var(--text-loss-danger); }
      .dc-contract-card__profit-loss--negative:before {
        content: '-';
        color: inherit; }
    .dc-contract-card__profit-loss--positive {
      color: var(--text-profit-success); }
      .dc-contract-card__profit-loss--positive:before {
        content: '+';
        color: inherit; }
  .dc-contract-card-item__header {
    max-width: calc(100% - 2.4rem);
    line-height: 1.4; }
  .dc-contract-card-item__body {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    display: flex;
    align-self: flex-start;
    line-height: 1.5; }
    .dc-contract-card-item__body--is-crypto {
      margin-left: -6px; }
  .dc-contract-card-item__body--loss {
    color: var(--text-loss-danger) !important; }
    .dc-contract-card-item__body--loss:before {
      content: '-'; }
  .dc-contract-card-item__body--profit {
    color: var(--text-profit-success) !important; }
    .dc-contract-card-item__body--profit:before {
      content: '+'; }
  .dc-contract-card-item__total-profit-loss {
    padding: 0.8rem 0.8rem 0;
    border-top: 1px solid var(--general-section-1);
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 0.8rem; }
    .dc-contract-card-item__total-profit-loss .dc-contract-card-item__header,
    .dc-contract-card-item__total-profit-loss .dc-contract-card-item__body {
      font-size: 1.4rem;
      line-height: 2rem;
      align-self: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-contract-card-item__total-profit-loss {
        flex-direction: row;
        justify-content: center; }
        .dc-contract-card-item__total-profit-loss-value {
          margin-left: 0.2rem; } }
    .dc-contract-card-item__total-profit-loss-label, .dc-contract-card-item__total-profit-loss-value {
      font-size: 1.4rem;
      line-height: 2rem; }
  .dc-contract-card__sell-button {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.25s ease, opacity 0.25s linear;
    padding-top: 0.4rem;
    margin-top: 0.8rem;
    border-top: 1px solid var(--general-section-1);
    min-height: 4rem; }
    .dc-contract-card__sell-button--positions {
      padding: 0.8rem 0;
      margin: 0 0.8rem; }
    .dc-contract-card__sell-button--enter-done {
      opacity: 1; }
    .dc-contract-card__sell-button--enter, .dc-contract-card__sell-button--exit {
      opacity: 0;
      transform: translateY(-8px); }
    .dc-contract-card__sell-button--has-cancel-btn {
      justify-content: space-between;
      display: grid;
      grid-template-columns: 1fr 1fr; }
      .dc-contract-card__sell-button--has-cancel-btn .dc-btn--cancel {
        margin-left: 0.8rem; }
    .dc-contract-card__sell-button .dc-remaining-time {
      border-radius: 0.4rem;
      font-size: 1.2rem;
      margin-left: 0.8rem; }
    .dc-contract-card__sell-button .dc-btn--sell,
    .dc-contract-card__sell-button .dc-btn--cancel {
      height: 2.4rem; }
      .dc-contract-card__sell-button .dc-btn--sell .dc-btn__text,
      .dc-contract-card__sell-button .dc-btn--cancel .dc-btn__text {
        font-size: 1.2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-contract-card__sell-button .dc-btn--sell,
        .dc-contract-card__sell-button .dc-btn--cancel {
          height: 3.2rem; } }
  .dc-contract-card__indicative--movement {
    margin-left: 2px;
    width: 16px;
    height: 16px; }
    .dc-contract-card__indicative--movement-complete, .dc-contract-card__indicative--movement-complete:after {
      display: none; }
    .dc-contract-card__indicative--movement:after {
      content: '';
      width: 16px; }
  .dc-contract-card__status {
    min-width: 25%;
    display: flex;
    align-items: center;
    justify-content: center; }
    .dc-contract-card__status .result-icon {
      margin-left: 0.4rem; }
  .dc-contract-card__limit-order-info {
    grid-area: limit-order-info;
    display: grid;
    grid-gap: 0.4rem 0;
    position: relative; }
    .dc-contract-card__limit-order-info .dc-contract-card__stop-loss {
      padding-bottom: 0.4rem; }
  .dc-contract-card__buy-price {
    grid-area: buy-price; }
  .dc-contract-card__deal-cancel-fee {
    grid-area: deal-cancel-fee; }
  .dc-contract-card__stake {
    grid-area: stake; }
  .dc-contract-card__current-stake {
    grid-area: current-stake; }
  .dc-contract-card__sell-button-mobile {
    justify-self: center;
    align-self: center; }
    .dc-contract-card__sell-button-mobile .dc-btn--sell {
      height: 3.2rem !important; }
  .dc-contract-card__no-resale-msg {
    font-size: 1.2rem; }
  .dc-contract-card .contract-audit__wrapper {
    padding: 2px 0;
    width: 100%; }
  .dc-contract-card .contract-audit__wrapper--is-open {
    margin-top: 0.5em; }
  .dc-contract-card .contract-audit__toggle {
    margin: 0 0 -0.5em;
    width: 100%; }
  .dc-contract-card .contract-audit__label {
    font-size: 0.8em;
    text-align: left; }
  .dc-contract-card .contract-audit__value {
    font-size: 1em;
    text-align: left; }
  .dc-contract-card .dc-contract-type__type-wrapper {
    width: unset;
    height: unset; }

/** @define dc-contract-type */
.dc-contract-type {
  display: flex;
  flex-direction: row;
  align-items: center;
  text-align: center;
  margin-left: -4px; }
  .dc-contract-type__type-wrapper {
    margin: 0;
    padding: 0.5em 0.3em;
    display: flex;
    justify-content: center;
    align-items: center;
    /* postcss-bem-linter: ignore */ }
    .dc-contract-type__type-wrapper .category-type {
      width: 20px;
      height: 20px; }
  .dc-contract-type__type-label {
    width: 3.8em;
    line-height: 1.5;
    text-align: left; }
    .dc-contract-type__type-label-multiplier {
      font-size: 1rem;
      line-height: 1rem;
      color: var(--text-less-prominent); }

/** @define dc-btn; */
.dc-btn--sell {
  width: 100%; }

/** @define dc-remaining-time; weak */
.dc-remaining-time {
  display: inline; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-datepicker; weak */
.dc-datepicker {
  position: relative;
  display: inline-block;
  width: 100%; }
  .dc-datepicker__input .dc-input__field {
    width: 100%;
    border-radius: 4px;
    box-sizing: border-box;
    padding: 0 1.2rem;
    -webkit-appearance: none;
    -moz-appearance: none; }
    .dc-datepicker__input .dc-input__field:hover:not(:disabled) {
      cursor: pointer;
      border-color: var(--border-hover); }
    .dc-datepicker__input .dc-input__field:focus {
      outline: none; }
    .dc-datepicker__input .dc-input__field:active {
      border-color: var(--border-active); }
    .dc-datepicker__input .dc-input__field::-ms-clear {
      display: none; }
    .dc-datepicker__input .dc-input__field::-moz-placeholder {
      /* Fix value placeholder for datepicker for Firefox 19+ */
      line-height: 4rem; }
  .dc-datepicker__input--has-leading-icon .dc-input__field {
    text-align: center; }
  .dc-datepicker .dc-icon {
    top: 25%; }
    .dc-datepicker .dc-icon:not(.dc-icon--disabled) {
      cursor: pointer; }
  .dc-datepicker__picker {
    position: absolute;
    z-index: 2;
    transform: translate3d(0, 0, 0);
    opacity: 1; }
    .dc-datepicker__picker--left-enter, .dc-datepicker__picker--left-exit {
      transform: translate3d(-275px, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--left-enter-done {
      transform: translate3d(-295px, 0, 0);
      opacity: 1; }
    .dc-datepicker__picker--left-enter-done, .dc-datepicker__picker--left-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
    .dc-datepicker__picker--top-enter, .dc-datepicker__picker--top-exit {
      transform: translate3d(0, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--top-enter-done {
      transform: translate3d(0, -40px, 0);
      opacity: 1; }
    .dc-datepicker__picker--top-enter-done, .dc-datepicker__picker--top-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
    .dc-datepicker__picker--bottom-enter, .dc-datepicker__picker--bottom-exit {
      transform: translate3d(0, 0, 0);
      opacity: 0; }
    .dc-datepicker__picker--bottom-enter-done {
      transform: translate3d(0, 40px, 0);
      opacity: 1; }
    .dc-datepicker__picker--bottom-enter-done, .dc-datepicker__picker--bottom-exit {
      transition: transform 0.25s ease, opacity 0.25s linear; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-datepicker__native {
      opacity: 0;
      width: 100%;
      min-width: calc(100% - 1rem);
      position: absolute;
      height: 38px; }
      .dc-input--disabled .dc-datepicker__native {
        border-color: var(--general-disabled); }
    .dc-datepicker__display {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      padding-left: 1rem;
      height: 38px;
      position: relative;
      width: 100%; }
      .dc-datepicker__display-text {
        background-color: inherit;
        padding-top: 0.2rem;
        color: var(--text-prominent); }
        .dc-datepicker__display-text--has-error {
          padding-top: unset;
          color: var(--brand-red-coral); }
        .dc-datepicker__display-text--disabled {
          color: var(--text-disabled); }
    .dc-datepicker__calendar-icon {
      pointer-events: none;
      margin-right: 1rem; }
    .dc-datepicker__placeholder {
      color: var(--text-less-prominent);
      transform: none;
      transition: transform 0.25s linear;
      position: absolute;
      font-size: 1.4rem;
      left: 1.2rem; }
      .dc-datepicker__placeholder--has-value {
        transform: translate3d(-14px, -20px, 0px) scale(0.7);
        color: var(--text-general);
        background-color: var(--fill-normal); }
      .dc-datepicker__placeholder--has-error {
        color: var(--brand-red-coral); }
      .dc-datepicker__placeholder--is-focused {
        color: var(--brand-secondary); }
      .dc-input--disabled .dc-datepicker__placeholder {
        color: var(--text-disabled); }
    .dc-datepicker__error {
      display: flex;
      position: absolute;
      top: 4.4rem;
      left: 1.2rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-themed-scrollbars */
.dc-themed-scrollbars {
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
  /* Firefox only */
  scrollbar-color: var(--state-active) var(--general-main-1);
  scrollbar-width: thin; }
  .dc-themed-scrollbars__autohide::-webkit-scrollbar-thumb {
    display: none; }
  .dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
    display: unset; }
  .dc-themed-scrollbars--has-horizontal {
    overflow-x: auto; }
  .dc-themed-scrollbars--only-horizontal {
    overflow-y: hidden;
    overflow-x: auto; }
    .dc-themed-scrollbars--only-horizontal-overlay {
      overflow-y: hidden;
      overflow-x: overlay; }
  .dc-themed-scrollbars::-webkit-scrollbar {
    width: 5px;
    height: 5px;
    background-color: transparent;
    border-radius: 10px; }
  .dc-themed-scrollbars::-webkit-scrollbar-track {
    background-color: transparent; }
  .dc-themed-scrollbars::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: var(--state-active); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define data-list; weak */
.data-list {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column; }
  .data-list__body {
    flex: 1; }
    .data-list__body-wrapper {
      display: flex;
      flex-direction: column;
      height: 100%; }
  .data-list__footer {
    width: 100%;
    background: var(--general-main-1);
    border-top: 2px solid var(--border-disabled);
    display: flex;
    align-items: center;
    position: relative; }
  .data-list__item {
    height: inherit; }
    .data-list__item--wrapper {
      height: inherit;
      text-decoration: none;
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: transparent; }
    @media (min-width: 320px) and (max-width: 767px) {
      .data-list__item {
        border-radius: 4px; } }
  .data-list__row {
    display: flex;
    flex-direction: row;
    padding: 4px 16px;
    width: 100%; }
    .data-list__row > * {
      flex: 1; }
    .data-list__row-content {
      font-size: 1.4rem;
      line-height: 2rem;
      color: var(--text-general); }
    .data-list__row-cell--amount {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      flex: none; }
    .data-list__row-title {
      font-size: 1.4rem;
      font-weight: bold;
      color: var(--text-prominent);
      line-height: 2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .data-list__row-title {
          font-size: 1.2rem; } }
    .data-list__row-divider {
      margin: 0 1.6rem; }
      .data-list__row-divider:after {
        content: '';
        display: block;
        border-top: 1px solid var(--general-main-1); }
    .data-list__row--wrapper {
      height: 100%; }
  .data-list__desc--wrapper {
    height: inherit;
    display: flex;
    text-align: center;
    align-items: center;
    font-size: var(--text-size-xxs);
    color: var(--text-general);
    padding: 1rem; }

/* stylelint-disable-next-line plugin/selector-bem-pattern */
.ReactVirtualized__List {
  outline: 0; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-data-table */
.dc-data-table {
  display: flex;
  flex-direction: column; }

/** @define table */
.table {
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: default;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general); }
  .table__cell {
    padding: 0.75em;
    display: flex;
    align-items: center; }
    .table__cell:first-child {
      padding-left: 0; }
    .table__cell:last-child {
      padding-right: 0; }
  .table__row {
    display: grid;
    grid-auto-rows: -webkit-max-content;
    grid-auto-rows: max-content;
    padding: 0 1.6em;
    box-sizing: border-box;
    text-decoration: none;
    position: relative; }
    .table__row, .table__row:active, .table__row:visited {
      color: var(--text-general); }
    .table__row--preloader {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      max-height: 64px;
      width: 100%; }
  .table__head {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px; }
  .table__head .table__row {
    color: var(--text-prominent);
    height: 100%;
    border-bottom: none; }
  .table__body {
    overflow: hidden;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    flex-basis: 0; }
    .table__body .table__row-link:hover {
      background-color: var(--state-hover);
      cursor: pointer; }
    .table__body .table__row:last-child {
      border-bottom: none; }
  .table__head, .table__foot {
    font-weight: 500;
    white-space: nowrap; }
  .table__foot {
    border-top: 2px solid var(--general-section-1); }
  .table__foot .table__row {
    color: var(--text-general);
    border-bottom: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-dialog */
.dc-dialog {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  flex-direction: column;
  z-index: 999;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0; }
  .dc-dialog__wrapper {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--overlay-outside-dialog); }
    .dc-dialog__wrapper--enter, .dc-dialog__wrapper--exit {
      opacity: 0; }
      .dc-dialog__wrapper--enter .dc-dialog__dialog, .dc-dialog__wrapper--exit .dc-dialog__dialog {
        transform: translate3d(0, 50px, 0);
        opacity: 0; }
    .dc-dialog__wrapper--enter-done {
      opacity: 1; }
      .dc-dialog__wrapper--enter-done .dc-dialog__dialog {
        transform: translate3d(0, 0, 0);
        opacity: 1; }
    .dc-dialog__wrapper--has-portal {
      background-color: transparent; }
  .dc-dialog__dialog {
    max-width: 560px;
    max-height: 320px;
    min-width: 440px;
    min-height: 176px;
    margin-top: -48px;
    padding: 2.4rem;
    border-radius: 8px;
    box-sizing: border-box;
    display: flex;
    justify-content: space-around;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 2px 8px 0 var(--shadow-menu);
    background-color: var(--general-main-2);
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25); }
  .dc-dialog__header {
    align-self: flex-start;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    margin-bottom: 2.4rem;
    line-height: 1.5;
    color: var(--text-prominent); }
    .dc-dialog__header-wrapper {
      width: 100%;
      display: flex;
      justify-content: space-between; }
    .dc-dialog__header--close {
      cursor: pointer; }
  .dc-dialog__content {
    align-self: flex-start;
    margin-bottom: 2.4rem;
    max-width: calc(440px - 4.8rem);
    width: 100%;
    /* postcss-bem-linter: ignore */ }
    .dc-dialog__content .dc-input__label {
      background-color: var(--general-main-2); }
    .dc-dialog__content--centered {
      align-self: center; }
  .dc-dialog__footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-dialog__footer {
        flex-wrap: wrap;
        align-items: flex-start; } }
  .dc-dialog__button {
    margin-left: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-dialog__button:not(:last-child) {
        margin-bottom: 1rem; } }

@media screen and (max-width: 560px) {
  .dc-dialog__dialog {
    min-width: auto; }
    .dc-dialog__dialog--has-margin {
      min-width: unset;
      width: calc(100vw - 4.8rem); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-drawer */
.dc-drawer {
  position: fixed;
  will-change: transform;
  transition: transform 0.3s ease;
  background: var(--general-main-2); }
  .dc-drawer--left {
    display: flex;
    flex-direction: row-reverse;
    right: calc(100vw - 16px); }
  .dc-drawer--right {
    display: flex;
    flex-direction: row;
    left: calc(100vw - 16px); }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-drawer {
      width: 100vw !important;
      height: calc(100% - 10.1rem) !important;
      top: calc(100% - 9.8rem) !important; } }
  .dc-drawer__container {
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%; }
    .dc-drawer__container--left {
      padding-right: 16px; }
    .dc-drawer__container--right {
      padding-left: 16px; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-drawer__container {
        height: calc(100% - 3.6rem); } }
  .dc-drawer__header {
    border-bottom: 1px solid var(--general-section-1);
    line-height: 40px;
    font-weight: 700;
    font-size: 1.6em; }
  .dc-drawer__content {
    flex-grow: 1;
    overflow: auto; }
  .dc-drawer__footer {
    border-top: 1px solid var(--general-section-1);
    line-height: 40px;
    font-weight: 700;
    font-size: 1.6em;
    align-items: center; }
  .dc-drawer__toggle {
    align-items: center;
    border-left: 1px solid var(--border-disabled);
    border-right: 1px solid var(--border-disabled);
    display: flex;
    position: absolute;
    width: 16px;
    height: 100%;
    background-color: var(--general-section-1);
    cursor: pointer; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-drawer__toggle {
        position: unset;
        width: 100%;
        height: 3.6rem;
        justify-content: center;
        background-color: var(--general-main-1);
        border-top: solid 1px var(--general-section-1); } }
    .dc-drawer__toggle-icon {
      transition: 0.25s ease; }
      .dc-drawer__toggle-icon--left {
        transform: rotate(0); }
      .dc-drawer__toggle-icon--right {
        transform: rotate(180deg); }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-drawer__toggle-icon {
          width: 2.5rem;
          height: 0.8rem;
          transform: rotate(0); } }
    .dc-drawer__toggle--open > .dc-drawer__toggle-icon--left {
      transform: rotate(180deg); }
    .dc-drawer__toggle--open > .dc-drawer__toggle-icon--right {
      transform: rotate(0); }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-drawer__toggle--open > .dc-drawer__toggle-icon {
        transform: rotate(180deg); } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-drawer--open {
      transform: translateY(calc(-100% + 3.6rem)); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-dropdown__select-arrow {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .dc-dropdown__select-arrow .color1-fill {
    fill: var(--text-general); }
  .dc-dropdown__select-arrow .color1-stroke {
    stroke: var(--text-general); }
  .dc-dropdown__select-arrow .color2-fill {
    fill: none; }
  .dc-dropdown__select-arrow .color2-stroke {
    stroke: none; }
  .active.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.dc-dropdown__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .active.dc-dropdown__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
    .active.dc-dropdown__select-arrow .color2-fill {
      fill: none; }
    .active.dc-dropdown__select-arrow .color2-stroke {
      stroke: none; }
  .disabled.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.dc-dropdown__select-arrow .color1-fill {
      fill: var(--text-disabled); }
    .disabled.dc-dropdown__select-arrow .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.dc-dropdown__select-arrow .color2-fill {
      fill: none; }
    .disabled.dc-dropdown__select-arrow .color2-stroke {
      stroke: none; }
  .white.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.dc-dropdown__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .white.dc-dropdown__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.dc-dropdown__select-arrow .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.dc-dropdown__select-arrow .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.dc-dropdown__select-arrow {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.dc-dropdown__select-arrow .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.dc-dropdown__select-arrow .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
.dc-dropdown__label {
  position: absolute;
  font-size: var(--text-size-xs);
  transform: translate(0.5rem, -1rem) scale(0.75);
  z-index: 2;
  color: var(--text-prominent);
  padding: 0 4px;
  background-color: var(--fill-normal);
  pointer-events: none;
  transition: 0.25s ease all; }
  .dc-dropdown__label--clicked {
    color: var(--brand-secondary); }

.dc-dropdown__display {
  cursor: pointer;
  border-radius: 4px;
  height: 3.2em;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--fill-normal);
  border: 1px solid var(--border-normal); }
  .dc-dropdown__display:hover {
    outline: 0;
    border-color: var(--border-hover); }
  .dc-dropdown__display:active, .dc-dropdown__display:focus {
    outline: 0;
    border-color: var(--border-active); }
  .dc-dropdown__display-text {
    padding-left: 1em;
    padding-right: 2.5em;
    display: flex;
    white-space: nowrap; }
    .dc-dropdown__display-text--placeholder:after {
      content: attr(placeholder);
      position: absolute;
      display: flex;
      align-items: center;
      justify-content: center;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none; }
  .dc-dropdown__display--has-suffix-icon {
    width: 21rem;
    padding-left: 3rem;
    padding-right: 0;
    justify-content: start; }
  .dc-dropdown__display--is-left-text {
    justify-content: flex-start; }
    .dc-dropdown__display--is-left-text .dc-dropdown__display-text {
      padding-left: 1.2rem; }
  .dc-dropdown__display--has-symbol {
    justify-content: unset; }
  .dc-dropdown__display--no-symbol .dc-dropdown__display-text {
    padding: unset; }
  .dc-dropdown__display--no-border {
    border-color: var(--fill-normal); }
  .dc-dropdown__display-placeholder {
    position: absolute;
    top: 1.2rem;
    left: 1rem;
    pointer-events: none;
    transition: 0.25s ease all;
    transform: translateZ(0);
    transform-origin: top left; }
    .dc-dropdown__display-placeholder-text {
      padding: 0 4px;
      background: var(--fill-normal); }
    .dc-dropdown__display-placeholder--is-left-text {
      justify-content: flex-start;
      left: 8px; }
      .dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title {
        transform: translate(0, -1.7rem) scale(0.75);
        padding: 0 4px; }
        .dc-dropdown__display-placeholder--is-left-text.dc-dropdown__display-placeholder--is-title .dc-dropdown__display-placeholder-text {
          color: var(--text-general) !important; }

.dc-dropdown__inner {
  pointer-events: none;
  opacity: 0;
  height: 0;
  width: 0; }

.dc-dropdown__container {
  position: relative; }

.dc-dropdown__hint {
  margin-left: 1.2rem; }

.dc-dropdown--no-margin .dc-dropdown__display {
  margin: 0; }

.dc-dropdown__select-arrow {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  position: absolute;
  pointer-events: none;
  top: calc(50% - 7px);
  right: 12px;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75; }
  .dc-dropdown__select-arrow:before {
    content: '\002303';
    display: block;
    height: 0.53em; }
  .dc-dropdown__select-arrow--up {
    transform: rotate(-180deg); }
  .dc-dropdown__select-arrow--error {
    top: 1.4rem; }

.dc-dropdown:active, .dc-dropdown:focus, .dc-dropdown--show {
  outline: none;
  border-radius: 4px; }
  .dc-dropdown:active .dc-dropdown__select-arrow, .dc-dropdown:focus .dc-dropdown__select-arrow, .dc-dropdown--show .dc-dropdown__select-arrow {
    color: var(--text-general); }

.dc-dropdown--error {
  margin-bottom: -1.8rem; }
  .dc-dropdown--error .dc-dropdown__display {
    border-color: var(--brand-red-coral) !important; }
  .dc-dropdown--error .dc-dropdown__label {
    color: var(--brand-red-coral) !important; }

.dc-dropdown__list {
  left: 0;
  bottom: -0.4rem;
  height: 0;
  width: 100%;
  position: absolute;
  transition: transform 0.25s ease, opacity 0.25s linear;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  opacity: 0;
  transform: scale(1, 0);
  z-index: 999; }
  .dc-dropdown__list--enter, .dc-dropdown__list--exit {
    transform: scale(1, 0);
    opacity: 0; }
  .dc-dropdown__list--enter-done {
    transform: scale(1, 1);
    opacity: 1; }
  .dc-dropdown__list--top {
    bottom: unset;
    top: 0.8em; }
  .dc-dropdown__list--left {
    top: -0.1em; }
    .dc-dropdown__list--left--enter, .dc-dropdown__list--left--exit {
      transform: scale(1, 1) translate3d(2em, 0, 0px);
      opacity: 0; }
    .dc-dropdown__list--left--enter-done {
      opacity: 1; }
  .dc-dropdown__list--portal {
    height: auto;
    margin: 0.4rem 0; }
    .dc-dropdown__list--portal .dc-list {
      position: static; }

.dc-dropdown--left .dc-dropdown__display {
  text-align: center; }
  .dc-dropdown--left .dc-dropdown__display-text {
    padding-left: unset; }
  .dc-dropdown--left .dc-dropdown__display-symbol {
    right: 0;
    float: right;
    position: relative;
    margin-left: auto;
    margin-right: 0.6em; }

.dc-dropdown--left .dc-dropdown__select-arrow {
  left: 0.6em;
  right: unset; }

.dc-dropdown--show .dc-dropdown__display {
  border: 1px solid var(--border-active); }

.dc-dropdown--show > .dc-dropdown__select-arrow {
  transform: rotate(-180deg); }
  .dc-dropdown--show > .dc-dropdown__select-arrow--left {
    transform: rotate(-180deg); }

.dc-dropdown--disabled {
  pointer-events: none; }
  .dc-dropdown--disabled .dc-dropdown__display {
    border: 1px solid var(--general-disabled); }
    .dc-dropdown--disabled .dc-dropdown__display-text {
      color: var(--text-disabled); }

.dc-dropdown-container {
  position: relative;
  margin-top: 0.8rem;
  min-width: 15rem;
  width: 100%; }

.dc-dropdown--has-placeholder .dc-dropdown__display {
  height: 4rem; }
  .dc-dropdown--has-placeholder .dc-dropdown__display .dc-dropdown__display-placeholder-text {
    color: var(--text-less-prominent); }
  .dc-dropdown--has-placeholder .dc-dropdown__display--clicked .dc-dropdown__display-placeholder-text {
    color: var(--brand-secondary) !important; }

.dc-dropdown--has-placeholder .dc-dropdown__select-arrow {
  top: 12px;
  right: 16px; }

.dc-dropdown--has-suffix-icon {
  margin-left: 1rem;
  margin-top: 0;
  max-width: -webkit-fit-content;
  max-width: -moz-fit-content;
  max-width: fit-content; }

.suffix-icon {
  position: absolute;
  left: 20px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-list {
  position: absolute;
  width: 100%;
  z-index: 2;
  border-radius: 4px;
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2); }
  .dc-list--has-suffix-icon {
    width: 21rem; }
  .dc-list--left {
    width: unset; }
    .dc-list--left .dc-list__item-text,
    .dc-list--left .dc-list__item-symbol {
      padding-left: 2.286em;
      padding-right: 2.286em;
      overflow: hidden;
      white-space: nowrap;
      text-align: center; }
  .dc-list--large {
    padding-bottom: 1.6rem;
    max-height: 404px; }
    .dc-list--large .dc-list__label {
      padding: 1.6rem 0.8rem 0.8rem;
      color: var(--text-prominent);
      height: 4rem; }
    .dc-list--large .dc-list__item-text {
      width: calc(100% - 1.6rem);
      padding: 1rem 1.6rem;
      margin: 0 0.8rem; }
    .dc-list--large .dc-list__item:hover, .dc-list--large .dc-list__item:focus {
      border-radius: 4px;
      width: calc(100% - 1.6rem);
      margin: 0 0.8rem; }
      .dc-list--large .dc-list__item:hover .dc-list__item-text, .dc-list--large .dc-list__item:focus .dc-list__item-text {
        width: 100%;
        margin: 0; }
    .dc-list--large .dc-list__separator {
      width: 100%;
      border-bottom: 4px solid var(--general-section-2);
      margin: 1.6rem 0 0; }
  .dc-list__label {
    padding: 0.6rem;
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--brand-red-coral);
    height: 3.6rem;
    display: flex;
    align-items: center;
    justify-content: center; }
  .dc-list__item {
    width: 100%;
    cursor: pointer; }
    .dc-list__item-text, .dc-list__item-symbol {
      display: flex;
      width: 100%;
      justify-content: center;
      pointer-events: none;
      vertical-align: middle;
      padding: 0.6rem 1.6rem; }
    .dc-list__item-text--left {
      justify-content: flex-start;
      padding-left: 1em; }
    .dc-list__item:not(.dc-list__item--disabled):not(.dc-list__item--selected):hover {
      background-color: var(--state-hover);
      color: var(--text-general); }
    .dc-list__item--selected .dc-list__item-text,
    .dc-list__item--selected .dc-list__item-symbol,
    .dc-list__item--selected .dc-list__item-tooltip {
      font-size: 1.4rem;
      color: var(--text-colored-background);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      line-height: 1.43;
      color: var(--text-prominent);
      background: var(--state-active);
      border-radius: 4px; }
    .dc-list__item:focus:not(.dc-list__item--disabled) {
      background-color: var(--state-hover);
      color: var(--text-general);
      outline: none; }
    .dc-list__item--disabled {
      color: var(--text-disabled);
      opacity: 0.3;
      cursor: default; }
    .dc-list__item-symbol {
      width: 100%;
      padding: 0.6rem 0;
      margin: 0;
      justify-content: center;
      display: flex; }
  .dc-list__separator {
    display: flex;
    width: calc(100% - 3.2rem);
    border-bottom: 1px solid var(--border-normal);
    margin: 1.6rem; }
  @media not all and (min-resolution: 0.001dpcm) {
    @supports (-webkit-appearance: none) {
      .dc-list {
        /* postcss-bem-linter: ignore */ }
        .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) {
          overflow-y: auto;
          overflow-x: hidden !important;
          /* postcss-bem-linter: ignore */
          /* postcss-bem-linter: ignore */ }
          .dc-list > div:nth-child(1) .dc-list > div:nth-child(1)::-webkit-scrollbar {
            -webkit-appearance: none; }
          .dc-list > div:nth-child(1) .dc-list > div:nth-child(1) > div:nth-child(1) {
            padding-bottom: 11.5em !important; } } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-expansion-panel__header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-weight: bold; }

.dc-expansion-panel__header-chevron-icon {
  cursor: pointer;
  transition: transform 0.3s ease;
  transform: rotate(0deg); }

.dc-expansion-panel__header-active .dc-expansion-panel__header-chevron-icon {
  transform: rotate(180deg); }

.dc-expansion-panel__content-array {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  font-size: var(--text-size-xxs);
  line-height: 1.5; }

.dc-expansion-panel__content-chevron-icon {
  margin-left: 4px;
  margin-right: 4px;
  cursor: pointer;
  transition: transform 0.3s ease;
  transform: rotate(0deg); }

.dc-expansion-panel__content-active .dc-expansion-panel__content-chevron-icon {
  transform: rotate(90deg); }

.dc-expansion-panel__content-array-item-index {
  margin-right: 4px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-file-dropzone {
  width: 100%;
  height: 100%;
  border: 1px dashed var(--border-normal);
  border-radius: 4px;
  color: var(--text-prominent);
  text-align: center;
  font-size: 20px;
  font-weight: bold;
  padding: 2em;
  cursor: pointer;
  position: relative; }
  .dc-file-dropzone__content {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center; }
  .dc-file-dropzone__message {
    position: absolute;
    display: block;
    font-size: 12px;
    color: var(--text-general);
    font-weight: 400;
    opacity: 1;
    max-width: 168px;
    line-height: 1.5;
    transform: translate3d(0, 0, 0);
    transition: transform 0.25s ease, opacity 0.15s linear; }
    .dc-file-dropzone__message--enter-done {
      opacity: 1;
      transform: translate3d(0, 0, 0); }
    .dc-file-dropzone__message--enter {
      opacity: 0;
      transform: translate3d(0, -16px, 0); }
    .dc-file-dropzone__message--enter-active {
      opacity: 1;
      transform: translate3d(0, 0, 0); }
    .dc-file-dropzone__message--exit {
      opacity: 1;
      transform: translate3d(0, 0, 0); }
    .dc-file-dropzone__message--exit-active {
      opacity: 0;
      transform: translate3d(0, -16px, 0); }
    .dc-file-dropzone__message--error {
      color: var(--status-danger); }
  .dc-file-dropzone__filename {
    width: 100%;
    max-width: 240px; }
  .dc-file-dropzone--has-file {
    border-style: solid;
    border-color: var(--status-success); }
  .dc-file-dropzone--has-error {
    border-style: solid;
    border-color: var(--status-danger); }
    .dc-file-dropzone--has-error .dc-file-dropzone__filename {
      margin-top: -3em; }
  .dc-file-dropzone:hover, .dc-file-dropzone:focus {
    outline: 0; }
  .dc-file-dropzone:hover {
    background-color: rgba(0, 0, 0, 0.025); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-form-progress {
  width: 100%; }
  .dc-form-progress__header {
    align-items: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-bottom: 3.2rem; }
    .dc-form-progress__header > h2 {
      font-size: var(--text-size-s);
      color: var(--text-prominent);
      font-weight: bold;
      text-transform: none;
      margin: 2rem 0 0; }
  .dc-form-progress__step {
    align-items: center;
    display: flex;
    flex-direction: column;
    height: 6rem;
    justify-content: space-around;
    width: 160px;
    z-index: 2; }
    .dc-form-progress__step .identifier {
      border-radius: 50%;
      display: block;
      width: 24px;
      background-color: var(--text-less-prominent);
      border: 1px solid var(--text-less-prominent); }
      .dc-form-progress__step .identifier--active {
        background-color: var(--brand-red-coral) !important;
        border: 1px solid var(--brand-red-coral) !important;
        transition: all 0.3s ease; }
  .dc-form-progress__steps {
    align-items: center;
    display: flex;
    justify-content: center;
    margin-top: 20px;
    position: relative; }
    .dc-form-progress__steps--before {
      bottom: 0;
      content: '';
      left: 0;
      margin: 0 auto;
      /* this centers the line to the full width specified */
      position: absolute;
      /* positioning must be absolute here, and relative positioning must be applied to the parent */
      right: 0;
      top: 1.7rem;
      border-top: 2px solid var(--text-less-prominent); }
    .dc-form-progress__steps--after {
      border-top: 2px solid var(--brand-red-coral);
      bottom: 0;
      content: '';
      left: 0;
      margin: 0 auto;
      /* this centers the line to the full width specified */
      position: absolute;
      /* positioning must be absolute here, and relative positioning must be applied to the parent */
      top: 1.7rem;
      transition: width 0.3s ease; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-form-submit-button {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  align-self: flex-end; }
  .dc-form-submit-button:only-child {
    width: 100%; }
  .dc-form-submit-button .dc-btn {
    margin: 0 0.8rem; }
    .dc-form-submit-button .dc-btn:first-child {
      margin-left: 0; }
    .dc-form-submit-button .dc-btn:last-child {
      margin: 0; }
  .dc-form-submit-button--absolute {
    position: absolute;
    right: 0;
    bottom: 0;
    padding: 1.6rem;
    width: 100%;
    background-color: var(--general-main-1);
    border-top: 1px solid var(--general-section-1); }
  .dc-form-submit-button--center {
    justify-content: center;
    width: 100%;
    height: 100%; }
    .dc-form-submit-button--center .btn {
      min-width: 9rem; }
  .dc-form-submit-button--error {
    text-transform: none; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-form-submit-button--absolute {
      background-color: var(--general-section-2);
      top: unset;
      bottom: -0.4rem;
      left: 0;
      position: absolute;
      padding: 1.6rem;
      border-top: 2px solid var(--general-disabled);
      max-height: 70px;
      width: 100%; }
      .dc-form-submit-button--absolute .dc-btn {
        height: 40px;
        width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-form-submit-error-message; weak */
.dc-form-submit-error-message {
  display: flex;
  align-items: center;
  margin-right: auto;
  flex: 1; }
  .dc-form-submit-error-message p {
    padding-left: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-form-submit-error-message p {
        line-height: 20px; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-form-submit-error-message {
      padding: 0 1.6rem 1rem;
      position: absolute;
      bottom: 7rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-form-cancel-button {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  align-self: flex-start; }
  .dc-form-cancel-button:only-child {
    width: 100%; }
  .dc-form-cancel-button .dc-btn {
    margin: 0 0.8rem; }
    .dc-form-cancel-button .dc-btn:first-child {
      margin-left: 0; }
    .dc-form-cancel-button .dc-btn:last-child {
      margin: 0; }
  .dc-form-cancel-button--absolute {
    bottom: 0;
    position: absolute;
    left: 0;
    padding: 1.6rem; }
  .dc-form-cancel-button--center {
    justify-content: center;
    width: 100%;
    height: 100%; }
    .dc-form-cancel-button--center .btn {
      min-width: 9rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-form-cancel-button--absolute {
      background-color: var(--general-section-2);
      top: unset;
      bottom: -0.4rem;
      left: 0;
      position: absolute;
      padding: 1.6rem;
      border-top: 2px solid var(--general-disabled);
      max-height: 70px;
      width: 100%; }
      .dc-form-cancel-button--absolute .dc-btn {
        height: 40px;
        width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-hint-box {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: var(--text-size-xxxs);
  line-height: 1.4rem;
  padding: 8px;
  border-radius: 4px; }
  .dc-hint-box--info {
    background-color: var(--transparent-info); }
  .dc-hint-box--warn {
    background-color: rgba(255, 173, 58, 0.16); }
  .dc-hint-box__icon {
    margin-right: 8px; }
  .dc-hint-box__message {
    color: var(--text-prominent); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-label {
  font-size: 14px;
  font-weight: bold;
  height: 24px;
  line-height: 20px;
  border-radius: 12px;
  padding: 2px 8px;
  margin: 0 2px;
  position: relative;
  /* TODO: change all :after to normal background color once styleguide ready */ }
  .dc-label:after {
    opacity: 0.16;
    content: '';
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    position: absolute;
    border-radius: 12px; }
  .dc-label--general--default {
    color: var(--status-default); }
    .dc-label--general--default:after {
      background-color: var(--status-default); }
  .dc-label--general--adjustment {
    color: var(--status-adjustment); }
    .dc-label--general--adjustment:after {
      background-color: var(--status-adjustment); }
  .dc-label--general--danger {
    color: var(--status-danger); }
    .dc-label--general--danger:after {
      background-color: var(--status-danger); }
  .dc-label--general--warn {
    color: var(--status-warning); }
    .dc-label--general--warn:after {
      background-color: var(--status-warning); }
  .dc-label--general--success {
    color: var(--status-success); }
    .dc-label--general--success:after {
      background-color: var(--status-success); }
  .dc-label--general--default-invert {
    color: var(--status-less-prominent); }
    .dc-label--general--default-invert:after {
      background-color: var(--status-less-prominent); }
  .dc-label--general--success-invert {
    color: var(--text-colored-background);
    background-color: var(--status-success); }
  .dc-label--general--warn-invert {
    color: var(--text-colored-background);
    background-color: var(--status-warning); }
  .dc-label--general--info {
    color: var(--status-info); }
    .dc-label--general--info:after {
      background-color: var(--status-info); }
  .dc-label--large {
    height: 28px;
    border-radius: 20px;
    padding: 4px 8px 4px 4px;
    margin: 0 2px;
    font-size: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-linear-progress; weak */
.dc-linear-progress {
  display: flex;
  height: 4px;
  justify-content: flex-start;
  align-items: flex-start;
  flex-direction: column;
  position: absolute;
  bottom: 0;
  width: 100%;
  left: 0; }
  .dc-linear-progress__bar {
    height: 100%;
    transition: width 0.5s cubic-bezier(0.62, 0.01, 0.51, 0.95);
    background-color: var(--brand-red-coral); }
  .dc-linear-progress__countdown {
    position: absolute;
    left: 1rem;
    bottom: 1rem;
    font-size: 12px;
    color: var(--brand-red-coral);
    font-weight: bold; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-carousel */
.dc-carousel {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  justify-self: center; }
  .dc-carousel__row {
    display: grid;
    grid-template-columns: 2rem 22.7rem 2rem;
    align-items: center;
    overflow-x: scroll; }
  .dc-carousel__body {
    display: flex;
    justify-content: flex-start;
    align-items: start;
    transition: all 0.3s ease;
    opacity: 1;
    overflow: hidden;
    scroll-behavior: smooth; }
  .dc-carousel__footer {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 1rem; }
  .dc-carousel__circle {
    background-color: var(--text-prominent);
    opacity: 0.5;
    margin: 0.5rem;
    width: 8px;
    height: 8px;
    border-radius: 50%; }
    .dc-carousel__circle--is-active {
      opacity: 1; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
  .dc-mobile-drawer__header-close {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-mobile-drawer__header-close .color1-fill {
      fill: var(--text-prominent); }
    .dc-mobile-drawer__header-close .color1-stroke {
      stroke: var(--text-prominent); }

/**
 * Define Breakpoints here.
 */
/* @define dc-mobile-drawer; weak */
.dc-mobile-drawer {
  position: absolute;
  top: 0;
  left: 0;
  will-change: transform;
  transform: translate3d(0, 0, 0); }
  .dc-mobile-drawer__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    background-color: var(--general-main-2);
    box-shadow: 0 16px 16px 0 var(--shadow-menu), 0 0 16px 0 var(--shadow-menu); }
  .dc-mobile-drawer__header {
    display: flex;
    width: 100%;
    height: 50px;
    z-index: 4;
    line-height: 24px;
    align-items: center;
    border-bottom: 1px solid var(--general-section-2); }
    .dc-mobile-drawer__header--right {
      flex-direction: row-reverse; }
    .dc-mobile-drawer__header-title {
      font-size: 1.6rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.75;
      color: var(--text-prominent);
      line-height: 24px;
      padding: 1.2rem 1.6rem;
      height: 40px;
      width: 100%;
      display: flex;
      align-items: center;
      border-left: 1px solid var(--general-section-2); }
    .dc-mobile-drawer__header-section {
      flex-grow: 1;
      padding: 1.6rem;
      line-height: 24px;
      display: flex;
      align-items: center; }
    .dc-mobile-drawer__header-close {
      display: flex;
      align-items: center;
      cursor: pointer;
      padding: 0.6rem 1.2rem;
      height: inherit;
      width: 40px; }
    .dc-mobile-drawer__header-wrapper {
      display: flex;
      width: 100%;
      justify-content: space-between; }
  .dc-mobile-drawer__subheader {
    display: flex;
    height: 72px;
    min-height: 72px;
    border-bottom: 1px solid var(--general-section-2);
    justify-content: center;
    align-items: center;
    margin-bottom: 1.8rem;
    position: absolute;
    width: 100%;
    background: var(--general-main-2);
    z-index: 1; }
    .dc-mobile-drawer__subheader--hidden {
      visibility: hidden; }
  .dc-mobile-drawer__submenu-back {
    width: 16px;
    height: 16px;
    margin-right: 16px; }
  .dc-mobile-drawer__submenu-toggle {
    display: flex;
    padding: 0 0 3.2rem 4.8rem;
    align-items: center; }
    .dc-mobile-drawer__submenu-toggle-text {
      font-size: 1.4rem;
      color: var(--text-general); }
    .dc-mobile-drawer__submenu-toggle-icon {
      width: 16px;
      height: 16px;
      margin-right: 16px; }
    .dc-mobile-drawer__submenu-toggle-suffix-icon {
      width: 16px;
      height: 16px;
      margin-right: 8.3rem;
      margin-left: auto; }
  .dc-mobile-drawer__submenu-list {
    background: var(--general-main-2);
    position: absolute;
    z-index: 2;
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    overflow: auto; }
    .dc-mobile-drawer__submenu-list--enter, .dc-mobile-drawer__submenu-list--exit {
      transform: translateX(-100%);
      opacity: 0;
      pointer-events: none; }
    .dc-mobile-drawer__submenu-list--enter-done {
      transform: translateX(0);
      opacity: 1;
      pointer-events: auto; }
    .dc-mobile-drawer__submenu-list--has-subheader {
      height: 100%; }
    .dc-mobile-drawer__submenu-list-title {
      display: flex;
      padding: 2rem 0 3.2rem 3.2rem;
      align-items: center; }
      .dc-mobile-drawer__submenu-list-title-text {
        line-height: 1.5;
        font-size: 1.6rem;
        font-weight: bold;
        color: var(--text-prominent); }
  .dc-mobile-drawer__submenu-section {
    display: flex;
    padding-left: 5.6rem;
    padding-bottom: 3.2rem;
    flex-direction: column; }
    .dc-mobile-drawer__submenu-section-title {
      display: flex;
      align-items: center; }
      .dc-mobile-drawer__submenu-section-title-text {
        padding-left: 1.6rem;
        font-size: 1.4rem;
        font-weight: bold; }
    .dc-mobile-drawer__submenu-section-content {
      padding-left: 4.8rem; }
      .dc-mobile-drawer__submenu-section-content .header__menu-mobile-link {
        padding-top: 1.6rem; }
      .dc-mobile-drawer__submenu-section-content .header__menu-mobile-link--disabled {
        opacity: 0.32;
        pointer-events: none; }
  .dc-mobile-drawer__body {
    font-size: 1.4rem;
    height: 100%;
    padding-top: 8.8rem;
    line-height: 1.5;
    color: var(--text-prominent);
    overflow-y: auto;
    overflow-x: hidden; }
  .dc-mobile-drawer__item {
    padding: 0 0 3.2rem 4.8rem;
    font-size: 1.4rem;
    line-height: 1.5;
    color: var(--text-prominent); }
  .dc-mobile-drawer__footer {
    display: flex;
    height: 36px;
    z-index: 4;
    border-top: 1px solid var(--general-section-2);
    justify-content: flex-start;
    align-items: center;
    padding: 1.6rem; }
  .dc-mobile-drawer__wrapper {
    z-index: 9999 !important;
    background-color: var(--overlay-outside-dialog) !important; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-mobile-full-page-modal {
  height: calc(100% - 40px - 40px);
  position: fixed;
  z-index: 6;
  width: 100%;
  left: 0px;
  top: calc(40px + 40px);
  background: var(--general-main-1);
  max-height: 100%; }
  .dc-mobile-full-page-modal--flex {
    display: flex;
    flex-direction: column;
    flex: 1; }
  .dc-mobile-full-page-modal__header {
    align-items: center;
    display: flex;
    flex-direction: row;
    padding: 1.6rem; }
    .dc-mobile-full-page-modal__header--border-bottom {
      border-bottom: 2px solid var(--general-section-2); }
    .dc-mobile-full-page-modal__header-return {
      display: flex;
      align-items: center;
      margin-right: 1.6rem; }
    .dc-mobile-full-page-modal__header-text {
      display: flex;
      flex-direction: row; }
    .dc-mobile-full-page-modal__header-trailing-icon {
      align-items: center;
      display: flex;
      margin-left: auto; }
  .dc-mobile-full-page-modal__body {
    flex: 1;
    overflow-y: auto; }
  .dc-mobile-full-page-modal__footer {
    border-top: 2px solid var(--general-section-1);
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    margin-top: auto;
    padding: 1.6rem; }
    .dc-mobile-full-page-modal__footer-parent {
      border-top: 1px solid var(--general-section-2);
      padding: 0.8rem 1.6rem;
      background-color: var(--general-main-1); }
  .dc-mobile-full-page-modal form {
    height: 100%; }
  .dc-mobile-full-page-modal .dc-page-overlay__content {
    position: fixed;
    top: calc(40px + 40px);
    width: 100%;
    height: 100%; }
  .dc-mobile-full-page-modal .dc-page-overlay__header {
    position: fixed;
    top: 40px;
    width: 100%;
    height: 40px; }
  .dc-mobile-full-page-modal .dc-tabs {
    display: flex;
    flex-direction: column;
    height: 100%; }
    .dc-mobile-full-page-modal .dc-tabs__list {
      width: 100%;
      height: 4rem; }
    .dc-mobile-full-page-modal .dc-tabs__item {
      width: 50%; }
    .dc-mobile-full-page-modal .dc-tabs__content {
      height: calc(100% - 40px);
      z-index: 5; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-modal; weak */
.dc-modal {
  /** @define dc-modal-header */
  /** @define dc-modal-body */
  /** @define dc-modal-footer; weak */ }
  .dc-modal__container {
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    background-color: var(--general-main-2);
    box-shadow: 0 4px 6px 0 var(--shadow-menu); }
    .dc-modal__container--is-vertical-centered {
      position: absolute;
      top: 50vh;
      transform: translateY(-50%) !important; }
      .dc-modal__container--is-vertical-centered .dc-modal__container {
        min-width: unset;
        top: 2rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-centered {
          left: 2.4rem;
          width: calc(100vw - 4.8rem) !important; } }
    .dc-modal__container--is-vertical-top {
      top: 48px;
      position: absolute; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-top {
          top: 40px;
          left: 1.6rem;
          width: calc(100vw - 3.2rem) !important; } }
    .dc-modal__container--is-vertical-bottom {
      bottom: 36px;
      position: absolute; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal__container--is-vertical-bottom {
          left: 1.6rem;
          width: calc(100vw - 3.2rem) !important; } }
    .dc-modal__container--hide {
      display: none; }
    .dc-modal__container--enter, .dc-modal__container--exit {
      transform: translateY(50px);
      opacity: 0;
      pointer-events: none; }
    .dc-modal__container--enter-done {
      transform: translateY(0);
      opacity: 1;
      pointer-events: auto; }
    .dc-modal__container--small {
      max-width: 440px; }
      .dc-modal__container--small .dc-modal-header {
        border-bottom: none; }
    .dc-modal__container--is-confirmation-modal .dc-modal-header {
      border-bottom: none; }
      .dc-modal__container--is-confirmation-modal .dc-modal-header__title {
        padding: 2.4rem; }
    .dc-modal__container--is-confirmation-modal .dc-modal-body {
      padding: 0 2.4rem; }
    .dc-modal__container--is-confirmation-modal .dc-modal-footer {
      padding: 2.4rem; }
    @media (min-width: 1024px) {
      .dc-modal__container {
        min-width: 400px !important;
        max-height: calc(100vh - 48px - 36px) !important; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-modal__container {
        max-width: calc(100vw - 3.2rem) !important; } }
  .dc-modal-header {
    display: flex;
    justify-content: space-between;
    width: 100%;
    line-height: 24px;
    align-items: center; }
    .dc-modal-header__border-bottom {
      border-bottom: 2px solid var(--general-section-2); }
    .dc-modal-header__title {
      font-size: 1.6rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.75;
      color: var(--text-prominent);
      line-height: 24px;
      padding: 1.6rem 2.4rem;
      display: flex;
      align-items: center;
      height: 100%; }
      .dc-modal-header__title:empty {
        padding: 0;
        border: none; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal-header__title {
          font-size: 1.4rem;
          padding: 1.6rem;
          line-height: 1.2; } }
    .dc-modal-header__section {
      flex-grow: 1;
      padding: 1.6rem;
      line-height: 24px;
      display: flex;
      align-items: center; }
    .dc-modal-header__close {
      display: block;
      cursor: pointer;
      padding: 0.6rem 0.8rem;
      height: 30px;
      width: 32px;
      margin: 1.2rem 1.6rem 1.2rem auto; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-modal-header__close {
          margin: 0.8rem; } }
    .dc-modal-header--is-title-centered {
      justify-content: flex-end;
      position: relative; }
      .dc-modal-header--is-title-centered .dc-modal-header__title {
        justify-content: center;
        width: 100%; }
        @media (min-width: 320px) and (max-width: 767px) {
          .dc-modal-header--is-title-centered .dc-modal-header__title {
            position: absolute; } }
      .dc-modal-header--is-title-centered .dc-modal-header__close {
        z-index: 1; }
    @media not all and (min-resolution: 0.001dpcm) {
      @supports (-webkit-appearance: none) {
        .dc-modal-header {
          /* postcss-bem-linter: ignore */
          min-height: 4.8rem; } } }
  .dc-modal-body {
    padding: 2.4rem;
    font-size: 1.4rem;
    line-height: 1.43;
    color: var(--text-prominent); }
    .dc-modal-body:first-child {
      padding-top: 2.4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-modal-body {
        font-size: 1.2rem;
        padding: 0.8rem 2.4rem; } }
  .dc-modal-footer {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem;
    margin-top: auto; }
    .dc-modal-footer .dc-btn {
      margin: 0 0.8rem; }
      .dc-modal-footer .dc-btn:last-child {
        margin: 0; }
    .dc-modal-footer--separator {
      border-top: 2px solid var(--general-section-1); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define multi-step; weak */
.multi-step {
  width: inherit;
  height: inherit; }
  .multi-step__header {
    display: flex;
    align-items: center;
    margin: 2.4rem 1.6rem; }
  .multi-step__btn {
    display: flex;
    font-size: 1.4rem;
    font-weight: bold;
    cursor: pointer;
    color: var(--text-general); }
    .multi-step__btn-icon {
      margin-right: 8px; }
      .multi-step__btn-icon .color1-fill {
        fill: var(--text-general); }
  .multi-step__component {
    width: 100%;
    height: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
@-webkit-keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0); }
  100% {
    transform: translate3d(-100%, 0, 0); } }
@keyframes dc-news-ticker {
  0% {
    transform: translate3d(100%, 0, 0); }
  100% {
    transform: translate3d(-100%, 0, 0); } }

@-webkit-keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0); }
  100% {
    transform: translate3d(-200%, 0, 0); } }

@keyframes dc-news-ticker-2 {
  0% {
    transform: translate3d(0, 0, 0); }
  100% {
    transform: translate3d(-200%, 0, 0); } }

.dc-news-ticker {
  display: flex;
  white-space: nowrap;
  overflow: hidden; }
  .dc-news-ticker__children {
    -webkit-animation-iteration-count: infinite;
            animation-iteration-count: infinite;
    -webkit-animation-name: dc-news-ticker;
            animation-name: dc-news-ticker;
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    will-change: transform; }
    .dc-news-ticker__children:nth-child(2) {
      -webkit-animation-name: dc-news-ticker-2;
              animation-name: dc-news-ticker-2; }
  .dc-news-ticker__item {
    display: inline-block; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* S: Steps
   N: Number
   B: Backspace
   O: Ok
   Z: Zero
 */
.dc-numpad {
  box-sizing: border-box;
  display: grid;
  grid-gap: 0.3rem;
  grid-template-columns: repeat(4, 1fr); }
  .dc-numpad--is-regular {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z z o';
    grid-template-columns: -webkit-min-content -webkit-min-content -webkit-min-content minmax(48px, 1fr);
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -webkit-min-content;
    max-width: -moz-min-content;
    max-width: min-content; }
  .dc-numpad--is-currency {
    grid-template-areas: 'np np np np' 'r3 r3 r3 b' 'r2 r2 r2 b' 'r1 r1 r1 o' 'z z p o';
    grid-template-columns: -webkit-min-content -webkit-min-content -webkit-min-content minmax(48px, 1fr);
    grid-template-columns: min-content min-content min-content minmax(48px, 1fr);
    max-width: -webkit-min-content;
    max-width: -moz-min-content;
    max-width: min-content; }
  .dc-numpad__input-area {
    display: grid;
    grid-area: np;
    grid-template-areas: 'dc inp inp nc';
    grid-template-columns: -webkit-min-content 1fr 1fr -webkit-min-content;
    grid-template-columns: min-content 1fr 1fr min-content; }
  .dc-numpad__decrement {
    grid-area: dc;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0; }
  .dc-numpad__increment {
    grid-area: nc;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0; }
  .dc-numpad__increment, .dc-numpad__decrement {
    width: 48px;
    height: 48px; }
  .dc-numpad__input-field, .dc-numpad__increment, .dc-numpad__decrement {
    background-color: var(--general-section-2);
    color: var(--text-prominent); }
  .dc-numpad__input-field {
    grid-area: inp;
    padding: 0;
    margin: 0 !important;
    border: none;
    border-radius: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    color: var(--text-prominent); }
    .dc-numpad__input-field input {
      padding: 0;
      max-height: 48px; }
    .dc-numpad__input-field--has-error {
      color: var(--status-danger);
      font-weight: bold; }
  .dc-numpad__number {
    border-radius: 2.4rem;
    background-color: var(--general-section-2);
    width: 48px;
    height: 48px;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    color: var(--text-prominent);
    text-align: left !important; }
    .dc-numpad__number--is-disabled, .dc-numpad__number[disabled] {
      background-color: var(--general-disabled) !important;
      pointer-events: none;
      touch-action: none; }
    .dc-numpad__number--r3 {
      grid-row: 2 / 2; }
    .dc-numpad__number--r2 {
      grid-row: 3 / 3; }
    .dc-numpad__number--r1 {
      grid-row: 4 / 4; }
    .dc-numpad__number--zero {
      grid-area: z;
      width: 100% !important; }
    .dc-numpad__number--is-left-aligned {
      text-align: left;
      width: 100%;
      padding: 0 0 0 4px; }
  .dc-numpad__dot {
    grid-area: p; }
  .dc-numpad__bkspace {
    grid-area: b; }
    .dc-numpad__bkspace button {
      height: 100%; }
  .dc-numpad__ok {
    grid-area: o; }
    .dc-numpad__ok button {
      height: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-page-error */
.dc-page-error__container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: calc(100vh - 84px); }
  @media (min-width: 1024px) {
    .dc-page-error__container--left {
      justify-content: left; } }

.dc-page-error__box {
  background: var(--general-main-1);
  border: var(--general-main-1);
  padding: 2rem;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  /* postcss-bem-linter: ignore */ }
  @media (min-width: 1024px) {
    .dc-page-error__box--left {
      align-items: start; } }
  @media screen and (min-width: 1008px) {
    .dc-page-error__box {
      max-width: calc(100vw - 45%); } }
  .dc-page-error__box .inline-icon {
    margin: 0 auto; }

.dc-page-error__header {
  font-size: 3.2rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: unset;
  color: var(--text-prominent);
  line-height: 44px; }

.dc-page-error__message {
  font-size: 1.6rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  max-width: 502px;
  margin: 1.6rem 0 2.4rem; }
  .dc-page-error__message-wrapper {
    display: flex;
    justify-content: center; }
    @media (min-width: 1024px) {
      .dc-page-error__message-wrapper--left {
        justify-content: left; } }
    .dc-page-error__message-wrapper--left .dc-page-error__message-paragraph:not(:last-child) {
      margin-bottom: 1.6rem;
      max-width: 38rem; }
  @media (min-width: 1024px) {
    .dc-page-error__message--left {
      text-align: left; } }

.dc-page-error__btn {
  margin: 0 1rem;
  min-width: 14rem; }
  .dc-page-error__btn-wrapper {
    display: flex;
    justify-content: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-error__btn {
      margin: 0 0 1.6rem; }
      .dc-page-error__btn-wrapper {
        flex-direction: column; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-page-overlay-portal {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 48px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
  background-color: var(--general-main-2);
  opacity: 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay-portal {
      top: 40px; } }

.dc-page-overlay--enter, .dc-page-overlay--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none; }

.dc-page-overlay--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto; }

.dc-page-overlay__header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  z-index: 2;
  background-color: var(--general-main-1);
  padding: 0.8rem 2.4rem;
  border-bottom: 1px solid var(--general-section-1); }
  .dc-page-overlay__header-title {
    flex: 1;
    text-align: center;
    font-size: var(--text-size-m);
    color: var(--text-prominent);
    font-weight: bold;
    line-height: 1.5; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-title {
        font-size: 1.6rem; } }
  .dc-page-overlay__header-close {
    cursor: pointer;
    height: 16px;
    position: absolute;
    right: 0; }
    .dc-page-overlay__header-close .dc-icon {
      --fill-color1: var(--text-prominent); }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-close {
        right: 1.2rem; } }
  .dc-page-overlay__header-wrapper {
    width: 100%;
    display: flex;
    align-items: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-page-overlay__header-wrapper {
        height: 100%;
        padding: 0; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__header {
      height: 4rem;
      z-index: 3;
      padding: 0;
      margin: 0; } }

.dc-page-overlay__content {
  padding: 2.4rem 0 0;
  display: flex;
  background-color: var(--general-main-1); }
  .dc-page-overlay__content-side-note {
    min-width: 256px;
    margin-left: 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__content {
      flex: 1;
      padding: 0; } }

.dc-page-overlay__header-wrapper, .dc-page-overlay__content {
  max-width: 1232px;
  margin: auto;
  position: relative; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-page-overlay__header-wrapper, .dc-page-overlay__content {
      width: 100%; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-page-overlay {
    display: flex;
    flex-direction: column;
    height: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-password-input__visibility-icon {
  cursor: pointer; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-password-meter {
  transition: transform 0.25s linear;
  background: var(--status-danger);
  transform-origin: left top;
  z-index: 2; }
  .dc-password-meter, .dc-password-meter__bg {
    position: absolute;
    bottom: 1px;
    left: 1px;
    height: 4px;
    border-radius: 0 0 3px 3px;
    width: calc(100% - 2px); }
  .dc-password-meter__bg {
    z-index: 1;
    background: var(--fill-disabled); }
  .dc-password-meter__container {
    position: relative; }
    .dc-password-meter__container .dc-input {
      border-radius: 4px; }
    .dc-password-meter__container .dc-password-meter__warning {
      color: var(--status-warning);
      top: 4.1rem;
      padding-left: 1.3rem; }
  .dc-password-meter--weak {
    background-color: var(--status-danger);
    z-index: 2; }
  .dc-password-meter--strong {
    background-color: var(--status-success);
    z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tabs {
  position: relative;
  display: grid; }
  .dc-tabs--top {
    grid-template-rows: auto 1fr; }
  .dc-tabs--100vw {
    width: 100vw; }
  .dc-tabs__list {
    width: 100%;
    line-height: 38px;
    display: flex;
    position: relative; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__list {
        justify-content: center; } }
    .dc-tabs__list--border-bottom {
      border-bottom: 2px solid var(--general-section-1); }
    .dc-tabs__list--top {
      order: 0; }
    .dc-tabs__list--bottom {
      order: 1;
      border-top: 2px solid var(--general-section-1); }
    .dc-tabs__list--center {
      justify-content: center;
      width: -webkit-fit-content;
      width: -moz-fit-content;
      width: fit-content;
      margin: auto; }
      .dc-tabs__list--center .dc-tabs__item {
        padding: 0 2.2rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__list--fit-content {
        width: -webkit-fit-content;
        width: -moz-fit-content;
        width: fit-content; } }
    .dc-tabs__list--header-fit-content {
      width: -webkit-fit-content;
      width: -moz-fit-content;
      width: fit-content; }
    .dc-tabs__list:not(.dc-tabs__list--header-fit-content) {
      justify-content: center; }
  .dc-tabs__item {
    list-style: none;
    font-size: 14px;
    text-align: center;
    white-space: nowrap;
    color: var(--text-general);
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent; }
    .dc-tabs__item__counter {
      margin-top: -2rem;
      vertical-align: middle; }
    .dc-tabs__item__icon {
      padding-right: 0.7rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-tabs__item__icon {
          padding-right: 0;
          padding-top: 0.5rem; } }
    .dc-tabs__item--header-fit-content {
      padding: 0px 29px; }
    .dc-tabs__item--is-hidden {
      display: none; }
    .dc-tabs__item:not(.dc-tabs__active) {
      cursor: pointer;
      color: var(--text-general); }
    .dc-tabs__item:not(.dc-tabs__item--header-fit-content) {
      width: var(--tab-width); }
  .dc-tabs__active {
    font-weight: 700;
    color: var(--text-prominent); }
  .dc-tabs__active-line {
    display: block;
    position: absolute;
    left: 0;
    height: 2px;
    background: var(--brand-red-coral);
    transition: all ease-in-out 0.3s; }
    .dc-tabs__active-line--top {
      bottom: -2px; }
    .dc-tabs__active-line--bottom {
      top: -2px; }
    .dc-tabs__active-line--is-hidden {
      display: none; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-tabs__active-line--fit-content {
        width: 120px; } }
    .dc-tabs__active-line:not(.dc-tabs__active-line--header-fit-content) {
      width: var(--tab-width); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-popup-header {
  padding: 0; }
  .dc-popup-header__close-icon {
    position: absolute;
    right: 2%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-header__close-icon {
        right: 4%; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-popup-header__title {
      display: flex;
      flex-direction: row;
      align-items: center; } }
  .dc-popup-header__content {
    display: flex;
    align-items: center; }
  .dc-popup-header__icon {
    position: absolute;
    right: 4%; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-header__icon {
        right: 10%; } }
  .dc-popup-header__button {
    margin: 0 1.6em !important;
    width: 13rem !important; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-header__button {
        margin: 0 2.6em !important;
        width: 3.2rem !important; } }
  .dc-popup-header__banner {
    background-color: var(--status-warning);
    border-radius: 100px;
    padding: 0.4rem 0.8rem;
    height: 2.2rem;
    display: flex;
    align-items: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-header__banner {
        background-color: var(--general-main-1);
        margin-right: 1.6rem;
        margin-left: 1.6rem; } }

.dc-popup-body {
  padding: 0 !important; }
  .dc-popup-body .dc-tabs__content--popup {
    background: var(--general-main-1); }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-popup-body .dc-tabs__list--header--popup {
      overflow-y: hidden;
      -ms-overflow-style: none;
      /* IE and Edge */
      scrollbar-width: none;
      /* Firefox */ } }
  @media (min-width: 320px) and (max-width: 767px) and (min-width: 27.5rem) {
    .dc-popup-body .dc-tabs__list--header--popup {
      overflow-x: hidden; } }
  @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-body .dc-tabs__list--header--popup::-webkit-scrollbar {
        display: none;
        /* Chrome Safari */ } }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-popup-body .dc-tabs__list--popup {
      height: 5.8rem !important; } }
  @media (min-width: 320px) and (max-width: 767px) and (max-width: 27.5rem) {
    .dc-popup-body .dc-tabs__list--popup {
      margin-right: 4.2rem;
      width: 123% !important; } }
  .dc-popup-body .dc-tabs__item--popup {
    border-radius: 16px 16px 0px 0px;
    height: 4.4rem;
    display: flex;
    align-items: center;
    justify-content: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-popup-body .dc-tabs__item--popup {
        height: 5.8rem;
        width: 8.2rem !important;
        flex-direction: column;
        font-size: 12px;
        box-sizing: border-box; } }
  .dc-popup-body .dc-tabs__active--popup {
    background: var(--general-main-1); }

.dc-popup-footer {
  display: flex;
  justify-content: flex-end;
  padding: 1.6rem;
  position: fixed;
  width: 100%;
  bottom: 0; }
  .dc-popup-footer__separator {
    border-top: 2px solid var(--general-section-1); }

.dc-modal-header--popup {
  height: 12.4rem;
  align-items: flex-start; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-modal-header--popup {
      height: 7.8rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal-header__title--popup {
    align-items: flex-start; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-bar */
.dc-progress-bar__container {
  height: 2.4rem;
  width: 12rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 1.2rem;
  position: relative;
  overflow: hidden; }

.dc-progress-bar--danger {
  background-color: var(--status-danger); }

.dc-progress-bar--warning {
  background-color: var(--status-warning); }

.dc-progress-bar--normal {
  background-color: var(--status-success); }

.dc-progress-bar__bar {
  height: 100%;
  position: absolute;
  left: 0; }

.dc-progress-bar__empty {
  width: 100%;
  position: absolute;
  opacity: 0.16;
  height: 100%; }

.dc-progress-bar__label {
  z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-progress-indicator */
.dc-progress-indicator {
  position: relative; }
  .dc-progress-indicator__container {
    height: 0.4rem;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    position: relative;
    overflow: hidden; }
  .dc-progress-indicator__bar {
    z-index: 2;
    background-color: var(--status-success);
    height: 100%;
    position: absolute;
    left: 0; }
  .dc-progress-indicator__empty {
    z-index: 1;
    background-color: var(--general-section-1);
    width: 100%;
    height: 100%;
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-radio-group {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  margin-top: 16px; }
  .dc-radio-group__input {
    display: none; }
  .dc-radio-group__item {
    display: flex;
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    cursor: pointer;
    color: var(--text-general); }
  .dc-radio-group__item:not(:last-child) {
    margin-right: 16px; }
  .dc-radio-group__circle {
    border: 2px solid var(--text-general);
    border-radius: 50%;
    box-shadow: 0 0 1px 0 var(--shadow-menu);
    width: 16px;
    height: 16px;
    transition: all 0.3s ease-in-out;
    margin-right: 8px;
    align-self: center; }
    .dc-radio-group__circle--disabled {
      border-color: var(--border-disabled); }
    .dc-radio-group__circle--selected {
      border-width: 4px;
      border-color: var(--brand-red-coral); }
  .dc-radio-group__label--disabled {
    color: var(--text-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-read-more__toggle {
  color: var(--status-danger);
  font-weight: var(--text-weight-bold); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-real-wallet-card {
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  .dc-real-wallet-card__actions-container {
    align-self: center;
    display: flex;
    flex-direction: row;
    height: 4.3rem;
    justify-content: space-between;
    width: calc(100% - 3.2rem); }
    .dc-real-wallet-card__actions-container--temporarily-unavailable {
      height: unset; }
  .dc-real-wallet-card__action {
    align-items: center;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.25s ease-in-out; }
    .dc-real-wallet-card__action--icon {
      border: 0.33px solid var(--general-main-1);
      border-radius: 0.8rem;
      padding: 0.24rem;
      transform: scale(1.6);
      transition: transform 0.25s ease-in-out; }
    .dc-real-wallet-card__action--text {
      display: flex;
      padding-top: 0.4rem;
      transform: scale(1);
      transition: transform 0.25s ease-in-out; }
  .dc-real-wallet-card__content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 0 1.6rem; }
    .dc-real-wallet-card__content--no-footer {
      justify-content: flex-end;
      padding-bottom: 1.6rem; }
  .dc-real-wallet-card__footer--temporarily-unavailable {
    align-items: center;
    align-self: center;
    background: var(--status-warning);
    border-radius: 1.6rem;
    display: flex;
    height: 2.2rem;
    justify-content: center;
    margin: 0 1rem 0.8rem;
    width: calc(100% - 2rem); }
  .dc-real-wallet-card__footer--deposit {
    align-self: flex-end;
    border-radius: 2.1rem;
    height: 2.4rem;
    margin: 0 1.6rem 1.6rem;
    width: 7.1rem; }
    .dc-real-wallet-card__footer--deposit .dc-btn__icon {
      padding-right: 0.3rem; }
  .dc-real-wallet-card__header {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem 1.6rem 0.4rem; }
    .dc-real-wallet-card__header--icon {
      height: 4rem;
      width: 6.4rem; }
    .dc-real-wallet-card__header--selected {
      justify-content: space-between; }
  .dc-real-wallet-card--linked {
    border: 4px solid var(--status-info); }
  .dc-real-wallet-card--no-funds {
    background: rgba(255, 255, 255, 0.32);
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-select-native {
  width: 100%;
  position: relative; }
  .dc-select-native--hide-selected-value {
    margin-left: 10px;
    width: 40px; }
    .dc-select-native--hide-selected-value .dc-select-native__wrapper {
      width: 40px; }
  .dc-select-native__wrapper {
    height: 38px; }
    .dc-select-native__wrapper .dc-input {
      margin-bottom: 0px; }
  .dc-select-native__arrow {
    position: absolute;
    right: 1.2rem;
    top: 1.2rem;
    --fill-color1: var(--text-less-prominent); }
  .dc-select-native__display {
    height: 38px;
    width: 100%;
    max-width: calc(100vw - 4rem);
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding-left: 1.2rem; }
    .dc-select-native__display-text {
      color: var(--text-prominent);
      font-size: 1.4rem;
      white-space: nowrap;
      overflow: hidden;
      max-width: calc(100% - 4rem);
      text-overflow: ellipsis;
      display: block;
      height: 100%;
      line-height: 3.8rem; }
  .dc-select-native__placeholder {
    position: absolute;
    left: 1rem;
    top: 1rem;
    pointer-events: none;
    transition: transform 0.25s linear;
    padding: 0 0.4rem;
    font-size: 1.4rem;
    transform: none;
    background-color: var(--fill-normal);
    color: var(--text-less-prominent);
    transform-origin: top left;
    line-height: 1.43;
    white-space: nowrap;
    max-width: calc(100% - 3.6rem);
    text-overflow: ellipsis;
    overflow: hidden; }
    .dc-select-native__placeholder--has-value {
      transform: translate(0, -1.8rem) scale(0.75);
      color: var(--text-general);
      max-width: 100%; }
    .dc-select-native__placeholder--disabled {
      color: var(--text-disabled); }
  .dc-select-native__picker {
    opacity: 0;
    width: 100%;
    height: 38px;
    left: 0;
    top: 0;
    position: absolute; }
  .dc-select-native--disabled .dc-select-native__display-text {
    color: var(--text-disabled); }
  .dc-select-native--disabled .dc-select-native__placeholder:not(.dc-select-native__placeholder--has-value) {
    color: var(--text-disabled); }
  .dc-select-native--disabled .dc-icon {
    --fill-color1: var(--text-disabled); }
  .dc-select-native--error .dc-select-native__placeholder {
    color: var(--brand-red-coral); }
  .dc-select-native__hint {
    margin-left: 1.2rem; }
  .dc-select-native__suffix-icon {
    position: absolute;
    left: 11px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define send-email-template */
.send-email-template {
  padding: 0 16px; }
  .send-email-template__title {
    color: var(--text-prominent);
    font-size: 1.6rem;
    font-weight: bold;
    margin-bottom: 0.8rem;
    line-height: 1.5; }
  .send-email-template__subtitle {
    margin-bottom: 1.6rem; }
  .send-email-template__icon {
    margin-top: 5.6rem;
    margin-bottom: 1.6rem; }
  .send-email-template__sent, .send-email-template__cta {
    text-align: center; }
  .send-email-template__cta-btn {
    margin: 3.2rem auto 0; }
  .send-email-template__btn {
    margin: 0 auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .send-email-template {
      margin-bottom: 1.6rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-swipeable {
  position: relative;
  height: 100%; }
  .dc-swipeable__view {
    display: flex;
    flex-direction: row;
    transition: transform 0.1s linear;
    width: -webkit-max-content;
    width: -moz-max-content;
    width: max-content;
    height: inherit; }
  .dc-swipeable__item {
    position: relative;
    display: inline-flex;
    width: 100vw; }
    .dc-swipeable__item--is-disabled .dc-swipeable__view {
      transform: translateX(-100vw);
      transition: none; }
  .dc-swipeable__nav {
    position: absolute;
    bottom: 0;
    width: 100vw;
    z-index: 3;
    display: flex;
    padding: 1.6rem 0.8rem;
    justify-content: space-between; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-relative-datepicker {
  width: 100%;
  text-align: center;
  padding-bottom: 16px;
  position: relative; }
  .dc-relative-datepicker__span {
    width: 100%;
    cursor: pointer; }
  .dc-relative-datepicker__input {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-table {
  color: var(--text-general);
  background: inherit; }
  .dc-table__row {
    display: grid;
    border-bottom: 1px solid var(--general-section-1);
    height: 100%; }
    .dc-table__row--hover:hover {
      background-color: var(--general-section-1);
      cursor: pointer; }
  .dc-table__header {
    border-bottom: 2px solid var(--general-section-1);
    height: 52px; }
  .dc-table__cell, .dc-table__head {
    font-size: 1.4rem;
    line-height: 1.43;
    display: flex;
    align-items: center;
    white-space: unset;
    text-align: left;
    -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
    word-wrap: break-word;
    word-break: break-word;
    word-wrap: break-word; }
  .dc-table__cell--right {
    display: flex;
    justify-content: flex-end; }
  .dc-table__cell--fixed {
    position: -webkit-sticky;
    position: sticky;
    left: 0;
    z-index: 2; }
  .dc-table__head {
    font-weight: bold; }
    .dc-table__head--right {
      display: flex;
      justify-content: flex-end; }
  .dc-table--scroll .dc-table__header {
    position: -webkit-sticky;
    position: sticky;
    top: 0;
    z-index: 3; }
  .dc-table--scrollbar {
    display: block; }
    @supports (-webkit-hyphens: none) {
      .dc-table--scrollbar {
        display: unset; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-toast; */
.dc-toast {
  width: 100vw;
  transition: transform 0.25s ease, opacity 0.25s linear;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none; }
  .dc-toast__message {
    max-width: calc(100vw - 3.2rem);
    padding: 0.4rem 0.8rem;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: var(--text-colored-background);
    border-radius: 4px;
    min-height: 34px;
    display: flex;
    align-items: center;
    pointer-events: all; }
  .dc-toast__error .dc-toast__message {
    background-color: var(--status-danger); }
  .dc-toast__info .dc-toast__message {
    background: var(--status-info);
    font-size: 1.2rem;
    /* iPhone SE screen height fixes due to UI space restrictions */ }
    @media only screen and (max-height: 580px) {
      .dc-toast__info .dc-toast__message {
        font-size: 1rem; } }
  .dc-toast--enter, .dc-toast--exit {
    transform: scale(1, 0);
    opacity: 0; }
  .dc-toast--enter-done {
    transform: scale(1, 1);
    opacity: 1; }
  .dc-toast--blinker .dc-toast__message {
    -webkit-animation: toast_blinking 0.4s alternate infinite;
            animation: toast_blinking 0.4s alternate infinite; }
  .dc-toast:not(:first-child) {
    margin-top: 1rem; }

@-webkit-keyframes toast_blinking {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes toast_blinking {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-toggle-switch {
  height: 0;
  width: 0;
  visibility: hidden; }
  .dc-toggle-switch__label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    width: 100px;
    height: 50px;
    background: var(--general-disabled);
    border-radius: 100px;
    position: relative;
    transition: background-color 0.25s; }
    .dc-toggle-switch__label:active .dc-toggle-switch__button {
      width: 55%; }
  .dc-toggle-switch__button {
    content: '';
    position: absolute;
    top: 6px;
    left: 8px;
    width: 37%;
    height: 75%;
    border-radius: 50%;
    transition: 0.25s;
    background: var(--text-colored-background); }
  .dc-toggle-switch:checked + .dc-toggle-switch__label {
    background: var(--text-profit-success); }
  .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
    left: calc(100% - 8px);
    transform: translateX(-100%); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tick-picker {
  width: 100%;
  max-width: 300px;
  height: 328px;
  background-color: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-end; }
  .dc-tick-picker div {
    display: flex; }
  .dc-tick-picker__calculation {
    margin-bottom: 28px;
    justify-content: space-evenly;
    align-items: center; }
    .dc-tick-picker__calculation .dc-tick-picker__holder {
      color: var(--purchase-main-2);
      flex-direction: column;
      justify-content: center;
      text-align: center;
      margin: 0 1.4rem; }
    .dc-tick-picker__calculation .operator {
      background-color: var(--general-section-2);
      width: 48px;
      height: 48px; }
      .dc-tick-picker__calculation .operator .dc-btn__text {
        transform: scale(2); }
  .dc-tick-picker__submit-wrapper {
    margin-bottom: 1.6rem;
    justify-content: center; }
    .dc-tick-picker__submit-wrapper button {
      background-color: var(--general-section-2);
      height: 48px;
      width: 112px; }
      .dc-tick-picker__submit-wrapper button span {
        color: var(--text-prominent);
        font-size: 1.6rem; }
    .dc-tick-picker__submit-wrapper--is-disabled {
      pointer-events: none; }
      .dc-tick-picker__submit-wrapper--is-disabled .dc-btn {
        background-color: var(--general-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-timeline__flex {
  display: flex;
  border-left: var(--brand-red-coral) solid 1px;
  position: relative; }
  .dc-timeline__flex--no-border {
    border-left: unset; }

.dc-timeline__container {
  margin-top: 4px;
  margin-left: 20px; }

.dc-timeline__title {
  max-width: 500px;
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5; }

.dc-timeline__oval {
  width: 24px;
  height: 24px;
  line-height: 2.35rem;
  background-color: var(--brand-red-coral);
  border-radius: 50%;
  text-align: center;
  margin-right: 8px;
  position: absolute;
  padding-left: 1px;
  left: -13px; }

.dc-timeline__content {
  margin: 16px 0;
  color: var(--text-prominent); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* Loading Spinner */
/** @define block-ui */
.block-ui {
  position: absolute;
  z-index: 3;
  top: 0;
  left: 0.2em;
  right: 0;
  bottom: 0;
  width: calc(100% - 4px);
  height: 100%;
  background: var(--overlay-inside-dialog); }
  .block-ui__loading {
    position: absolute;
    top: calc(50% - 22px);
    left: calc(50% - 16px);
    z-index: 11; }
    .block-ui__loading-spinner {
      position: relative;
      margin: 0 auto;
      width: 4.2em; }
      .block-ui__loading-spinner:before {
        content: '';
        display: block;
        padding-top: 100%; }
      .block-ui__loading-spinner-circular {
        -webkit-animation: rotate 2s linear infinite;
                animation: rotate 2s linear infinite;
        height: 100%;
        transform-origin: center center;
        width: 100%;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto; }
      .block-ui__loading-spinner-path {
        stroke-dasharray: 1, 200;
        stroke-dashoffset: 0;
        -webkit-animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
                animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
        stroke-linecap: round; }

/* Spinner Loader Animation */
@-webkit-keyframes rotate {
  100% {
    transform: rotate(360deg); } }
@keyframes rotate {
  100% {
    transform: rotate(360deg); } }

@-webkit-keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px; } }

@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px; } }

@-webkit-keyframes colorRed {
  100%,
  0% {
    stroke: var(--brand-red-coral); } }

@keyframes colorRed {
  100%,
  0% {
    stroke: var(--brand-red-coral); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-vertical-tab {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  border-radius: 4px;
  height: 100%; }
  .dc-vertical-tab:not(.dc-vertical-tab--floating) {
    background-color: var(--general-section-1); }
  .dc-vertical-tab--floating {
    justify-content: center; }
  .dc-vertical-tab__content-container, .dc-vertical-tab__content-inner {
    position: relative;
    z-index: 0;
    height: 100%;
    width: 100%;
    display: flex; }
  .dc-vertical-tab__content-container {
    flex-flow: column nowrap;
    flex-grow: 1; }
  .dc-vertical-tab--full-screen {
    min-height: calc(100vh - 84px);
    width: 100%; }
  .dc-vertical-tab--full-screen.dc-vertical-tab--floating {
    min-height: calc( 100vh - 48px - 36px - 53px - 2.4rem); }
  .dc-vertical-tab:not(.dc-vertical-tab--full-screen):not(.dc-vertical-tab--floating) .dc-vertical-tab__content {
    padding: 2.4rem; }
  .dc-vertical-tab__action-bar {
    width: 100%;
    display: flex;
    flex-flow: row-reverse nowrap;
    justify-content: space-between;
    align-items: center;
    padding: 1.6rem;
    box-sizing: border-box; }
    .dc-vertical-tab__action-bar-wrapper {
      cursor: pointer;
      padding: 0.4rem 0.4rem 0.2rem;
      border-radius: 4px;
      margin-left: auto; }
      .dc-vertical-tab__action-bar-wrapper:hover {
        background: var(--general-hover); }
  .dc-vertical-tab__tab {
    display: flex;
    min-width: 28%;
    height: 100%;
    flex-direction: column;
    border-radius: 4px 0 0 4px;
    background-color: var(--general-section-1);
    position: relative; }
    .dc-vertical-tab__tab--floating {
      min-width: 256px;
      padding: 0.8rem;
      border-radius: 8px; }
      .dc-vertical-tab__tab--floating .dc-vertical-tab__header--highlight {
        width: calc(100% - 1.6rem);
        border-radius: 4px; }
    .dc-vertical-tab__tab-meta-wrapper--floating {
      position: -webkit-sticky;
      position: sticky;
      top: calc(2.4rem + 41px); }
    .dc-vertical-tab__tab-bottom-note {
      position: -webkit-sticky;
      position: sticky;
      margin-top: 1.6rem; }
  .dc-vertical-tab__header-title {
    padding: 1.6rem;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none; }
  .dc-vertical-tab--grouped .dc-vertical-tab__header {
    padding-left: 4.4rem; }
    .dc-vertical-tab--grouped .dc-vertical-tab__header--highlight {
      z-index: -1; }
    .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
      padding-left: 4.8rem; }
  .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
    margin-right: 2rem; }
  .dc-vertical-tab__header-group-chevron {
    position: absolute;
    right: 2.4rem;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1); }
    .dc-vertical-tab__header-group-chevron--invert {
      transform: rotate(180deg); }
  .dc-vertical-tab__header, .dc-vertical-tab__header-group {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    line-height: 1.5;
    color: var(--text-general);
    padding: 1rem 1.2rem 1rem 1.6rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none;
    z-index: 1;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none; }
    .dc-vertical-tab__header:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active), .dc-vertical-tab__header-group:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active) {
      background-color: var(--state-hover); }
    .dc-vertical-tab__header__link, .dc-vertical-tab__header-group__link {
      font-weight: normal;
      margin-right: 0.4rem; }
    .dc-vertical-tab__header__icon, .dc-vertical-tab__header-group__icon {
      margin-right: 1.6rem; }
      .dc-vertical-tab__header__icon--active, .dc-vertical-tab__header-group__icon--active {
        --fill-color1: var(--text-prominent); }
    .dc-vertical-tab__header__counter, .dc-vertical-tab__header-group__counter {
      margin-left: 1rem; }
    .dc-vertical-tab__header--active .dc-vertical-tab__header__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header__link, .dc-vertical-tab__header--active .dc-vertical-tab__header-group__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header-group__link {
      color: var(--text-prominent);
      font-weight: bold; }
    .dc-vertical-tab__header--highlight, .dc-vertical-tab__header-group--highlight {
      position: absolute;
      display: block;
      content: '';
      color: var(--text-prominent);
      background-color: var(--state-normal);
      border-left: 4px solid var(--brand-red-coral);
      width: 100%;
      height: 41px;
      transform: translate3d(0, 0, 0);
      z-index: 0; }
    .dc-vertical-tab__header--new, .dc-vertical-tab__header-group--new {
      font-size: 1rem;
      font-weight: bold;
      padding: 0 0.4rem;
      margin: 0 0.4rem;
      background-color: var(--text-loss-danger);
      color: var(--status-colored-background);
      border-radius: 8px; }
    .dc-vertical-tab__header--floating, .dc-vertical-tab__header-group--floating {
      border-radius: 4px; }
  .dc-vertical-tab__content {
    width: 100%;
    height: 100%;
    min-height: inherit;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    border-radius: 0 4px 4px 0;
    position: relative;
    background-color: var(--general-main-1); }
    .dc-vertical-tab__content-side-note {
      max-width: 256px;
      margin-left: 2.4rem; }
      .dc-vertical-tab__content-side-note-item {
        background-color: var(--general-section-1);
        border-radius: 8px;
        padding: 1.6rem 2.4rem;
        color: var(--text-general);
        font-size: var(--text-size-xxs);
        line-height: 1.5;
        margin-bottom: 1rem; }
    .dc-vertical-tab__content.dc-vertical-tab:not(.dc-vertical-tab--full-screen) {
      padding: 2.4rem;
      height: 100%; }
    .dc-vertical-tab__content--floating {
      max-width: 952px;
      min-width: 672px;
      margin-left: 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-virtual-wallet-card {
  background: var(--wallet-virtual);
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  .dc-virtual-wallet-card__actions-container {
    display: flex;
    flex-direction: row;
    height: 4.3rem;
    justify-content: space-between;
    padding-left: 1.6rem;
    width: calc(100% - 18rem); }
  .dc-virtual-wallet-card__action {
    align-items: center;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.25s ease-in-out; }
    .dc-virtual-wallet-card__action--icon {
      border: 0.33px solid var(--general-main-1);
      border-radius: 0.8rem;
      padding: 0.24rem;
      transform: scale(1.6);
      transition: transform 0.25s ease-in-out; }
    .dc-virtual-wallet-card__action--text {
      display: flex;
      padding-top: 0.4rem;
      transform: scale(1);
      transition: transform 0.25s ease-in-out; }
  .dc-virtual-wallet-card__content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 0 1.6rem; }
    .dc-virtual-wallet-card__content--no-footer {
      justify-content: flex-end;
      padding-bottom: 1.6rem; }
  .dc-virtual-wallet-card__header {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem 1.6rem 0.4rem; }
    .dc-virtual-wallet-card__header--icon {
      height: 4rem;
      width: 6.4rem; }
  .dc-virtual-wallet-card--no-funds {
    background: rgba(255, 255, 255, 0.32);
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.wizard {
  width: inherit;
  height: inherit; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define toast-messages; */
.toast-messages {
  position: absolute;
  z-index: 1000;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  @media (min-width: 320px) and (max-width: 767px) {
    .toast-messages {
      top: 2rem;
      height: calc(100vh - 2rem); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.theme-select-settings {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%; }
  .theme-select-settings__title {
    font-weight: bold;
    font-size: 14px;
    color: var(--text-general);
    margin-bottom: 16px; }
  .theme-select-settings__content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    width: 100%; }
  .theme-select-settings__option {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 234px;
    height: 207px; }
    .theme-select-settings__option__title {
      margin-top: 9px;
      font-size: 14px;
      line-height: 1.43;
      color: var(--text-general); }
      .theme-select-settings__option__title--selected {
        font-weight: bold;
        color: var(--text-prominent); }
    .theme-select-settings__option__icon {
      width: 234px;
      height: 178px;
      cursor: pointer;
      border-radius: 4px;
      border: 1px solid var(--border-normal); }
      .theme-select-settings__option__icon:hover:not(.theme-select-settings__option__icon--active) {
        border-color: var(--border-hover); }
      .theme-select-settings__option__icon--active {
        border-color: var(--border-active); }
      .theme-select-settings__option__icon--disabled {
        opacity: 0.16 !important;
        cursor: not-allowed !important; }

/** @define settings-language */
.settings-language__language-header {
  margin-bottom: 16px; }

.settings-language__language-container {
  display: grid;
  grid-template-columns: repeat(4, minmax(90px, 1fr));
  grid-template-rows: repeat(5, auto);
  grid-gap: 16px; }

.settings-language__language-link {
  color: var(--text-prominent);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  border-radius: 4px;
  padding: 16px;
  text-decoration: none;
  background-color: var(--state-normal);
  cursor: pointer; }
  .settings-language__language-link--active {
    border: 1px solid var(--border-active);
    color: var(--text-prominent); }

.settings-language__language-flag {
  width: 36px;
  height: 24px; }

.settings-language__language-name {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  color: var(--text-prominent);
  margin-top: 0.8rem; }
  .settings-language__language-name--active {
    font-weight: bold;
    color: var(--text-prominent); }

/** @define dc-modal-header; */
.dc-modal-header--modal-settings {
  background-color: var(--general-main-1); }

.dc-modal-header__title--modal-settings {
  min-width: 28%;
  background-color: var(--general-section-1);
  max-width: 206px; }

/** @define dc-modal; */
.dc-modal__container_modal-settings {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .dc-modal__container_modal-settings .dc-modal-header {
    border-bottom-width: 0; }
  .dc-modal__container_modal-settings .dc-vertical-tab__tab-meta-wrapper {
    width: 100%;
    max-width: 206px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
  .notifications-toggle:hover .notifications-toggle__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .notifications-toggle:hover .notifications-toggle__icon .color1-fill {
      fill: var(--text-prominent); }
    .notifications-toggle:hover .notifications-toggle__icon .color1-stroke {
      stroke: var(--text-prominent); }
    .notifications-toggle:hover .notifications-toggle__icon .color2-fill {
      fill: none; }
    .notifications-toggle:hover .notifications-toggle__icon .color2-stroke {
      stroke: none; }

/**
 * Define Breakpoints here.
 */
.notifications {
  /** @define notifications-toggle; weak */
  /** @define notifications-dialog; weak */
  /** @define notifications-empty; weak */
  /** @define notifications-item; weak */ }
  .notifications-toggle {
    position: relative;
    margin-right: 24px; }
    .notifications-toggle__icon {
      width: 26px;
      height: 26px;
      pointer-events: none; }
      .notifications-toggle__icon-wrapper {
        cursor: pointer;
        -webkit-user-select: none;
           -moz-user-select: none;
            -ms-user-select: none;
                user-select: none;
        -webkit-touch-callout: none;
        -webkit-tap-highlight-color: transparent; }
        .notifications-toggle__icon-wrapper--active {
          cursor: default; }
      .notifications-toggle__icon .color1-fill {
        fill: var(--text-general); }
      .notifications-toggle__icon .color1-stroke {
        stroke: var(--text-general); }
    .notifications-toggle__step {
      position: absolute;
      left: 1rem;
      top: -2px;
      pointer-events: none; }
    .notifications-toggle--active .dc-popover {
      pointer-events: none; }
  .notifications-dialog {
    position: absolute;
    top: 48px;
    left: calc(-50% - 10rem);
    width: 264px;
    height: 525px;
    background: var(--general-main-2);
    border-radius: 4px;
    box-shadow: 0 4px 8px 2px var(--shadow-menu);
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
    opacity: 0;
    transform: translate3d(0, -20px, 0); }
    .notifications-dialog__header {
      display: flex;
      align-items: center;
      justify-content: center;
      border-bottom: 1px solid var(--border-normal); }
      .notifications-dialog__header-text {
        font-weight: bold;
        font-size: 1.6rem;
        margin: 1rem 0;
        color: var(--text-prominent); }
      @media (min-width: 320px) and (max-width: 767px) {
        .notifications-dialog__header {
          display: none; } }
    .notifications-dialog__content {
      padding: 8px 0;
      height: calc(100% - 37px);
      border-radius: 4px; }
      .notifications-dialog__content--empty {
        display: flex;
        height: 100%;
        max-height: 400px; }
      @media (min-width: 320px) and (max-width: 767px) {
        .notifications-dialog__content {
          height: calc(100vh - 40px); } }
    .notifications-dialog--enter-done {
      opacity: 1;
      transform: translate3d(0, 0, 0); }
    .notifications-dialog--enter, .notifications-dialog--exit {
      opacity: 0;
      transform: translate3d(0, -20px, 0); }
    @media (min-width: 320px) and (max-width: 767px) {
      .notifications-dialog {
        opacity: unset;
        transform: none;
        position: relative;
        top: unset;
        left: unset;
        box-shadow: none;
        height: 100%;
        width: 100%;
        background: var(--general-section-2); } }
  .notifications-empty {
    display: flex;
    flex-direction: column;
    align-items: center; }
    .notifications-empty__container {
      flex-grow: 1;
      display: flex;
      align-items: center;
      justify-content: center; }
    .notifications-empty__icon {
      width: 64px;
      height: 64px;
      margin-bottom: 8px; }
      .notifications-empty__icon .color1-fill {
        fill: var(--text-less-prominent); }
    .notifications-empty__header {
      font-size: 1.4rem;
      font-weight: bold;
      text-align: center;
      color: var(--text-less-prominent);
      padding: 8px; }
  .notifications-item {
    padding: 0.8rem;
    margin-left: 3.2rem;
    margin-right: 0.8rem;
    position: relative; }
    .notifications-item:not(:last-child):after {
      position: absolute;
      content: '';
      bottom: 0;
      left: -3.2rem;
      width: calc(100% + 4rem);
      height: 1px;
      background: var(--border-disabled); }
    .notifications-item__cta-button {
      padding: 0.3rem 0.8rem;
      margin: 0.8rem 0 0.8rem auto;
      height: 2.4rem;
      width: auto; }
      @media (min-width: 320px) and (max-width: 767px) {
        .notifications-item__cta-button {
          margin: 0.8rem 0 1.6rem auto; } }
    .notifications-item__link-wrapper {
      display: flex;
      justify-content: flex-end; }
    .notifications-item__title {
      font-size: 1.4rem;
      font-weight: bold;
      margin-bottom: 4px;
      color: var(--text-prominent);
      position: relative;
      line-height: 1.5; }
      .notifications-item__title-icon {
        position: absolute;
        left: -26px;
        top: 2px;
        height: 16px;
        width: 16px;
        pointer-events: none; }
    .notifications-item__message {
      font-size: 1.2rem;
      color: var(--text-prominent);
      line-height: 1.5;
      padding-right: 8px; }
      .notifications-item__message a {
        text-decoration: none;
        font-weight: bold;
        color: var(--text-prominent); }
    .notifications-item__action {
      display: flex;
      justify-content: flex-end; }
    @media (min-width: 320px) and (max-width: 767px) {
      .notifications-item {
        display: flex;
        flex-direction: column; }
        .notifications-item:after {
          left: -1.8rem;
          width: calc(100% + 1.4em);
          height: 2px; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.acc-info__select-arrow, .acc-switcher__logout-icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .acc-info__select-arrow .color1-fill, .acc-switcher__logout-icon .color1-fill {
    fill: var(--text-general); }
  .acc-info__select-arrow .color1-stroke, .acc-switcher__logout-icon .color1-stroke {
    stroke: var(--text-general); }
  .acc-info__select-arrow .color2-fill, .acc-switcher__logout-icon .color2-fill {
    fill: none; }
  .acc-info__select-arrow .color2-stroke, .acc-switcher__logout-icon .color2-stroke {
    stroke: none; }
  .active.acc-info__select-arrow, .active.acc-switcher__logout-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.acc-info__select-arrow .color1-fill, .active.acc-switcher__logout-icon .color1-fill {
      fill: var(--text-prominent); }
    .active.acc-info__select-arrow .color1-stroke, .active.acc-switcher__logout-icon .color1-stroke {
      stroke: var(--text-prominent); }
    .active.acc-info__select-arrow .color2-fill, .active.acc-switcher__logout-icon .color2-fill {
      fill: none; }
    .active.acc-info__select-arrow .color2-stroke, .active.acc-switcher__logout-icon .color2-stroke {
      stroke: none; }
  .disabled.acc-info__select-arrow, .disabled.acc-switcher__logout-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.acc-info__select-arrow .color1-fill, .disabled.acc-switcher__logout-icon .color1-fill {
      fill: var(--text-disabled); }
    .disabled.acc-info__select-arrow .color1-stroke, .disabled.acc-switcher__logout-icon .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.acc-info__select-arrow .color2-fill, .disabled.acc-switcher__logout-icon .color2-fill {
      fill: none; }
    .disabled.acc-info__select-arrow .color2-stroke, .disabled.acc-switcher__logout-icon .color2-stroke {
      stroke: none; }
  .white.acc-info__select-arrow, .white.acc-switcher__logout-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.acc-info__select-arrow .color1-fill, .white.acc-switcher__logout-icon .color1-fill {
      fill: var(--text-prominent); }
    .white.acc-info__select-arrow .color1-stroke, .white.acc-switcher__logout-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.acc-info__select-arrow, .border_hover_color.acc-switcher__logout-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.acc-info__select-arrow .color1-fill, .border_hover_color.acc-switcher__logout-icon .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.acc-info__select-arrow .color1-stroke, .border_hover_color.acc-switcher__logout-icon .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.acc-info__select-arrow, .secondary.acc-switcher__logout-icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.acc-info__select-arrow .color1-fill, .secondary.acc-switcher__logout-icon .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.acc-info__select-arrow .color1-stroke, .secondary.acc-switcher__logout-icon .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
/** @define acc-info */
.acc-info {
  align-items: center;
  cursor: pointer;
  display: flex;
  flex-direction: row;
  height: 100%;
  justify-content: center;
  padding: 0 1.6rem 0 1.7rem; }
  .acc-info__preloader {
    position: absolute;
    top: 0;
    right: 0;
    width: 350px;
    height: 46px;
    z-index: 2;
    background: var(--general-main-1); }
    .acc-info__preloader:before {
      content: '';
      position: absolute;
      left: -90px;
      width: 90px;
      height: 46px;
      top: 0;
      background: var(--general-main-1); }
    .acc-info__preloader--no-currency:before {
      left: -140px;
      width: 140px; }
    @media (min-width: 320px) and (max-width: 767px) {
      .acc-info__preloader {
        width: 216px;
        height: 42px;
        top: -3px; }
        .acc-info__preloader:before {
          display: none; }
        .acc-info__preloader--is-crypto {
          width: 100%; } }
  .acc-info__container {
    align-items: center;
    -webkit-box-align: center;
    display: flex; }
  .acc-info__wrapper {
    align-items: center;
    display: flex;
    flex-direction: row;
    height: 100%;
    justify-content: center;
    position: relative;
    margin-right: 0.8rem;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent; }
  .acc-info__id {
    pointer-events: none; }
    .acc-info__id-icon {
      vertical-align: middle;
      margin-right: 0.8rem; }
  .acc-info__separator {
    border-right: 1px solid var(--general-section-1);
    width: 2rem;
    height: 3.2rem;
    margin-right: -0.1rem; }
  .acc-info__balance {
    font-size: 1.6rem;
    color: var(--text-profit-success);
    font-weight: 700;
    text-transform: default;
    text-align: center;
    line-height: 1.75;
    padding: 0.5em;
    pointer-events: none; }
  .acc-info__select-arrow {
    pointer-events: none;
    transform: rotate(0);
    transform-origin: 50% 45%;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1); }
    .acc-info__select-arrow--invert {
      transform: rotate(180deg); }
  @media (min-width: 1024px) {
    .acc-info:hover:not(.show):not(.acc-info--is-disabled) {
      background: var(--state-hover); }
      .acc-info:hover:not(.show):not(.acc-info--is-disabled) .symbols {
        background: transparent; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .acc-info {
      padding: 0 1rem;
      margin-right: -0.8rem; }
      .acc-info__id {
        margin-right: -0.8rem; }
      .acc-info__balance {
        font-size: 1.4rem; }
        .acc-info__balance--no-currency {
          white-space: nowrap; } }
  .acc-info--is-virtual .acc-info__balance {
    color: var(--text-profit-success); }
  .acc-info--is-disabled {
    cursor: not-allowed; }
  .acc-info--show .acc-info__select-arrow {
    transform: rotate(180deg); }
  .acc-info--show .acc-info__select-arrow--invert {
    transform: rotate(0deg); }
  .acc-info__button {
    margin: 0 1.6em 0 0 !important; }
    .acc-info__button:not(:last-child) {
      margin-right: 1em; }
    @media (min-width: 320px) and (max-width: 767px) {
      .acc-info__button {
        height: 2.8rem !important; } }

/* @define acc-switcher; weak */
.acc-switcher {
  cursor: pointer;
  display: flex;
  align-items: center;
  margin: 0 0.8rem;
  height: 4rem;
  position: relative; }
  .acc-switcher--is-loading {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background: var(--general-main-2); }
  .acc-switcher__wrapper {
    border-radius: 4px;
    position: absolute;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.25s linear;
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    right: 0;
    top: calc(100% + 4px);
    width: 320px;
    background-color: var(--general-main-2); }
    .acc-switcher__wrapper--enter-done {
      opacity: 1;
      transform: translate3d(0, 0, 0); }
    .acc-switcher__wrapper--enter, .acc-switcher__wrapper--exit {
      opacity: 0;
      transform: translate3d(0, -20px, 0); }
    .acc-switcher__wrapper .acc-switcher__button {
      max-width: calc(100% - 1.6rem);
      margin: 0.2rem 0.8rem 0.8rem;
      height: 4rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .acc-switcher__wrapper {
        position: relative;
        top: unset;
        left: unset;
        right: unset;
        width: 100%;
        box-shadow: none;
        height: 100%;
        border-radius: 0; } }
  .acc-switcher__new-account {
    display: flex;
    align-items: center;
    padding: 1rem 1.6rem 1.8rem;
    font-size: var(--text-size-xs); }
    .acc-switcher__new-account-text {
      margin-left: 0.8rem; }
    .acc-switcher__new-account-btn {
      margin-left: auto; }
    .acc-switcher__new-account--disabled {
      opacity: 0.5;
      cursor: default; }
  .acc-switcher__reset-account-btn {
    margin-left: auto; }
  .acc-switcher__list {
    border-radius: 4px;
    display: flex;
    flex-flow: column nowrap;
    height: 100%;
    background: var(--general-main-2); }
    .acc-switcher__list-wrapper {
      padding: 0.4rem 0.8rem 0; }
    .acc-switcher__list-title {
      flex: 1; }
    .acc-switcher__list-container {
      height: auto;
      overflow-x: hidden;
      overflow-y: auto; }
  .acc-switcher__help-icon {
    cursor: pointer;
    margin-left: 0.8rem;
    vertical-align: middle; }
  .acc-switcher__accounts {
    border-radius: 4px;
    background: var(--general-main-2);
    position: relative; }
    .acc-switcher__accounts .acc-switcher__account {
      margin-bottom: 2px;
      background: var(--general-main-2); }
      .acc-switcher__accounts .acc-switcher__account:hover:not(.acc-switcher__account--selected) {
        background-color: var(--state-hover);
        border-radius: 4px; }
      .acc-switcher__accounts .acc-switcher__account.acc-switcher__account--disabled:hover {
        background-color: var(--general-main-2); }
      .acc-switcher__accounts .acc-switcher__account .acc-switcher__id {
        color: var(--text-general);
        width: 100%;
        line-height: 1.43; }
      .acc-switcher__accounts .acc-switcher__account--selected {
        background: var(--state-active); }
        .acc-switcher__accounts .acc-switcher__account--selected .acc-switcher__id {
          color: var(--text-prominent);
          font-weight: 700; }
          .acc-switcher__accounts .acc-switcher__account--selected .acc-switcher__id--virtual:before {
            color: var(--text-prominent);
            border: 1px solid var(--text-prominent); }
      .acc-switcher__accounts .acc-switcher__account--disabled {
        opacity: 0.5;
        cursor: default; }
      .acc-switcher__accounts .acc-switcher__account:only-child {
        border-radius: 4px; }
      .acc-switcher__accounts .acc-switcher__account:last-child {
        margin-bottom: 8px; }
    .acc-switcher__accounts--is-loading {
      padding-bottom: 0.8rem; }
  .acc-switcher__account {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    padding: 0.3rem 1.6rem;
    position: relative;
    background: var(--general-main-2);
    text-decoration: none; }
    .acc-switcher__account .acc-switcher__id {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      align-items: center;
      display: flex;
      color: var(--text-prominent); }
      .acc-switcher__account .acc-switcher__id-icon {
        margin-right: 8px; }
    .acc-switcher__account:hover:not(.acc-switcher__account--selected) {
      background: var(--state-hover); }
    .acc-switcher__account--selected {
      background: var(--state-active);
      border-radius: 4px; }
      .acc-switcher__account--selected .acc-switcher__id {
        font-size: 1.4rem;
        color: var(--text-colored-background);
        font-weight: 700;
        text-transform: none;
        text-align: left;
        line-height: 1.5; }
        .acc-switcher__account--selected .acc-switcher__id--virtual:before {
          color: var(--text-prominent);
          border: 1px solid var(--text-prominent); }
      .acc-switcher__account--selected .acc-switcher__loginid-text {
        color: var(--text-prominent);
        font-weight: normal; }
      .acc-switcher__account--selected .no-currency {
        color: var(--text-prominent); }
  .acc-switcher__footer {
    align-items: center;
    display: grid;
    grid-template-columns: auto auto;
    justify-content: space-between;
    padding-left: 1.3rem; }
  .acc-switcher__compare {
    justify-self: end;
    grid-column: 1 / 2; }
  .acc-switcher__logout {
    grid-column: 2 / 3;
    align-items: center;
    display: flex;
    justify-content: flex-end;
    justify-self: start;
    padding: 1.6em 1.3em; }
    .acc-switcher__logout-text {
      cursor: pointer; }
    .acc-switcher__logout-icon {
      margin-left: 8px;
      cursor: pointer; }
  .acc-switcher__balance {
    margin-left: auto; }
  .acc-switcher__separator {
    height: 4px;
    background-color: var(--general-section-2); }
    .acc-switcher__separator--no-padding {
      margin: 0 -8px; }
    .acc-switcher__separator--auto-margin {
      margin-top: auto; }
  .acc-switcher__total {
    height: 2.6rem;
    margin: 0.4rem 1.6rem;
    align-items: center;
    display: flex; }
    .acc-switcher__total-subtitle {
      margin: 0 1.6rem 1.2rem; }
  .acc-switcher__loginid-text {
    font-size: 1rem;
    color: var(--text-less-prominent);
    line-height: 1.4; }
    .acc-switcher__loginid-text--disabled {
      color: var(--text-disabled); }
  .acc-switcher__loader {
    margin: 1rem auto !important;
    font-size: 0.8rem; }
  .acc-switcher__btn {
    width: calc(100% - 32px);
    margin: 0 16px 8px; }

/** @define set-currency; weak */
.set-currency {
  margin-right: 8px; }
  .set-currency .dc-btn {
    display: flex;
    align-items: center; }
    @media (min-width: 320px) and (max-width: 767px) {
      .set-currency .dc-btn {
        height: 2.8rem !important; } }

/** @define no-currency; weak */
.no-currency {
  font-size: 0.8rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: unset;
  text-transform: none;
  color: var(--text-less-prominent);
  line-height: 1.5;
  text-align: right; }

/** @define badge-server; weak */
.badge-server {
  display: inline-block;
  background-color: #2a3052;
  padding: 0.2rem;
  border-radius: 0.2rem;
  margin-left: 0.5rem;
  height: 2.2rem; }
  .badge-server--disabled {
    background-color: var(--border-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define platform-dropdown; weak */
.platform-dropdown {
  z-index: 5;
  background-color: var(--overlay-outside-dialog);
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  opacity: 0;
  transition: opacity 0.25s ease; }
  @media (min-width: 320px) and (max-width: 767px) {
    .platform-dropdown {
      position: absolute; }
      .platform-dropdown .platform-dropdown__list {
        position: absolute;
        top: 0;
        left: 0;
        width: 295px;
        padding-right: 1.6rem;
        background-color: var(--general-main-2);
        overflow-x: hidden;
        overflow-y: auto; }
        .platform-dropdown .platform-dropdown__list-platform {
          width: calc(100% - 1.6rem);
          margin: 1.4rem 1.6rem;
          padding: 1.4rem 1.6rem; } }
  .platform-dropdown--enter-done {
    opacity: 1; }
    .platform-dropdown--enter-done .platform-dropdown__list {
      transform: translateY(48px); }
  .platform-dropdown__list {
    background-color: var(--general-main-1);
    width: 100%;
    position: fixed;
    top: 0;
    transform: translateY(0px);
    transition: transform 0.25s ease; }
    @media (min-width: 1024px) {
      .platform-dropdown__list {
        display: flex;
        flex-wrap: wrap; } }
    .platform-dropdown__list-platform {
      position: relative;
      display: inline-flex;
      background-color: transparent;
      color: var(--text-general);
      text-decoration: none;
      margin: 2.4rem 1.6rem;
      padding: 2.4rem 1.6rem;
      width: 320px;
      border-radius: 0.8rem;
      /* postcss-bem-linter: ignore */ }
      .platform-dropdown__list-platform-icon {
        min-height: 32px;
        min-width: 32px;
        margin-right: 1.6rem; }
      .platform-dropdown__list-platform-title {
        font-size: 1.6rem;
        font-weight: bold;
        line-height: 2.4rem; }
      .platform-dropdown__list-platform-description {
        font-size: 1.4rem;
        line-height: 2rem;
        margin-top: 0.8rem; }
      .platform-dropdown__list-platform-background {
        opacity: 0;
        transition: opacity 0.25s ease;
        background-color: var(--general-hover);
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: -1;
        border-radius: inherit; }
      .platform-dropdown__list-platform.active {
        border: solid 2px var(--border-active); }
      .platform-dropdown__list-platform:not(.active):hover .platform-dropdown__list-platform__background {
        opacity: 1; }
      @media (min-width: 320px) and (max-width: 767px) {
        .platform-dropdown__list-platform {
          width: 302px; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.platform-switcher {
  display: flex;
  align-items: center;
  padding: 0.8rem;
  transition: background-color 0.3s;
  cursor: pointer; }
  .platform-switcher:not(.platform-switcher--is-mobile):hover {
    background-color: var(--general-hover); }
  .platform-switcher svg:first-child,
  .platform-switcher p,
  .platform-switcher h1 {
    margin: 0 0 0 0.8rem; }
  .platform-switcher svg:last-child {
    margin: 0 0.8rem; }
  .platform-switcher__header {
    font-size: 1.6rem;
    line-height: 2.4rem;
    font-weight: bold;
    color: var(--text-general); }
  .platform-switcher__arrow {
    transition: transform 0.3s ease;
    transform: rotate(0deg); }
  .platform-switcher__arrow .color1-fill {
    fill: var(--text-general); }
  .platform-switcher__preloader {
    margin-top: 4px;
    align-self: center;
    width: 146px; }
    .platform-switcher__preloader--is-mobile {
      width: 162px; }
  .platform-switcher--active .platform-switcher__arrow {
    transform: rotate(180deg); }
  @media (min-width: 320px) and (max-width: 767px) {
    .platform-switcher {
      width: 100%;
      height: 100%;
      justify-content: center;
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: transparent; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.modal-login-prompt {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 80%;
  color: var(--text-general); }
  .modal-login-prompt h2 {
    font-size: var(--text-size-s);
    font-weight: 700;
    line-height: 24px;
    margin-bottom: 8px; }
  .modal-login-prompt p {
    font-size: var(--text-size-xs);
    line-height: 20px;
    margin: 8px 0 16px; }
  .modal-login-prompt .dc-btn {
    margin: 8px 4px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.terms-of-use {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  margin: 0 8rem 0.8rem; }

.terms-of-use__checkbox {
  margin-top: 1.6rem; }

.terms-of-use__hr {
  height: 2px;
  margin: 1.6rem 0 0;
  width: 100%;
  border-top: 1px solid var(--general-section-1); }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use__hr {
    border-top-width: 2px;
    border-color: var(--border-disabled);
    width: 100%; } }

.terms-of-use h4 {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  margin: 1rem 0;
  text-transform: none;
  color: var(--text-general); }

.terms-of-use p {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  text-transform: none;
  color: var(--text-general); }

.terms-of-use input {
  display: none; }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use {
    overflow-x: hidden;
    margin: 0;
    padding: 0 2.4rem 10rem;
    overflow-y: auto; }
  .terms-of-use .dc-checkbox__box {
    width: 2.4rem;
    height: 2.4rem; }
  .terms-of-use .dc-checkbox__box .dc-icon {
    width: 2.4rem;
    height: 2.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.currency-list {
  width: 100%; }
  .currency-list form {
    width: 100%; }
  .currency-list__items {
    display: flex;
    flex-wrap: wrap;
    width: 768px;
    margin: auto; }
    .currency-list__items__center {
      justify-content: center !important; }
    @media (min-width: 1024px) {
      .currency-list__items {
        justify-content: flex-start; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .currency-list__items {
        display: grid;
        grid-template-columns: 1fr 1fr;
        justify-items: center;
        width: 100%; } }
  .currency-list__item {
    align-items: center;
    border-radius: 8px;
    display: inline-flex;
    flex-direction: column;
    height: 128px;
    width: 160px;
    justify-content: space-around;
    margin: 1.6rem 1.6rem 0;
    min-width: 128px; }
    .currency-list__item:hover:not(.currency-list__item--selected) {
      cursor: pointer;
      border: 1px solid var(--border-hover); }
    .currency-list__item--current {
      pointer-events: none; }
      .currency-list__item--current svg {
        opacity: 0.08; }
      .currency-list__item--current .label {
        color: var(--text-disabled); }
    .currency-list__item--selected {
      border: 2px solid var(--border-active); }
      .currency-list__item--selected .label {
        font-size: 1.4rem;
        color: var(--text-general);
        font-weight: 700;
        text-transform: none;
        text-align: center;
        line-height: 1.5;
        color: var(--text-prominent); }
    .currency-list__item > div {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center; }
    .currency-list__item .currency-list__icon {
      height: 48px;
      width: 48px;
      margin-bottom: 1em; }
      @media (min-width: 320px) and (max-width: 767px) {
        .currency-list__item .currency-list__icon {
          height: 64px;
          width: 64px;
          margin-bottom: 0.8rem; } }
    .currency-list__item-text {
      text-align: center;
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: center;
      line-height: 1.5;
      color: var(--text-general); }
    @media (min-width: 320px) and (max-width: 767px) {
      .currency-list__item {
        margin: 1.6rem 2rem 0.8rem;
        padding: 0.8rem 0;
        width: 85%;
        min-width: unset; } }
  @media only screen and (min-width: 320px) and (max-width: 767px) and (max-width: 340px) {
    .currency-list__item {
      margin: 1.6rem 1rem 0.8rem;
      width: 136px;
      height: 136px; } }
  .currency-list__radio-button {
    display: none; }
  .currency-list__popover {
    position: relative;
    left: 4.8rem;
    top: -4.8rem;
    margin-top: -16px; }
    @media (min-width: 320px) and (max-width: 767px) {
      .currency-list__popover {
        right: 0;
        top: -5.8rem; } }

.currency-hr {
  height: 2px;
  margin: 1.6rem auto;
  width: 90%;
  border-top: 1px solid var(--general-section-1); }
  @media (min-width: 320px) and (max-width: 767px) {
    .currency-hr {
      border-top-width: 2px;
      border-color: var(--border-disabled);
      margin-left: -2.4rem;
      width: calc(100% + 2.4rem); } }

.currency-selector__radio-group--with-margin--is-header {
  font-size: 1.6rem;
  margin: 0.4rem 0 0;
  font-weight: bold;
  color: var(--text-prominent); }

@media (min-width: 1024px) {
  .currency-selector__radio-group--with-margin {
    margin-bottom: 0.4rem;
    margin-left: auto;
    margin-right: auto;
    width: 768px; } }

@media (min-width: 320px) and (max-width: 767px) {
  .currency-selector__radio-group--with-margin {
    margin-bottom: 7rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.details-form {
  display: grid;
  align-content: start; }
  @media (min-width: 1024px) {
    .details-form {
      padding: 0 0.4rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .details-form {
      overflow-x: hidden;
      overflow-y: auto; } }
  @media (min-width: 1024px) {
    .details-form__sub-header {
      margin: 0 4rem 4rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .details-form__sub-header {
      margin-bottom: 0.8rem; } }
  .details-form__elements {
    flex-grow: 1;
    margin: 1.2rem auto;
    width: 45%; }
    .details-form__elements--wide {
      width: 45%; }
    .details-form__elements-container {
      height: calc(100% - 76px);
      overflow: hidden; }
      @media (min-width: 320px) and (max-width: 767px) {
        .details-form__elements-container {
          height: auto;
          width: calc(100% - 3.2rem);
          overflow: unset;
          margin: 1.6rem auto; } }
    .details-form__elements .dc-autocomplete {
      margin-bottom: 3.2rem; }
    .details-form__elements .dc-radio__input {
      margin-bottom: 2.4rem; }
    .details-form__elements .dc-input__label {
      top: 0.9rem; }
    .details-form__elements .dc-input label {
      top: 0.9rem;
      background-color: var(--general-main-2); }
      @media (min-width: 320px) and (max-width: 767px) {
        .details-form__elements .dc-input label {
          background-color: var(--general-section-2); } }
    @media (min-width: 1024px) {
      .details-form__elements .dc-input {
        /* To get rid of ugly chrome autofill shadow dom-applied background color */ }
        .details-form__elements .dc-input__field:-webkit-autofill {
          -webkit-box-shadow: 0 0 0 30px var(--general-main-2) inset !important; }
          .details-form__elements .dc-input__field:-webkit-autofill:hover, .details-form__elements .dc-input__field:-webkit-autofill:focus, .details-form__elements .dc-input__field:-webkit-autofill:active {
            -webkit-box-shadow: 0 0 0 30px var(--general-main-2) inset !important; } }
    .details-form__elements .dc-datepicker__input .dc-input__field {
      background-color: var(--general-main-2); }
    .details-form__elements .dc-select-native {
      margin-bottom: 3.2rem; }
      .details-form__elements .dc-select-native__placeholder {
        background-color: var(--general-section-2); }
    .details-form__elements .dc-dropdown__display {
      background-color: var(--general-main-2); }
      .details-form__elements .dc-dropdown__display-placeholder-text {
        background-color: var(--general-main-2); }
    .details-form__elements .dc-dropdown__container {
      margin-bottom: 3rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .details-form__elements {
        width: 100%;
        margin: 0;
        padding: 1rem 1.6rem 6rem;
        overflow-y: auto; } }
  .details-form__loader .barspinner {
    margin-top: 0.4rem;
    margin-bottom: 3.2rem; }
  .details-form__tax {
    position: relative; }
    @media (min-width: 320px) and (max-width: 767px) {
      .details-form__tax {
        padding-right: 2rem; } }
    .details-form__tax .dc-popover {
      position: absolute;
      cursor: pointer;
      top: 10px;
      right: -25px; }
      @media (min-width: 320px) and (max-width: 767px) {
        .details-form__tax .dc-popover {
          right: -5px; } }
  .details-form__tin-warn-divider {
    height: 5rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .details-form__tin-warn-divider {
        height: 6rem; } }
  .details-form__tin-confirm {
    margin-left: -5px; }
    .details-form__tin-confirm .dc-checkbox__box {
      align-self: baseline; }
  .details-form .dc-page-error__container {
    height: 100%; }
  .details-form__description {
    margin: 1.6rem auto;
    width: 45%; }
    @media (min-width: 1024px) {
      .details-form__description {
        display: flex;
        flex-direction: column; } }
    @media (min-width: 768px) and (max-width: 1023px) {
      .details-form__description {
        width: 70%; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .details-form__description {
        text-align: left;
        width: unset;
        margin: 0 2.4rem;
        line-height: 20px;
        color: var(--text-less-prominent); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.add-or-manage {
  flex-direction: row;
  /* fix for Safari */
  flex-wrap: wrap;
  height: 100%; }
  .add-or-manage .dc-tabs__content {
    display: flex;
    flex-direction: column; }
  .add-or-manage .dc-tabs__list--header-fit-content {
    margin: 0 auto; }
  .add-or-manage .account-wizard--disabled .currency-list__items {
    margin-top: 6rem; }
  .add-or-manage .account-wizard--disabled-message p:first-child {
    margin-top: 6rem;
    background-color: var(--general-section-1);
    font-size: 1.2rem;
    height: 58px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 4px; }
  .add-or-manage .currency-selector__radio-group--is-header {
    font-size: 1.6rem;
    font-weight: bold;
    font-stretch: normal;
    font-style: normal;
    line-height: 1.5;
    letter-spacing: normal;
    color: var(--text-general);
    text-align: center; }
  .add-or-manage .currency-selector__description {
    display: none; }
  .add-or-manage .currency-selector__deposit-warn {
    width: 70%;
    margin: 2.8rem auto 0;
    padding: 10px;
    background-color: var(--general-section-1);
    border-radius: 4px; }
  .add-or-manage__with-margin--is-header {
    font-size: 1.6rem;
    font-weight: bold;
    font-stretch: normal;
    font-style: normal;
    line-height: 1.5;
    letter-spacing: normal;
    color: var(--text-general);
    text-align: center; }
  @media (min-width: 1024px) {
    .add-or-manage .currency-selector__radio-group--with-margin {
      margin-bottom: 6rem;
      margin-left: auto;
      margin-right: auto;
      width: 768px; }
    .add-or-manage .dc-form-submit-button--absolute {
      position: fixed;
      padding: 1.6rem;
      width: 100%;
      right: 0; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .add-or-manage {
      flex-wrap: unset; }
      .add-or-manage .account-wizard__btn-area .dc-btn,
      .add-or-manage .account-wizard__btn-area .dc-btn:last-child {
        min-width: unset;
        margin: 0 1.6rem; }
      .add-or-manage .currency-selector__radio-group--with-margin {
        margin-bottom: 7rem; }
      .add-or-manage .change-currency .currency-list__items {
        margin-bottom: 12rem; }
      .add-or-manage .change-currency .dc-form-submit-button--relative {
        position: fixed;
        background-color: unset;
        right: 0; }
      .add-or-manage .account-wizard--disabled-message p:first-child {
        width: 100%;
        height: 75px;
        padding-left: 1rem;
        padding-right: 1rem; }
      .add-or-manage .account-wizard--disabled .currency-list__items {
        margin-top: 8rem; }
      .add-or-manage .dc-form-submit-button {
        position: fixed;
        padding: 15px;
        height: 72px;
        bottom: 0;
        width: 100%;
        background-color: var(--general-main-1);
        border: 2px solid var(--general-section-1); }
        .add-or-manage .dc-form-submit-button button {
          width: 100%; } }

.status-dialog {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  position: relative;
  flex-grow: 1;
  padding: 2rem 2rem 1rem; }
  .status-dialog__icon-area {
    display: flex;
    align-items: center;
    width: auto;
    justify-content: center;
    position: relative; }
    .status-dialog__icon-area .bottom-right-overlay {
      position: absolute;
      bottom: 2rem;
      right: 0;
      width: 3rem;
      height: 3rem; }
    .status-dialog__icon-area svg.inline-icon {
      width: 90px;
      height: 120px; }
    .status-dialog__icon-area svg {
      display: block; }
      .status-dialog__icon-area svg.dc-icon--red {
        margin: 0 1rem; }
      @media (min-width: 320px) and (max-width: 767px) {
        .status-dialog__icon-area svg {
          max-width: 96px;
          height: auto; } }
    .status-dialog__icon-area--xlarge, .status-dialog__icon-area--large {
      width: auto; }
      .status-dialog__icon-area--xlarge .bottom-right-overlay, .status-dialog__icon-area--large .bottom-right-overlay {
        width: 48px;
        height: 48px;
        right: -1rem;
        bottom: -1rem; }
        @media (min-width: 320px) and (max-width: 767px) {
          .status-dialog__icon-area--xlarge .bottom-right-overlay, .status-dialog__icon-area--large .bottom-right-overlay {
            max-width: 36px;
            height: auto; } }
    .status-dialog__icon-area--xlarge svg:first-child {
      width: 128px;
      height: 128px; }
    .status-dialog__icon-area--large svg.inline-icon {
      width: 120px;
      height: 120px; }
    .status-dialog__icon-area--center {
      justify-content: center;
      width: auto;
      margin-top: 3rem; }
  .status-dialog__icon-area.set-currency svg:first-child {
    margin: 0 auto; }
  .status-dialog__icon-area.set-currency .bottom-right-overlay {
    bottom: 2rem; }
  .status-dialog__body-area {
    flex-grow: 1; }
    .status-dialog__body-area h2 {
      font-size: 1.6rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: center;
      line-height: 1.75;
      margin-top: 1rem;
      margin-bottom: 1rem;
      color: var(--text-general); }
      @media (min-width: 320px) and (max-width: 767px) {
        .status-dialog__body-area h2 {
          line-height: 24px;
          margin: 1.6rem 0 0.8rem; } }
    .status-dialog__body-area p {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      padding: 0.3rem;
      line-height: unset;
      text-align: center;
      text-transform: none;
      color: var(--text-general); }
      @media (min-width: 320px) and (max-width: 767px) {
        .status-dialog__body-area p {
          padding: 0 1rem;
          line-height: 2rem; } }
    .status-dialog__body-area--no-grow {
      flex-grow: 0;
      margin-bottom: 3.2rem; }
  .status-dialog__btn-area {
    margin: 2rem 0 1rem;
    width: 100%;
    display: flex;
    justify-content: center; }
    .status-dialog__btn-area .dc-btn {
      margin: 0 0.5rem;
      height: 4rem;
      border-width: 2px; }
      @media (min-width: 320px) and (max-width: 767px) {
        .status-dialog__btn-area .dc-btn {
          margin: 0 0.8rem;
          width: 15.6rem; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .status-dialog__btn-area {
        margin: 0 0 1rem;
        align-items: center; } }
  @media (min-width: 1024px) {
    .status-dialog {
      min-width: 440px;
      height: 304px; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .status-dialog {
      justify-content: flex-start;
      width: 100%;
      height: 100%;
      padding: 6rem 0 0; } }

.dc-mobile-dialog--enter-done .dc-mobile-dialog__content {
  transform: unset; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.change-currency {
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px; }
  .change-currency__title, .change-currency__sub-title {
    text-transform: none; }
  .change-currency__title {
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    color: var(--text-prominent);
    margin-top: 3rem; }
  .change-currency__sub-title {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
    color: var(--text-general);
    margin-bottom: 1.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.set-currency-modal {
  text-align: center; }
  .set-currency-modal__heading-container {
    margin: 2rem auto;
    color: var(--text-general); }
    @media (min-width: 320px) and (max-width: 767px) {
      .set-currency-modal__heading-container__main-heading {
        padding: 0 3rem; } }
    .set-currency-modal__heading-container__sub-heading {
      font-stretch: normal;
      font-style: normal;
      letter-spacing: normal;
      margin-top: 2rem; }
  .set-currency-modal .currency-selector {
    min-height: 390px; }
    .set-currency-modal .currency-selector__radio-group--is-header {
      font-size: 1.6rem;
      font-weight: bold;
      font-stretch: normal;
      font-style: normal;
      line-height: 1.5;
      letter-spacing: normal;
      color: var(--text-general); }
    .set-currency-modal .currency-selector__description {
      display: none; }
    @media (min-width: 1024px) {
      .set-currency-modal .currency-selector__crypto .currency-list__items {
        margin-bottom: 9rem; }
      .set-currency-modal .currency-selector .dc-form-submit-button {
        position: fixed;
        right: 0;
        bottom: 0;
        padding: 1.3rem;
        background-color: var(--general-main-1); }
        .set-currency-modal .currency-selector .dc-form-submit-button--center {
          justify-content: flex-end;
          height: unset; }
      .set-currency-modal .currency-selector .dc-modal-footer {
        background-color: var(--general-main-1);
        position: fixed;
        right: 0;
        width: 100%;
        bottom: 3.5rem; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .set-currency-modal .currency-selector {
        overflow-y: auto; }
        .set-currency-modal .currency-selector__container--no-top-margin {
          height: unset; }
        .set-currency-modal .currency-selector .dc-form-submit-button {
          position: fixed; }
          .set-currency-modal .currency-selector .dc-form-submit-button button {
            width: 100%; }
        .set-currency-modal .currency-selector .dc-modal-footer {
          background-color: var(--general-main-1);
          position: fixed;
          right: 0;
          bottom: 0;
          width: 100%; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-modal__container_real-account-signup-modal {
  display: flex;
  flex-direction: column;
  transition: all 0.3s ease-in-out;
  background-color: var(--general-main-1); }
  @media (min-width: 768px) and (max-width: 1023px) {
    .dc-modal__container_real-account-signup-modal {
      max-height: calc(100vh - 102px) !important; } }
  .dc-modal__container_real-account-signup-modal--success {
    border-radius: 4px;
    overflow: hidden;
    max-width: 478px;
    min-width: 0 !important;
    min-width: initial !important;
    max-height: none !important;
    max-height: initial !important; }
  .dc-modal__container_real-account-signup-modal .dc-modal-header__title {
    text-transform: none;
    border-top-left-radius: 1em; }
  .dc-modal__container_real-account-signup-modal--error .account-wizard--error {
    display: flex;
    align-items: center;
    justify-content: start;
    flex-direction: column;
    height: 100%;
    width: 100%;
    padding-top: 10rem; }
  .dc-modal__container_real-account-signup-modal--error > svg {
    width: 128px;
    height: 128px;
    align-self: center;
    margin: 2em 0 0; }
  .dc-modal__container_real-account-signup-modal--error h1 {
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    text-transform: none;
    color: var(--text-general);
    margin: 1.6rem 0 0.8rem; }
  .dc-modal__container_real-account-signup-modal--error p {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    text-transform: none;
    width: 80%;
    margin-bottom: 2.4rem; }
  .dc-modal__container_real-account-signup-modal--error a.dc-btn {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    text-transform: none;
    text-decoration: none;
    color: var(--text-colored-background);
    display: flex;
    align-items: center;
    justify-content: center;
    align-self: center; }
  .dc-modal__container_real-account-signup-modal--error a.email-inline {
    color: var(--brand-red-coral);
    font-weight: bold;
    text-decoration: none; }
  .dc-modal__container_real-account-signup-modal--error span.chat-inline {
    color: var(--brand-red-coral);
    font-weight: bold;
    text-decoration: none;
    cursor: pointer; }
  .dc-modal__container_real-account-signup-modal--loading {
    width: 300px;
    max-height: 300px; }
    .dc-modal__container_real-account-signup-modal--loading .dc-modal-header__title {
      height: 0; }
  .dc-modal__container_real-account-signup-modal .dc-themed-scrollbars {
    height: 100%; }

.dc-mobile-dialog__account-signup-mobile-dialog .account-wizard--error p {
  text-align: center; }

.dc-mobile-dialog__account-signup-mobile-dialog .account-wizard--error span.chat-inline {
  color: var(--brand-red-coral);
  font-weight: bold;
  text-decoration: none;
  cursor: pointer;
  display: block;
  text-align: center; }

.dc-modal-header--real-account-signup-modal {
  border-bottom: 1px solid var(--general-section-1); }

.account-wizard {
  display: grid;
  grid-template-rows: 13rem minmax(10rem, 1fr);
  height: calc(100% - 57px);
  position: relative;
  width: 100%; }
  @media (min-width: 1024px) {
    .account-wizard--deriv-crypto {
      grid-template-rows: 0 !important; }
    .account-wizard .currency-list__items__is-crypto {
      margin-bottom: 9rem; }
    .account-wizard .dc-modal-footer {
      background-color: var(--general-main-1);
      z-index: 1; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-wizard {
      grid-template-rows: 7rem minmax(10rem, 1fr);
      overflow: hidden; }
      .account-wizard--set-currency {
        grid-template-rows: 1fr 70px; } }
  .account-wizard.add-or-manage {
    grid-template-rows: 1fr 1fr; }
    .account-wizard.add-or-manage .dc-form-submit-button {
      padding: 2rem; }
    @media (min-width: 1024px) {
      .account-wizard.add-or-manage form {
        grid-template-rows: auto; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-wizard.add-or-manage {
        grid-template-rows: 1fr 1fr;
        overflow-y: auto;
        overflow-x: hidden; } }
  .account-wizard > h2 {
    text-transform: none;
    margin-top: 2.4rem;
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75;
    color: var(--text-less-prominent); }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-wizard > h2 {
        margin-top: 0.8rem;
        font-size: 1.2rem; } }
  .account-wizard > h3 {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
    text-transform: none;
    color: var(--text-general);
    margin-bottom: 1.6rem; }
  .account-wizard form {
    width: 100%;
    height: 100%; }
    @media (min-width: 768px) {
      .account-wizard form {
        display: grid;
        grid-template-rows: minmax(20rem, 1fr); } }
    .account-wizard form .currency-selector__radio-group {
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      justify-content: center;
      align-items: center; }
      .account-wizard form .currency-selector__radio-group--is-header {
        font-size: 1.6rem;
        margin: 2rem 0 0;
        font-weight: bold;
        color: var(--text-prominent); }
    .account-wizard form .currency-selector__description {
      margin-top: 2.4rem;
      font-size: 1.4rem;
      color: var(--text-prominent);
      font-weight: 400;
      text-transform: none;
      text-align: center;
      line-height: 1.5; }
      @media (min-width: 320px) and (max-width: 767px) {
        .account-wizard form .currency-selector__description {
          text-align: center; } }
    .account-wizard form .currency-selector__container {
      width: 100%; }
      @media (min-width: 320px) and (max-width: 767px) {
        .account-wizard form .currency-selector__container {
          overflow-x: hidden;
          overflow-y: auto; }
          .account-wizard form .currency-selector__container--no-top-margin {
            margin-top: 0; } }
    .account-wizard form .currency-selector__button {
      margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-wizard form .currency-selector--deriv-account {
        border-top: 2px solid var(--general-section-1);
        padding-top: 10px; }
        .account-wizard form .currency-selector--deriv-account .dc-btn:last-child {
          width: 90%;
          margin: 0 auto; } }
  .account-wizard__body {
    display: flex; }
    @media (min-width: 768px) and (max-width: 1023px) {
      .account-wizard__body .details-form {
        grid-template-rows: minmax(10rem, 1fr); } }
  .account-wizard__set-currency p {
    margin: 2.4rem 0;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    text-transform: initial;
    color: var(--text-prominent); }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-wizard__set-currency p {
        font-size: 1.2rem;
        margin: 2.4rem auto 0 2.4rem;
        text-align: left; } }
  .account-wizard__set-currency h2 {
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75; }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-wizard__set-currency h2 {
        font-size: 1.2rem;
        text-align: left;
        margin-left: 2.4rem; } }
  .account-wizard .checkbox {
    align-items: center;
    margin: 1rem 0 0; }
    .account-wizard .checkbox__box--active {
      background-color: var(--brand-red-coral); }
    .account-wizard .checkbox__box--active:after {
      font-size: 1.3rem;
      line-height: 20px; }
    .account-wizard .checkbox__label {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      text-transform: none; }
  .account-wizard--disabled {
    position: relative; }
    .account-wizard--disabled .currency-list__items {
      margin-top: 6rem; }
    .account-wizard--disabled h2,
    .account-wizard--disabled p {
      color: var(--text-disabled); }
    .account-wizard--disabled .currency-list__item {
      pointer-events: none; }
      .account-wizard--disabled .currency-list__item svg {
        opacity: 0.08; }
      .account-wizard--disabled .currency-list__item .label {
        color: var(--text-disabled); }
    .account-wizard--disabled-message {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 99;
      display: flex;
      justify-content: center; }
      .account-wizard--disabled-message p {
        color: var(--text-general);
        font-size: var(--text-size-s);
        line-height: 1.5;
        width: 78%;
        text-align: center; }
      .account-wizard--disabled-message p:first-child {
        margin-top: 6rem;
        background-color: var(--general-section-1);
        font-size: 1.2rem;
        height: 58px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 4px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .account-wizard--error {
      margin-top: 40px;
      display: flex;
      flex-direction: column;
      align-items: center; }
      .account-wizard--error h1 {
        font-size: 2.4rem;
        text-align: center;
        font-weight: bold;
        line-height: 1.5;
        color: var(--text-prominent); }
      .account-wizard--error p {
        font-size: 1.4rem;
        margin: 1.6rem;
        line-height: 1.4;
        color: var(--text-general); }
      .account-wizard--error .dc-btn {
        height: 4rem; }
      .account-wizard--error .dc-ion {
        width: 100%;
        max-width: 96px;
        margin-top: 2rem;
        height: auto; }
    .account-wizard__header-steps {
      padding-bottom: 0.8rem;
      width: 100%;
      background: var(--general-section-2); }
      .account-wizard__header-steps-title {
        color: var(--brand-red-coral);
        font-size: 1.4rem;
        font-weight: bold;
        line-height: 20px;
        padding: 0 1.6rem 0.8rem; }
      .account-wizard__header-steps-subtitle {
        color: var(--text-prominent);
        line-height: 18px;
        font-size: 1.2rem;
        font-weight: bold;
        padding: 1.6rem 1.6rem 0; } }

.add-crypto-currency,
.change-currency {
  height: 100%; }
  .add-crypto-currency__title, .add-crypto-currency__sub-title,
  .change-currency__title,
  .change-currency__sub-title {
    font-size: 1.6rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    color: var(--text-prominent);
    text-align: center; }
  .add-crypto-currency__title,
  .change-currency__title {
    margin-top: 3rem; }
  .add-crypto-currency__sub-title,
  .change-currency__sub-title {
    font-size: var(--text-size-xxs);
    font-weight: normal;
    margin-bottom: 1rem; }
  .add-crypto-currency__button,
  .change-currency__button {
    margin-top: 1.6rem;
    width: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .add-crypto-currency .dc-form-submit-button,
    .change-currency .dc-form-submit-button {
      position: fixed;
      bottom: 0;
      width: 100%;
      padding: 1.5rem; }
    .add-crypto-currency .dc-btn,
    .change-currency .dc-btn {
      width: 100%; } }

/* TODO: [refactor-components] Refactor form subheader to components */
.account-form__header {
  font-size: var(--text-size-xs);
  font-weight: bold;
  margin-bottom: 1.6rem;
  position: relative;
  height: 1.6rem;
  white-space: nowrap; }
  .account-form__header-section {
    display: flex;
    align-items: center;
    justify-content: flex-start; }
  .account-form__header-section:after {
    border-top: 1px solid var(--general-section-1);
    content: '';
    height: 100%;
    width: 100%;
    margin-top: 0.3rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .account-form__header-section:after {
        border-top-color: var(--general-disabled); } }
  .account-form__header--has-description {
    margin-bottom: 0.5rem; }

.account-form__header:not(:first-child) {
  margin-top: 1.6rem; }

.account-form__title {
  color: var(--text-prominent);
  padding-right: 0.8rem; }

.account-form__subtitle {
  font-size: 1rem;
  color: var(--text-prominent);
  font-weight: normal;
  align-self: baseline;
  padding-right: 0.8rem;
  margin-top: 0.2rem; }

.account-form__description {
  font-size: 1.2rem;
  font-weight: normal;
  color: var(--text-prominent);
  margin-bottom: 2rem;
  line-height: 1.5; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.modal__container.modal__real-account-signup-modal .dc-vertical-tab__content {
  padding: 0 !important; }

.account-signup-loader {
  width: 100%;
  height: 100%; }

@media (min-width: 768px) and (max-width: 904px) {
  .dc-modal__container_real-account-signup-modal {
    width: 768px !important; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
#dt_set_account_currency_modal .dc-btn--secondary {
  margin-right: 1rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define notification-messages; */
.notification-messages {
  width: 40rem;
  z-index: 4;
  position: absolute;
  right: 0; }
  .notification-messages > div {
    display: flex;
    flex-direction: column;
    align-items: flex-end; }
  @media (min-width: 320px) and (max-width: 767px) {
    .notification-messages {
      max-width: calc(100% - 3.2rem);
      left: 1.6rem;
      right: 1.6rem; } }

/** @define notification; weak */
.notification {
  position: relative;
  display: flex;
  border-radius: 4px;
  width: 100%;
  max-width: 40rem;
  padding: 1.6rem;
  color: var(--text-prominent);
  background-color: var(--general-main-2);
  box-shadow: 0 4px 6px 0 var(--shadow-menu), 0 4px 6px 0 var(--shadow-menu);
  overflow: hidden;
  transition: transform 0.25s ease, opacity 0.25s linear; }
  .notification--enter-done {
    opacity: 1;
    transform: translateY(0); }
  .notification--enter, .notification--exit {
    opacity: 0;
    transform: translateY(-16px); }
  .notification--small {
    max-width: 28rem; }
  .notification__cta-button {
    padding: 0 0.8rem;
    margin-top: 1.6rem;
    height: 24px;
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: fit-content;
    max-width: 150px;
    align-self: flex-end; }
  .notification__text-container {
    display: flex;
    flex-direction: column;
    z-index: 2;
    width: 100%; }
  .notification__text-body {
    font-size: 1.4rem;
    line-height: 1.43; }
  .notification__action {
    display: flex;
    justify-content: flex-end; }
  .notification__header {
    font-size: 1.6rem;
    font-weight: bold;
    line-height: 1.5;
    margin-bottom: 0.8rem; }
  .notification__close-button {
    position: absolute;
    top: 0.4rem;
    right: 1.6rem;
    visibility: visible;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    z-index: 2; }
    .notification__close-button:focus, .notification__close-button:active {
      outline: none; }
    .notification__close-button:after {
      content: '\0000D7';
      font-size: 30px;
      font-weight: 300;
      color: var(--text-prominent); }
  .notification__icon-type {
    margin-right: 1.6rem;
    margin-top: 0.4rem;
    width: 1.6rem;
    height: 1.6rem; }
    .notification__icon-type--is-background {
      width: 21rem;
      height: 21rem; }
  .notification__icon-background {
    position: absolute;
    left: -25px;
    bottom: -5px;
    pointer-events: none;
    opacity: 0.07;
    z-index: 0; }
  .notification:not(:last-child) {
    margin-bottom: 16px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .notification {
      max-width: 328px;
      width: calc(100% - 0.8rem);
      margin-right: 0.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.advanced-simple-toggle__icon, .footer__link:hover .footer__icon, .footer__icon, .account-settings-toggle svg, .side-menu__icon {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .advanced-simple-toggle__icon .color1-fill, .footer__link:hover .footer__icon .color1-fill, .footer__icon .color1-fill, .account-settings-toggle svg .color1-fill, .side-menu__icon .color1-fill {
    fill: var(--text-general); }
  .advanced-simple-toggle__icon .color1-stroke, .footer__link:hover .footer__icon .color1-stroke, .footer__icon .color1-stroke, .account-settings-toggle svg .color1-stroke, .side-menu__icon .color1-stroke {
    stroke: var(--text-general); }
  .advanced-simple-toggle__icon .color2-fill, .footer__link:hover .footer__icon .color2-fill, .footer__icon .color2-fill, .account-settings-toggle svg .color2-fill, .side-menu__icon .color2-fill {
    fill: none; }
  .advanced-simple-toggle__icon .color2-stroke, .footer__link:hover .footer__icon .color2-stroke, .footer__icon .color2-stroke, .account-settings-toggle svg .color2-stroke, .side-menu__icon .color2-stroke {
    stroke: none; }
  .active.advanced-simple-toggle__icon, .header__menu-link--active .header__icon, .footer__link:hover .active.footer__icon, .active.footer__icon, .ic-settings--active .ic-settings__icon, .account-settings-toggle svg.active, .account-settings-toggle:hover svg, .active.side-menu__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .active.advanced-simple-toggle__icon .color1-fill, .header__menu-link--active .header__icon .color1-fill, .active.footer__icon .color1-fill, .ic-settings--active .ic-settings__icon .color1-fill, .account-settings-toggle svg.active .color1-fill, .account-settings-toggle:hover svg .color1-fill, .active.side-menu__icon .color1-fill {
      fill: var(--text-prominent); }
    .active.advanced-simple-toggle__icon .color1-stroke, .header__menu-link--active .header__icon .color1-stroke, .active.footer__icon .color1-stroke, .ic-settings--active .ic-settings__icon .color1-stroke, .account-settings-toggle svg.active .color1-stroke, .account-settings-toggle:hover svg .color1-stroke, .active.side-menu__icon .color1-stroke {
      stroke: var(--text-prominent); }
    .active.advanced-simple-toggle__icon .color2-fill, .header__menu-link--active .header__icon .color2-fill, .active.footer__icon .color2-fill, .ic-settings--active .ic-settings__icon .color2-fill, .account-settings-toggle svg.active .color2-fill, .account-settings-toggle:hover svg .color2-fill, .active.side-menu__icon .color2-fill {
      fill: none; }
    .active.advanced-simple-toggle__icon .color2-stroke, .header__menu-link--active .header__icon .color2-stroke, .active.footer__icon .color2-stroke, .ic-settings--active .ic-settings__icon .color2-stroke, .account-settings-toggle svg.active .color2-stroke, .account-settings-toggle:hover svg .color2-stroke, .active.side-menu__icon .color2-stroke {
      stroke: none; }
  .disabled.advanced-simple-toggle__icon, .footer__link:hover .disabled.footer__icon, .disabled.footer__icon, .account-settings-toggle svg.disabled, .disabled.side-menu__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .disabled.advanced-simple-toggle__icon .color1-fill, .disabled.footer__icon .color1-fill, .account-settings-toggle svg.disabled .color1-fill, .disabled.side-menu__icon .color1-fill {
      fill: var(--text-disabled); }
    .disabled.advanced-simple-toggle__icon .color1-stroke, .disabled.footer__icon .color1-stroke, .account-settings-toggle svg.disabled .color1-stroke, .disabled.side-menu__icon .color1-stroke {
      stroke: var(--text-disabled); }
    .disabled.advanced-simple-toggle__icon .color2-fill, .disabled.footer__icon .color2-fill, .account-settings-toggle svg.disabled .color2-fill, .disabled.side-menu__icon .color2-fill {
      fill: none; }
    .disabled.advanced-simple-toggle__icon .color2-stroke, .disabled.footer__icon .color2-stroke, .account-settings-toggle svg.disabled .color2-stroke, .disabled.side-menu__icon .color2-stroke {
      stroke: none; }
  .white.advanced-simple-toggle__icon, .footer__link:hover .white.footer__icon, .white.footer__icon, .account-settings-toggle svg.white, .white.side-menu__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .white.advanced-simple-toggle__icon .color1-fill, .white.footer__icon .color1-fill, .account-settings-toggle svg.white .color1-fill, .white.side-menu__icon .color1-fill {
      fill: var(--text-prominent); }
    .white.advanced-simple-toggle__icon .color1-stroke, .white.footer__icon .color1-stroke, .account-settings-toggle svg.white .color1-stroke, .white.side-menu__icon .color1-stroke {
      stroke: var(--text-prominent); }
  .border_hover_color.advanced-simple-toggle__icon, .footer__link:hover .border_hover_color.footer__icon, .border_hover_color.footer__icon, .account-settings-toggle svg.border_hover_color, .border_hover_color.side-menu__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .border_hover_color.advanced-simple-toggle__icon .color1-fill, .border_hover_color.footer__icon .color1-fill, .account-settings-toggle svg.border_hover_color .color1-fill, .border_hover_color.side-menu__icon .color1-fill {
      fill: var(--text-prominent); }
    .border_hover_color.advanced-simple-toggle__icon .color1-stroke, .border_hover_color.footer__icon .color1-stroke, .account-settings-toggle svg.border_hover_color .color1-stroke, .border_hover_color.side-menu__icon .color1-stroke {
      stroke: var(--text-prominent); }
  .secondary.advanced-simple-toggle__icon, .footer__link:hover .secondary.footer__icon, .secondary.footer__icon, .account-settings-toggle svg.secondary, .secondary.side-menu__icon {
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .secondary.advanced-simple-toggle__icon .color1-fill, .secondary.footer__icon .color1-fill, .account-settings-toggle svg.secondary .color1-fill, .secondary.side-menu__icon .color1-fill {
      fill: var(--text-less-prominent); }
    .secondary.advanced-simple-toggle__icon .color1-stroke, .secondary.footer__icon .color1-stroke, .account-settings-toggle svg.secondary .color1-stroke, .secondary.side-menu__icon .color1-stroke {
      stroke: var(--text-less-prominent); }

/**
 * Define Breakpoints here.
 */
/* postcss-bem-linter: ignore */
html {
  font-size: 62.5%;
  /** TODO: define breakpoints */ }

/** @define body */
.body {
  position: relative;
  min-height: 100%;
  margin: 0;
  padding: 0;
  overflow-x: hidden; }

/* postcss-bem-linter: ignore */
*,
html,
.body {
  font-family: "IBM Plex Sans", sans-serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  box-sizing: border-box; }
  @media (min-width: 320px) and (max-width: 767px) {
    *,
    html,
    .body {
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0); } }

/** @define select */
.select {
  font-family: inherit;
  font-size: inherit;
  font-style: inherit;
  padding: 2px 3px;
  border: 1px solid var(--border-normal);
  border-radius: 4px; }

/** @define input */
.input {
  font-family: inherit;
  font-style: inherit;
  padding: 2px 3px;
  color: var(--text-general); }

::-webkit-input-placeholder {
  /* Chrome/Opera/Safari */
  color: var(--text-general); }

::-moz-placeholder {
  /* Firefox 19+ */
  color: var(--text-general); }

:-ms-input-placeholder {
  /* IE 10+ */
  color: var(--text-general); }

:-moz-placeholder {
  /* Firefox 18- */
  color: var(--text-general); }

/** @define theme */
.theme--light {
  background: #ffffff; }

.theme--dark {
  background: #0e0e0e; }

/** @define container */
.container {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  box-sizing: border-box; }

/** @define hidden */
.hidden {
  visibility: hidden !important;
  transition: none !important; }

/** @define absolute-center-v */
.absolute-center-v {
  position: absolute;
  margin: auto;
  top: 0;
  bottom: 0; }

/** @define link */
.link {
  color: var(--brand-red-coral);
  font-weight: bold;
  text-decoration: none; }
  .link:hover {
    text-decoration: underline;
    cursor: pointer; }
  .link--white {
    color: #ffffff; }
  .link--right {
    float: right; }

/** @define icon */
.icon--centered {
  top: 0.8em;
  left: 5%; }

/** @define center-text */
.center-text {
  text-align: center; }

/** @define no-margin */
.no-margin {
  margin: 0; }

/** @define hr */
.hr {
  border-top: var(--general-section-1);
  display: block;
  height: 1px;
  border: 0;
  margin: 0.5em 0;
  padding: 0; }

/** @define deriv-app */
.deriv-app {
  height: 100%;
  overflow: hidden; }

/*------------------------------------*
 *  # Reset SCSS
 *  - to make browsers render all elements more consistently
 *  - Reference:  https://github.com/AdamMarsden/simple-typography/blob/master/_reset.scss
 *------------------------------------*/
/* stylelint-disable */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
input,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block; }

html {
  height: 100%;
  font-size: 10px; }

body {
  line-height: 1;
  height: 100%; }

ol,
ul {
  list-style: none; }

blockquote,
q {
  quotes: none; }

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

strong {
  font-weight: bold; }

/* stylelint-enable */
:host,
:root {
  --text-size-xxxxs: 0.8rem;
  --text-size-xxxs: 1rem;
  --text-size-xxs: 1.2rem;
  --text-size-xs: 1.4rem;
  --text-size-s: 1.6rem;
  --text-size-xsm: 1.8rem;
  --text-size-sm: 2rem;
  --text-size-m: 2.4rem;
  --text-size-l: 3.2rem;
  --text-size-xl: 4.8rem;
  --text-size-xxl: 6.4rem;
  --text-lh-xs: 1.25;
  --text-lh-s: 1.4;
  --text-lh-m: 1.5;
  --text-lh-l: 1.75;
  --text-lh-xl: 2;
  --text-weight-lighter: lighter;
  --text-weight-normal: normal;
  --text-weight-bold: bold;
  --text-weight-bolder: bolder;
  --text-align-left: start;
  --text-align-right: right;
  --text-align-center: center;
  --brand-dark-grey: #0e0e0e;
  --brand-red-coral: #ff444f;
  --brand-orange: #ff6444;
  --brand-secondary: #85acb0;
  --wallet-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
  --wallet-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);
  --wallet-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
  --wallet-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
  --wallet-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
  --wallet-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);
  --wallet-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
  --wallet-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
  --wallet-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
  --wallet-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);
  --wallet-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);
  --wallet-perfectmoney: gradient-perfectmoney;
  --wallet-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
  --wallet-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
  --wallet-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --wallet-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
  --wallet-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
  --app-card-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
  --app-card-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%); }
  :host .theme--light,
  :root .theme--light {
    --general-main-1: #ffffff;
    --general-main-2: #ffffff;
    --general-section-1: #f2f3f4;
    --general-section-2: #f2f3f4;
    --general-section-3: #fafafa;
    --general-disabled: #eaeced;
    --general-hover: #e6e9e9;
    --general-active: #d6dadb;
    --text-prominent: #333333;
    --text-general: #333333;
    --text-less-prominent: #999999;
    --text-disabled: #d6d6d6;
    --text-profit-success: #4bb4b3;
    --text-loss-danger: #ec3f3f;
    --text-colored-background: #ffffff;
    --icon-light-background: #5c5c5c;
    --icon-dark-background: #ffffff;
    --icon-grey-background: #f2f3f4;
    --purchase-main-1: #4bb4b3;
    --purchase-section-1: #3d9494;
    --purchase-main-2: #ec3f3f;
    --purchase-section-2: #d33636;
    --purchase-disabled-main: #eaeced;
    --purchase-disabled-section: #e6e9e9;
    --button-primary-default: var(--brand-red-coral);
    --button-secondary-default: #999999;
    --button-tertiary-default: transparent;
    --button-primary-hover: #eb3e48;
    --button-secondary-hover: rgba(0, 0, 0, 0.08);
    --button-tertiary-hover: rgba(255, 68, 79, 0.08);
    --button-toggle-primary: #0796e0;
    --button-toggle-secondary: #d6dadb;
    --overlay-outside-dialog: rgba(0, 0, 0, 0.72);
    --overlay-inside-dialog: rgba(255, 255, 255, 0.96);
    --shadow-menu: rgba(0, 0, 0, 0.16);
    --shadow-menu-2: rgba(0, 0, 0, 0.16);
    --shadow-drop: rgba(0, 0, 0, 0.08);
    --state-normal: #ffffff;
    --state-hover: #e6e9e9;
    --state-active: #d6dadb;
    --state-disabled: #eaeced;
    --border-normal: #d6dadb;
    --border-hover: #999999;
    --border-hover-1: #5c5c5c;
    --border-active: var(--brand-secondary);
    --border-disabled: #eaeced;
    --fill-normal: #ffffff;
    --fill-hover: #999999;
    --fill-active: var(--brand-secondary);
    --fill-disabled: #eaeced;
    --status-default: #eaeced;
    --status-adjustment: #999999;
    --status-danger: #ec3f3f;
    --status-success: #4bb4b3;
    --status-warning: #ffad3a;
    --status-info: #377cfc;
    --status-colored-background: #ffffff;
    --dashboard-primary: #0796e0;
    --dashboard-hover: #0677af;
    --dashboard-alpha: rgba(7, 150, 224, 0.16);
    --dashboard-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);
    --dashboard-app: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);
    --payment-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);
    --payment-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);
    --payment-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);
    --payment-credit-and-debit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);
    --payment-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);
    --payment-usd-coin: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);
    --payment-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);
    --payment-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);
    --payment-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);
    --payment-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);
    --payment-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);
    --payment-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);
    --payment-deriv: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);
    --transparent-success: rgba(75, 180, 179, 0.92);
    --transparent-info: rgba(55, 124, 252, 0.16);
    /* TODO: change to styleguide later */
    --gradient-success: linear-gradient(to top, #ffffff, rgba(75, 180, 179, 0.16));
    --gradient-danger: linear-gradient(to top, #ffffff, rgba(255, 68, 79, 0.16));
    --gradient-right-edge: linear-gradient(to right, rgba(255, 255, 255, 0) -5%, #ffffff 71%);
    --badge-white: #ffffff;
    --badge-blue: #0677af;
    --badge-violet: #2a3052;
    --badge-green: #00a79e; }
  :host .theme--dark,
  :root .theme--dark {
    --general-main-1: #0e0e0e;
    --general-main-2: #151717;
    --general-section-1: #151717;
    --general-section-2: #0e0e0e;
    --general-section-3: #242828;
    --general-disabled: #1d1f20;
    --general-hover: #242828;
    --general-active: #323738;
    --text-prominent: #ffffff;
    --text-general: #c2c2c2;
    --text-less-prominent: #6e6e6e;
    --text-disabled: #3e3e3e;
    --text-profit-success: #00a79e;
    --text-loss-danger: #cc2e3d;
    --text-colored-background: #ffffff;
    --icon-light-background: #5c5c5c;
    --icon-dark-background: #ffffff;
    --icon-grey-background: #333333;
    --purchase-main-1: #00a79e;
    --purchase-section-1: #008079;
    --purchase-main-2: #cc2e3d;
    --purchase-section-2: #a32430;
    --purchase-disabled-main: #1d1f20;
    --purchase-disabled-section: #0e0e0e;
    --button-primary-default: var(--brand-red-coral);
    --button-secondary-default: #6e6e6e;
    --button-tertiary-default: transparent;
    --button-primary-hover: #eb3e48;
    --button-secondary-hover: rgba(255, 255, 255, 0.08);
    --button-tertiary-hover: rgba(255, 68, 79, 0.08);
    --button-toggle-primary: #0796e0;
    --button-toggle-secondary: #323738;
    --overlay-outside-dialog: rgba(0, 0, 0, 0.72);
    --overlay-inside-dialog: rgba(14, 14, 14, 0.96);
    --shadow-menu: rgba(0, 0, 0, 0.84);
    --shadow-menu-2: rgba(0, 0, 0, 0.72);
    --shadow-drop: rgba(0, 0, 0, 0.64);
    --state-normal: #0e0e0e;
    --state-hover: #242828;
    --state-active: #323738;
    --state-disabled: #1d1f20;
    --border-normal: #323738;
    --border-hover: #6e6e6e;
    --border-hover-1: #5c5c5c;
    --border-active: var(--brand-secondary);
    --border-disabled: #1d1f20;
    --fill-normal: #0e0e0e;
    --fill-hover: #6e6e6e;
    --fill-active: var(--brand-secondary);
    --fill-disabled: #1d1f20;
    --status-default: #eaeced;
    --status-adjustment: #999999;
    --status-danger: #cc2e3d;
    --status-warning: #ffad3a;
    --status-success: #00a79e;
    --status-info: #377cfc;
    --status-colored-background: #ffffff;
    --dashboard-primary: #2a3052;
    --dashboard-hover: #0796e0;
    --dashboard-alpha: rgba(7, 150, 224, 0.16);
    --transparent-success: rgba(0, 167, 158, 0.92);
    --transparent-info: rgba(55, 124, 252, 0.16);
    /* TODO: change to styleguide later */
    --gradient-success: linear-gradient(to top, #0e0e0e, rgba(0, 167, 158, 0.16));
    --gradient-danger: linear-gradient(to top, #0e0e0e, rgba(255, 68, 79, 0.16));
    --gradient-right-edge: linear-gradient(to right, rgba(14, 14, 14, 0) -5%, #0e0e0e 71%);
    --badge-white: #ffffff;
    --badge-blue: #0677af;
    --badge-violet: #2a3052;
    --badge-green: #00a79e; }

@media (min-width: 320px) and (max-width: 767px) {
  /** disabling pull to refresh on iOS / Android browsers */
  /* postcss-bem-linter: ignore */
  body,
  .deriv-app,
  .modal-root,
  .dc-mobile-drawer__wrapper {
    /* Break the flow */
    position: absolute !important;
    top: 0 !important;
    /* Give them all the available space */
    width: 100%;
    height: 100%;
    /* Remove the margins if any */
    margin: 0;
    /* Allow them to scroll down the document */
    overflow-y: hidden !important;
    /* -webkit-touch-callout only is supported on iOS webkit engine, thus it should apply iOS only styles */ }
    @supports (-webkit-touch-callout: none) {
      body,
      .deriv-app,
      .modal-root,
      .dc-mobile-drawer__wrapper {
        position: fixed !important; } }
  .body {
    /* Sending body at the bottom of the stack */
    z-index: 1; }
  .deriv-app {
    /* Making the wrapper stack above the body */
    -ms-scroll-chaining: none;
        overscroll-behavior: none;
    z-index: 2; }
  .modal-root {
    height: 100% !important; }
  .popup-root > .dc-toast {
    top: 48px;
    z-index: 3;
    margin: auto;
    position: absolute; }
  .popup-root .dc-toast-popup {
    max-width: calc(100vw - 1.6rem);
    left: 1.6rem;
    width: calc(100vw - 3.2rem);
    top: 48px;
    position: absolute;
    right: 1.6rem; } }

/** @define landscape-blocker; weak */
.landscape-blocker {
  display: none;
  /* enable temporary landscape blocker UI in landscape */ }
  .landscape-blocker--visible {
    display: flex;
    position: fixed;
    top: 0;
    left: 0;
    overflow: hidden;
    width: 100%;
    height: 100%;
    background: var(--general-main-1);
    align-items: center;
    justify-content: center;
    flex-direction: column;
    color: var(--text-prominent);
    font-size: 1.6rem;
    z-index: 9999;
    font-weight: bold; }
    .landscape-blocker--visible__icon {
      width: 59px;
      height: 64px; }
    .landscape-blocker--visible__message {
      padding: 1.6rem 11rem;
      line-height: 1.4; }

/** @define app-contents; weak */
.app-contents {
  margin: 48px 0 36px;
  height: calc(100vh - 48px - 36px);
  overflow: hidden;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  background-color: var(--general-main-1); }
  .app-contents--is-disabled:after {
    opacity: 1;
    pointer-events: auto; }
  .app-contents--is-route-modal {
    background-color: var(--overlay-outside-dialog); }
  @media (min-width: 320px) and (max-width: 767px) {
    .app-contents {
      margin-bottom: 0;
      height: calc(100% - 40px);
      position: relative;
      margin-top: 40px; }
      .app-contents--is-scrollable {
        overflow-y: auto; }
      .app-contents .ciq-menu {
        top: 0;
        margin: 0.8rem;
        z-index: 2; }
      .app-contents .cq-symbol-select-btn {
        padding: 0.3rem 0.9rem; }
        .app-contents .cq-symbol-select-btn .cq-symbol-dropdown {
          transform: scale(1);
          margin-left: auto; }
        .app-contents .cq-symbol-select-btn .cq-symbol {
          font-size: 1.2rem; }
        .app-contents .cq-symbol-select-btn .cq-chart-price {
          display: none; }
        .app-contents .cq-symbol-select-btn .cq-symbol-info {
          margin: 0 0.8rem;
          white-space: nowrap; }
        .app-contents .cq-symbol-select-btn .ic-icon:not(.cq-symbol-dropdown) > svg {
          padding: 0.4rem; }
      .app-contents .chart-container__loader {
        width: 100%;
        height: 100%;
        z-index: 1;
        top: 0; }
      .app-contents .contract-details-wrapper {
        height: inherit;
        position: relative;
        z-index: 1; }
      .app-contents .contract-audit-card {
        background-color: var(--general-section-1);
        border-radius: 4px; }
        .app-contents .contract-audit-card .contract-audit__wrapper {
          height: 100%; } }

/** @define sidebar; weak; */
.sidebar__container {
  position: relative;
  margin-left: 1.6em;
  width: 240px;
  margin-top: 8px;
  z-index: 1; }

.sidebar__items {
  opacity: 1;
  transform: none;
  position: relative;
  min-height: 460px;
  width: 240px; }
  .sidebar__items:after {
    transition: opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25);
    opacity: 0;
    position: absolute;
    pointer-events: none;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    content: '';
    background-color: var(--overlay-outside-dialog); }
  .sidebar__items--market-closed .dc-tooltip--with-label {
    display: none; }
  .sidebar__items--market-closed .dc-tooltip--with-label:before,
  .sidebar__items--market-closed .dc-tooltip--with-label:after {
    display: none; }

/** @define popup-root */
.popup-root {
  position: absolute;
  z-index: 9999; }

/** @define contract */
.contract--enter {
  transform: translate3d(calc(100% + 1.6em), 0, 0);
  opacity: 0; }

.contract--exit {
  transform: translate3d(calc(100% + 1.6em), 0, 0);
  opacity: 0;
  pointer-events: none; }

/** @define advanced-simple-toggle */
.advanced-simple-toggle {
  display: flex;
  justify-content: center;
  align-items: center;
  /* margin shorthand for values below does not work */
  width: calc(100% + 16px);
  margin-top: 8px;
  margin-left: -8px;
  margin-bottom: -9px;
  margin-right: 0;
  padding: 8px 0;
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border: 0;
  background: none;
  transition: background-color 0.25s linear; }
  .advanced-simple-toggle__icon {
    transition: transform 0.2s ease; }
    .advanced-simple-toggle__icon--active {
      transform: rotate(180deg); }
  .advanced-simple-toggle:hover {
    cursor: pointer;
    background-color: var(--general-hover); }
  .advanced-simple-toggle:focus {
    outline: none; }

/** @define category-wrapper */
.category-wrapper {
  width: 2.4em;
  height: 2.4em;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1); }

/** @define type-wrapper */
.type-wrapper {
  width: 2.4em;
  height: 2.4em;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .type-wrapper .color1-fill {
    fill: var(--brand-red-coral); }
  .type-wrapper .color2-fill {
    fill: var(--brand-secondary); }

/** @define no-scroll */
.no-scroll {
  overflow: hidden;
  max-height: 100vh; }

/** @define desktop-only */
@media (max-width: 768px) {
  .desktop-only {
    display: none !important; } }

/** @define mobile-only */
@media (min-width: 769px) {
  .mobile-only {
    display: none !important; } }

/** @define error */
.error__container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: calc(100vh - 9em); }

.error__message {
  color: var(--text-general); }
  .error__message {
    font-size: 14px; }
    @media screen and (min-width: 320px) {
      .error__message {
        font-size: calc(0.53571vw + 12.28571px); } }
    @media screen and (min-width: 1440px) {
      .error__message {
        font-size: 20px; } }

@-webkit-keyframes fadeIn {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

@keyframes fadeIn {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

/** @define header; weak */
.header {
  position: fixed;
  z-index: 99;
  box-sizing: border-box;
  height: 48px;
  width: 100%;
  top: 0;
  transition: opacity 0.3s;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  background-color: var(--general-main-1);
  border-bottom: 1px solid var(--general-section-1); }
  .header--is-disabled:after {
    opacity: 1;
    pointer-events: auto; }
  .header__menu-mobile-body-wrapper {
    position: relative;
    height: calc(100% - 3.6rem); }
  .header__menu-mobile-platform-switcher {
    position: absolute;
    height: 100%;
    top: 24px;
    left: 0; }
  .header__menu-mobile-theme {
    border-bottom: 1px solid var(--general-section-1);
    padding-bottom: 1.6rem;
    margin-bottom: 1.6rem; }
  .header__menu-mobile-link {
    text-decoration: none;
    display: flex;
    align-items: center; }
    .header__menu-mobile-link--active .header__menu-mobile-link-text {
      font-weight: bold;
      color: var(--text-prominent); }
    .header__menu-mobile-link-text {
      font-size: 1.4rem;
      color: var(--text-general); }
    .header__menu-mobile-link-icon {
      margin-right: 16px;
      width: 16px;
      height: 16px; }
    .header__menu-mobile-link-flag-icon {
      margin-right: 16px; }
    .header__menu-mobile-link-suffix-icon {
      width: 16px;
      height: 16px;
      margin-right: auto;
      margin-left: auto; }
    .header__menu-mobile-link-toggler-label {
      width: 48px;
      height: 25.6px;
      margin-left: auto;
      margin-right: 1.6rem; }
    .header__menu-mobile-link-toggler-button {
      width: 19.2px;
      height: 19.2px;
      top: 3px;
      left: 4px; }
      .header__menu-mobile-link-toggler-button--active {
        left: calc(100% - 4px) !important; }
  .header__menu-items {
    display: flex;
    position: relative;
    box-sizing: border-box;
    align-items: center;
    width: 100%;
    height: 100%; }
  .header__navbar-icons {
    cursor: pointer;
    padding: 0.8em 1.6em;
    align-self: center;
    height: 100%; }
    .header__navbar-icons--notify-toggle {
      order: 2;
      order: 2;
      padding: 0.5em 1em;
      width: 2em; }
  .header__menu-left {
    justify-content: flex-start;
    order: -1;
    display: inline-flex;
    flex: 1;
    height: 47px; }
    .header__menu-left-extensions {
      display: flex;
      align-items: center;
      overflow: hidden; }
  .header__menu-right {
    justify-content: flex-end;
    order: 1;
    display: inline-flex;
    height: 47px;
    position: relative; }
    .header__menu-right--hidden {
      display: none; }
    @media (min-width: 320px) and (max-width: 767px) {
      .header__menu-right .acc-info__separator {
        display: none; }
      .header__menu-right .notifications-toggle {
        margin-right: 0; } }
  .header__menu-toggle {
    align-self: center;
    display: flex; }
  .header__menu-links {
    height: 100%;
    align-self: center; }
    @media (max-width: 520px) {
      .header__menu-links {
        display: none; } }
  .header__menu-link {
    height: 100%;
    padding: 0 1.6em;
    text-decoration: none;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: space-evenly;
    transition: background-color 0.3s;
    cursor: pointer; }
    .header__menu-link-text {
      font-size: 1.6rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.75;
      padding: 0.5em 0;
      position: relative;
      color: var(--text-general);
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */
      /* postcss-bem-linter: ignore */ }
      .header__menu-link-text .color1-fill {
        fill: var(--text-general); }
      .header__menu-link-text .color1-stroke {
        stroke: var(--text-general); }
      .header__menu-link-text .color2-fill {
        fill: none; }
      .header__menu-link-text .color2-stroke {
        stroke: none; }
      .header__menu-link-text .color3-fill {
        fill: var(--text-general); }
      .header__menu-link-text .color3-stroke {
        stroke: var(--text-general); }
      .header__menu-link-text:before {
        position: absolute;
        top: 1.4em;
        left: 1.2em; }
      .header__menu-link-text:after {
        display: block;
        content: attr(title);
        font-weight: 400;
        height: 0;
        overflow: hidden;
        visibility: hidden; }
    .header__menu-link:hover:not(.header__menu-link--active) {
      background-color: var(--general-hover); }
    .header__menu-link--active > .header__menu-link-text[title] {
      font-weight: bold;
      color: var(--text-prominent); }
      .header__menu-link--active > .header__menu-link-text[title]:after {
        color: var(--text-prominent); }
  .header__logo {
    background-color: var(--brand-secondary);
    border-radius: 10px;
    color: var(--text-colored-background);
    display: inline-block;
    font-size: 1.4rem;
    font-weight: normal;
    height: 20px;
    line-height: 1.43;
    text-align: center;
    width: 50px;
    margin-left: 8px; }
  .header__mobile-drawer-icon {
    width: 16px;
    height: 16px;
    transform: scale(1.3); }
  .header__mobile-drawer-toggle {
    padding: 0 1.2rem;
    border-right: 1px solid var(--general-section-1);
    display: flex;
    align-items: center;
    height: inherit; }
  .header__title {
    display: inline-block;
    font-weight: bold;
    color: var(--text-prominent); }
  .header__icon {
    margin-right: 0.8rem;
    vertical-align: middle; }
  @media (min-width: 320px) and (max-width: 767px) {
    .header {
      height: 40px; }
      .header .header__menu-left,
      .header .header__menu-right {
        height: 39px; } }

.dashboard-header {
  display: flex;
  align-items: center;
  position: fixed;
  z-index: 99;
  box-sizing: border-box;
  height: 48px;
  width: 100%;
  top: 0;
  transition: opacity 0.3s;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  padding: 0 4rem;
  justify-content: space-between; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dashboard-header {
      padding: 0 1.6rem; } }
  .dashboard-header > * {
    align-items: center;
    display: flex; }
  .dashboard-header__left > * {
    cursor: pointer; }
  .dashboard-header__left--desktop-logo {
    margin-right: 0.684rem; }
  .dashboard-header--logged-in {
    background-color: var(--general-main-1);
    color: var(--brand-dark-grey);
    box-shadow: inset 0px -1px 0px var(--general-section-1); }
  .dashboard-header__right--logged-in > * {
    cursor: pointer; }
  .dashboard-header__right--logged-in-icon {
    margin-right: 0.8rem; }
  .dashboard-header__right--logged-in-separator {
    height: 48px;
    border-right: 1px solid var(--general-section-1);
    margin-left: 2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dashboard-header__right--create-button {
      display: none; } }
  .dashboard-header__right--logged-out-separator {
    height: 48px;
    border-right: 1px solid #151717;
    margin-left: 1.8rem; }
  .dashboard-header__right-hamburger {
    margin-left: 1.8rem;
    cursor: pointer; }
  .dashboard-header--logged-out {
    background-color: var(--brand-dark-grey);
    color: var(--text-colored-background); }
  .dashboard-header__middle--logged-out > :not(:first-child) {
    margin-left: 4.8rem; }
    @media (max-width: 830px) {
      .dashboard-header__middle--logged-out > :not(:first-child) {
        margin-left: 1.2rem; } }
  .dashboard-header__middle--logged-out > * {
    cursor: pointer; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dashboard-header__middle--logged-out {
      display: none; } }
  .dashboard-header__preloader {
    display: flex;
    padding: 0 4rem;
    align-items: center;
    justify-content: flex-end;
    position: fixed;
    z-index: 100;
    box-sizing: border-box;
    height: 48px;
    width: 100%;
    top: 0;
    background-color: var(--general-main-1); }
    @media (min-width: 320px) and (max-width: 767px) {
      .dashboard-header__preloader {
        padding: 0 1.6rem; } }

/** @define footer; weak */
.footer {
  position: fixed;
  bottom: 0;
  padding: 0 1em;
  width: 100%;
  height: 36px;
  box-sizing: border-box;
  z-index: 3;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  transition: opacity 0.3s;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  background: var(--general-main-1);
  color: var(--text-prominent);
  border-top: 1px solid var(--general-section-1); }
  .footer--is-disabled {
    border-top: none; }
    .footer--is-disabled:after {
      opacity: 1;
      pointer-events: auto; }
  .footer__links {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    flex-direction: row;
    height: 100%;
    /* fix issue with rogue tiny-popover div generated in footer links */ }
    .footer__links--left {
      margin-right: auto; }
    .footer__links div {
      height: inherit;
      display: inline-flex;
      align-items: center;
      position: relative; }
  .footer__link {
    padding: 0 0.8em;
    text-decoration: none;
    height: 100%;
    display: inline-flex;
    align-items: center;
    position: relative;
    cursor: pointer; }
    .footer__link:hover {
      background: var(--general-hover); }
  .footer__icon {
    width: 1.6em;
    height: 1.6em; }
  @media (max-width: 768px) {
    .footer {
      display: none; } }

@-webkit-keyframes blinking-network-status {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes blinking-network-status {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

/** @define network-status  */
.network-status__wrapper {
  height: 1.4em;
  position: relative; }
  .network-status__wrapper--is-mobile .network-status__circle {
    margin: 0.2em 0 0.2em -0.2em; }

.network-status__tooltip {
  left: unset;
  -webkit-text-decoration-line: none;
          text-decoration-line: none; }

.network-status__circle {
  background: var(--general-section-1);
  width: 1em;
  height: 1em;
  margin: 0.2em 1.6em;
  border-radius: 50%; }
  .network-status__circle--online {
    background: var(--text-profit-success); }
  .network-status__circle--offline {
    background: var(--text-loss-danger); }
  .network-status__circle--blinker {
    -webkit-animation: blinking-network-status 0.4s alternate infinite;
            animation: blinking-network-status 0.4s alternate infinite;
    background: var(--text-profit-success); }

/** @define server-time */
.server-time {
  display: inline-flex;
  align-self: center;
  margin-right: 1em;
  padding: 0 1em;
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.25;
  color: var(--text-general); }
  .server-time--is-mobile {
    padding: 0 1em 0 0;
    margin-right: 0; }

/** @define ic-settings */
.ic-settings--active {
  position: relative;
  background: var(--state-hover); }
  .ic-settings--active:after {
    content: '';
    height: 0.2em;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: var(--text-prominent); }
  .ic-settings--active .ic-settings__icon {
    pointer-events: none; }

/** @define footer-regulatory-information */
.footer-regulatory-information {
  padding: 2rem; }
  .footer-regulatory-information p {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5; }
  .footer-regulatory-information__link {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--brand-red-coral);
    text-decoration: none; }
  .footer-regulatory-information__icon {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    margin-bottom: 2.4rem; }

/** @define footer-icon-separator */
.footer-icon-separator {
  width: 1px;
  height: 1.6rem !important;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--general-section-1);
  margin: 0 0.1rem; }

.modal-root {
  width: 100vw;
  height: 100vh;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 9998;
  display: none;
  overflow: hidden;
  opacity: 0;
  background-color: var(--overlay-outside-dialog); }
  .modal-root:not(:empty) {
    display: flex;
    opacity: 1; }
  .modal-root--absolute {
    z-index: 9999; }

.account-settings-toggle svg {
  height: 20px;
  width: 20px; }

/** @define error-box */
.error-box {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  width: 100%;
  text-align: center;
  color: var(--text-colored-background); }

/** @define login-prompt */
.login-prompt {
  height: calc(100vh - 84px);
  margin: 0 2em;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; }
  .login-prompt__icon {
    height: 6.4em;
    width: 6.4em;
    margin-bottom: 1em; }
    .login-prompt__icon-svg {
      height: 100%;
      width: 100%; }
  .login-prompt__message {
    font-size: 1.4em; }

.media {
  margin: 0 0 24px; }
  .media__heading {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent);
    margin: 0 0 16px;
    text-transform: none; }
  .media__icon {
    height: 120px;
    margin-right: 1.6em;
    border-radius: 4px;
    min-width: 160px; }
    .media__icon:empty {
      background-color: var(--general-disabled); }
  .media__description {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    color: var(--text-prominent); }
  .media__form {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    text-transform: none;
    text-transform: initial;
    color: var(--text-prominent); }

/** @define side-menu */
.side-menu {
  overflow: hidden; }
  .side-menu__heading {
    padding: 20px 16px; }
  .side-menu__main-header-layout {
    height: 100%;
    min-width: 270px; }
  .side-menu__sub-header-layout {
    padding-top: 56px;
    height: 100%;
    border-left: 2px solid var(--general-main-1); }
  .side-menu__title {
    font-size: var(--text-size-s);
    font-weight: bold;
    margin: 0 0.8rem;
    color: var(--text-prominent); }
  .side-menu__header--active {
    background-color: var(--general-main-1);
    /* postcss-bem-linter: ignore */ }
    .side-menu__header--active:hover {
      background-color: var(--general-main-1) !important; }
    .side-menu__header--active div {
      font-weight: bold; }
  .side-menu__header--disabled {
    opacity: 0.32;
    pointer-events: none; }
  .side-menu__icon {
    transform: rotate(360deg);
    margin-left: auto;
    font-weight: bold; }

/* postcss-bem-linter: ignore */
.dc-vertical-tab__tab .dc-vertical-tab__header {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }
  .dc-vertical-tab__tab .dc-vertical-tab__header .dc-vertical-tab__header__link {
    margin-left: 4px; }
  .dc-vertical-tab__tab .dc-vertical-tab__header--active {
    /* postcss-bem-linter: ignore */ }
    .dc-vertical-tab__tab .dc-vertical-tab__header--active .dc-vertical-tab__header__link {
      margin-left: 0; }
  .dc-vertical-tab__tab .dc-vertical-tab__header--disabled {
    opacity: 0.32;
    pointer-events: none; }

.livechat {
  display: flex;
  width: 100%;
  justify-content: flex-end;
  align-items: center;
  padding-right: 1.6rem; }
  .livechat__icon {
    margin-right: 0.8rem; }
    .livechat__icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center; }
  .livechat__title {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    line-height: 1.25; }

/** @define cookie-banner; weak */
.cookie-banner {
  position: fixed;
  background-color: var(--general-main-2);
  box-shadow: 0 24px 24px 0 rgba(0, 0, 0, 0.08), 0 0 24px 0 rgba(0, 0, 0, 0.08);
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  font-stretch: normal;
  font-style: normal;
  line-height: 1.5;
  letter-spacing: normal;
  padding: 2.8rem 0;
  bottom: 0;
  width: 100%;
  height: 152px;
  text-align: center;
  transition: top 0.3s ease-in-out;
  z-index: 1000; }
  @media (min-width: 320px) and (max-width: 767px) {
    .cookie-banner {
      font-size: 12px;
      font-weight: bold;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      height: fit-content;
      padding: 2.4rem 0; } }
  .cookie-banner--theme-dark {
    box-shadow: 0 24px 24px 0 rgba(0, 0, 0, 0.64), 0 0 24px 0 rgba(0, 0, 0, 0.64); }
  .cookie-banner--is-closed {
    transform: translateY(152px); }
    @media (min-width: 320px) and (max-width: 767px) {
      .cookie-banner--is-closed {
        transform: translateY(168px); } }
  .cookie-banner .description {
    margin: 0 auto; }
    @media (min-width: 1024px) {
      .cookie-banner .description {
        width: 640px; } }
    @media (min-width: 320px) and (max-width: 767px) {
      .cookie-banner .description {
        max-width: 296px; } }
  .cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover, .cookie-banner__btn-accept, .cookie-banner__btn-accept:hover {
    display: inline-block;
    margin: 20px auto 0;
    height: 40px;
    border-width: 2px;
    border-radius: 4px;
    font-stretch: normal;
    font-style: normal;
    line-height: 1.43;
    letter-spacing: normal; }
    @media (min-width: 320px) and (max-width: 767px) {
      .cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover, .cookie-banner__btn-accept, .cookie-banner__btn-accept:hover {
        height: 32px;
        border-width: 1px; } }
  .cookie-banner__btn-dont-accept, .cookie-banner__btn-dont-accept:hover {
    width: 116px;
    margin-right: 8px; }
  .cookie-banner__btn-accept {
    width: 78px; }

.notification-banner {
  position: relative;
  display: flex;
  background-color: var(--general-main-1);
  color: var(--text-prominent);
  border-radius: 4px;
  box-shadow: 0 4px 6px 0 var(--shadow-menu), 0 4px 6px 0 var(--shadow-menu);
  width: 100%;
  max-width: 348px;
  height: 124px;
  transition: transform 0.25s ease, opacity 0.25s linear;
  z-index: 10;
  margin-bottom: 16px; }
  .notification-banner--enter-done {
    opacity: 1;
    transform: translateY(0); }
  .notification-banner--enter, .notification-banner--exit {
    opacity: 0;
    transform: translateY(-16px); }
  .notification-banner--left {
    z-index: 12;
    padding: 1.6rem 0 1.6rem 1.6rem;
    width: 210px; }
  .notification-banner--right {
    position: relative;
    width: 138px; }
  .notification-banner__title {
    font-size: 1.6rem;
    font-weight: bold;
    line-height: 1.5; }
    @media (min-width: 1024px) {
      .notification-banner__title {
        white-space: nowrap; } }
  .notification-banner__description {
    font-size: 1.4rem;
    margin-top: 0.8rem;
    line-height: 1.43; }
  .notification-banner__btn {
    display: inline-block;
    border-width: 1px;
    border-radius: 4px;
    width: -webkit-fit-content;
    width: -moz-fit-content;
    width: fit-content;
    height: 24px;
    margin-top: 19px;
    padding: 0 7px; }
    .notification-banner__btn > span {
      font-size: 1.2rem; }
  .notification-banner__bg {
    position: absolute;
    right: 0;
    background-color: #ff6444;
    width: 100%;
    height: 100%;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 50% 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 50% 100%);
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
    z-index: 11; }
  .notification-banner__img {
    position: absolute;
    right: 8px;
    bottom: 0;
    -o-object-fit: contain;
       object-fit: contain;
    height: 124px;
    z-index: 12; }
  .notification-banner__icon {
    position: absolute;
    z-index: 12;
    right: 16px;
    top: 16px;
    cursor: pointer; }
  @media (min-width: 320px) and (max-width: 767px) {
    .notification-banner {
      height: 100%;
      max-width: 328px;
      width: calc(100% - 0.8rem);
      margin-right: 0.4rem; } }

/** @define page-404 */
.page-404__image {
  margin-right: 1.6rem; }

/** @define account-deactivated */
.account-deactivated {
  padding: 24px 95px;
  color: var(--text-prominent);
  font-weight: bold;
  width: 100%;
  text-align: center;
  line-height: 1.5;
  max-width: 44rem;
  font-size: var(--text-size-s); }

/* @define reality-check */
.reality-check__text:not(:last-child) {
  margin-bottom: 1.2rem; }

.reality-check__text--center {
  text-align: center; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__text--center {
      text-align: left; } }

@media (min-width: 320px) and (max-width: 767px) {
  .reality-check__text--description {
    font-size: 1.2rem; } }

.reality-check__separator {
  width: 100%;
  height: 1px;
  background-color: var(--general-section-1);
  margin: 2.4rem 0; }
  .reality-check__separator--large {
    margin: 4rem 0; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__separator {
      margin: 1.6rem 0; } }

.reality-check__fieldset {
  max-width: 33.5rem;
  margin: auto;
  padding-top: 1.2rem; }

.reality-check__column-wrapper {
  display: flex;
  flex-direction: row;
  overflow-y: auto; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__column-wrapper {
      flex-direction: column;
      padding: 0.8rem 2.4rem; } }
  @media only screen and (min-width: 320px) and (max-width: 767px) and (max-width: 340px) {
    .reality-check__column-wrapper {
      padding: 0.8rem 1.6rem; } }

.reality-check__column:not(:last-child) {
  margin-right: 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__column:not(:last-child) {
      margin-right: 0;
      margin-bottom: 0.8rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .reality-check__column-content {
    padding-top: 1.6rem; } }

.reality-check__row {
  width: 25.1rem;
  height: 4rem;
  background-color: var(--general-section-1);
  margin-bottom: 0.1rem;
  display: flex;
  align-items: center;
  padding: 1rem 1.6rem;
  font-size: 1.4rem; }
  .reality-check__row:first-child {
    border-radius: 8px 8px 0 0; }
  .reality-check__row:last-child {
    margin-bottom: 0.8rem;
    border-radius: 0 0 8px 8px; }
  .reality-check__row :first-child {
    width: 12.8rem;
    padding-right: 0.8rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .reality-check__row :first-child {
        width: 16.8rem; } }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__row :nth-child(2) {
      margin-left: auto; } }

.reality-check__button--full-width {
  width: 100%; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__button--full-width {
      width: 25.1rem;
      display: flex;
      margin-left: auto;
      margin-right: auto; } }

.reality-check__submit {
  background-color: unset;
  padding: 0 0.8rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .reality-check__submit {
      padding: 0 0.8rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .reality-check__wrapper {
    overflow-y: auto;
    overflow-x: hidden;
    padding: 2.4rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_reality-check .dc-modal-header__title--reality-check {
    margin: auto;
    text-align: center;
    line-height: 1.43; } }

@media (min-width: 320px) and (max-width: 767px) {
  .dc-modal__container_reality-check .dc-modal-body {
    padding: 0; } }

/* @define reset-password */
.reset-password {
  margin: 1.6rem 1.6rem 0; }
  .reset-password__residence-selection, .reset-password__password-selection {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-flow: nowrap column; }
  .reset-password__password-selection .reset-password__heading {
    margin-bottom: 3.3rem; }
  .reset-password__heading {
    margin-bottom: 0.8rem; }
  .reset-password__text {
    text-align: center;
    margin-bottom: 3.3rem; }
  .reset-password__subtext {
    margin: 1rem 0 2.4rem; }
  .reset-password__btn {
    margin: 0;
    background-color: var(--button-primary-default);
    font-weight: bold;
    color: var(--text-colored-background);
    font-size: 1.2rem; }
    .reset-password__btn:hover {
      background-color: var(--button-primary-hover); }
    .reset-password__btn--disabled {
      opacity: 0.32;
      cursor: not-allowed !important; }
  .reset-password__fieldset {
    position: relative;
    width: 100%; }
    @media (min-width: 1024px) {
      .reset-password__fieldset {
        max-width: 30rem; } }
  .reset-password__password-field {
    /* postcss-bem-linter: ignore */ }
    .reset-password__password-field > label {
      top: 0.9rem;
      background-color: var(--general-main-2); }

.redirect-notice {
  z-index: 50000; }

.dc-modal__container_welcome {
  overflow: visible; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-modal__container_welcome {
      overflow: auto;
      max-height: 95vh; } }

.welcome__title {
  font-size: 1.6rem;
  color: var(--text-prominent);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: 1.75;
  margin: 2.4rem; }

.welcome__message {
  display: none;
  flex-direction: row;
  position: fixed;
  align-items: center; }
  .welcome__message__text {
    font-size: 1.6rem;
    color: var(--text-colored-background);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.75;
    padding-left: 0.8rem; }
  .welcome__message--left {
    top: 50%;
    left: -1.6rem;
    transform: translate(-100%, -50%); }
    .welcome__message--left .welcome__message__text {
      width: 12rem; }
  .welcome__message--right {
    top: 50%;
    right: -1.6rem;
    transform: translate(100%, -50%); }
  @media (min-width: 1024px) {
    .welcome__message--visible {
      display: flex; } }

.welcome__carousel {
  width: 100%; }

.welcome-column {
  width: 32rem;
  height: 46.3rem;
  position: relative;
  padding: 1.6rem 3.2rem;
  background-repeat: no-repeat;
  background-position: top right; }
  @media (min-width: 320px) and (max-width: 767px) {
    .welcome-column {
      width: 100%;
      box-shadow: none; }
      .welcome-column:not(:last-child) {
        margin-bottom: 3rem; } }
  .welcome-column:hover {
    box-shadow: 0 0 3rem 0.5rem var(--shadow-drop); }
  .welcome-column--left:hover {
    background-image: url(/public/images/common/welcome-bg-blue.svg); }
  @media (min-width: 320px) and (max-width: 767px) {
    .welcome-column--left {
      background-image: url(/public/images/common/welcome-bg-blue.svg); } }
  .welcome-column--right:hover {
    background-image: url(/public/images/common/welcome-bg-red.svg); }
  @media (min-width: 320px) and (max-width: 767px) {
    .welcome-column--right {
      background-image: url(/public/images/common/welcome-bg-red.svg); } }
  .welcome-column__icons {
    display: flex;
    flex-direction: row;
    justify-content: center; }
  .welcome-column__icon {
    margin: 0.8rem 0.6rem 1.6rem; }
  .welcome-column__title {
    font-size: 1.6rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.75; }
  .welcome-column__description {
    font-size: 1.2rem;
    color: var(--text-prominent);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.25;
    line-height: 1.5;
    height: 7.8rem;
    padding: 0.8rem 0 1.6rem;
    border-bottom: 1px solid var(--general-section-1); }
  .welcome-column__footer {
    position: absolute;
    bottom: 1.6rem;
    left: 1.6rem;
    width: calc(100% - 3.2rem); }
    @media (min-width: 320px) and (max-width: 767px) {
      .welcome-column__footer {
        left: 3.2rem;
        width: calc(100% - 6.4rem);
        bottom: 0.6rem; } }
    .welcome-column__footer__text {
      font-size: 1.2rem;
      color: var(--text-less-prominent);
      font-weight: 400;
      text-transform: none;
      text-align: center;
      line-height: 1.25;
      padding-top: 0.8rem; }
      @media (min-width: 1024px) {
        .welcome-column__footer__text {
          display: none; } }
  .welcome-column__button {
    width: 100%; }
  .welcome-column__platforms__title {
    font-size: 1.4rem;
    color: var(--text-prominent);
    font-weight: 700;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    padding: 2.4rem 1.6rem 1.6rem; }
  .welcome-column__platforms__container {
    display: flex;
    flex-direction: column; }
  .welcome-column__platform {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-template-rows: auto auto;
    grid-column-gap: 0.8rem;
    grid-row-gap: 0.4rem;
    margin-bottom: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .welcome-column__platform {
        margin-bottom: 0.6rem; } }
    .welcome-column__platform__icon {
      grid-row: 1 / -1;
      grid-column: 1; }
    .welcome-column__platform__title {
      font-size: 1.2rem;
      color: var(--text-prominent);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.25;
      grid-row: 1;
      grid-column: 2; }
    .welcome-column__platform__description {
      font-size: 1.2rem;
      color: var(--text-less-prominent);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.25;
      grid-row: 2;
      grid-column: 2; }

.welcome__body {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly; }
  @media (min-width: 320px) and (max-width: 767px) {
    .welcome__body {
      flex-wrap: wrap; } }

.welcome__footer {
  font-size: 1.2rem;
  color: var(--text-less-prominent);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  padding: 2.4rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .welcome__footer {
      display: none; } }

