/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~account_dist_js_api-token_js_d99d1b68"],{

/***/ "../../account/dist/js/api-token.js":
/*!******************************************!*\
  !*** ../../account/dist/js/api-token.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/api-token/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_api_token)\\n});\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: ../../../node_modules/formik/node_modules/react-fast-compare/index.js\\nvar react_fast_compare = __webpack_require__(\\\"../../../node_modules/formik/node_modules/react-fast-compare/index.js\\\");\\nvar react_fast_compare_default = /*#__PURE__*/__webpack_require__.n(react_fast_compare);\\n;// CONCATENATED MODULE: ../../../node_modules/deepmerge/dist/es.js\\nvar isMergeableObject = function isMergeableObject(value) {\\n\\treturn isNonNullObject(value)\\n\\t\\t&& !isSpecial(value)\\n};\\n\\nfunction isNonNullObject(value) {\\n\\treturn !!value && typeof value === 'object'\\n}\\n\\nfunction isSpecial(value) {\\n\\tvar stringValue = Object.prototype.toString.call(value);\\n\\n\\treturn stringValue === '[object RegExp]'\\n\\t\\t|| stringValue === '[object Date]'\\n\\t\\t|| isReactElement(value)\\n}\\n\\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\\n\\nfunction isReactElement(value) {\\n\\treturn value.$$typeof === REACT_ELEMENT_TYPE\\n}\\n\\nfunction emptyTarget(val) {\\n\\treturn Array.isArray(val) ? [] : {}\\n}\\n\\nfunction cloneUnlessOtherwiseSpecified(value, options) {\\n\\treturn (options.clone !== false && options.isMergeableObject(value))\\n\\t\\t? deepmerge(emptyTarget(value), value, options)\\n\\t\\t: value\\n}\\n\\nfunction defaultArrayMerge(target, source, options) {\\n\\treturn target.concat(source).map(function(element) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(element, options)\\n\\t})\\n}\\n\\nfunction mergeObject(target, source, options) {\\n\\tvar destination = {};\\n\\tif (options.isMergeableObject(target)) {\\n\\t\\tObject.keys(target).forEach(function(key) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\\n\\t\\t});\\n\\t}\\n\\tObject.keys(source).forEach(function(key) {\\n\\t\\tif (!options.isMergeableObject(source[key]) || !target[key]) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\\n\\t\\t} else {\\n\\t\\t\\tdestination[key] = deepmerge(target[key], source[key], options);\\n\\t\\t}\\n\\t});\\n\\treturn destination\\n}\\n\\nfunction deepmerge(target, source, options) {\\n\\toptions = options || {};\\n\\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\\n\\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\\n\\n\\tvar sourceIsArray = Array.isArray(source);\\n\\tvar targetIsArray = Array.isArray(target);\\n\\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\\n\\n\\tif (!sourceAndTargetTypesMatch) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(source, options)\\n\\t} else if (sourceIsArray) {\\n\\t\\treturn options.arrayMerge(target, source, options)\\n\\t} else {\\n\\t\\treturn mergeObject(target, source, options)\\n\\t}\\n}\\n\\ndeepmerge.all = function deepmergeAll(array, options) {\\n\\tif (!Array.isArray(array)) {\\n\\t\\tthrow new Error('first argument should be an array')\\n\\t}\\n\\n\\treturn array.reduce(function(prev, next) {\\n\\t\\treturn deepmerge(prev, next, options)\\n\\t}, {})\\n};\\n\\nvar deepmerge_1 = deepmerge;\\n\\n/* harmony default export */ const es = (deepmerge_1);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_freeGlobal.js\\n/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\\n\\n/* harmony default export */ const _freeGlobal = (freeGlobal);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_root.js\\n\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\\n\\n/** Used as a reference to the global object. */\\nvar root = _freeGlobal || freeSelf || Function('return this')();\\n\\n/* harmony default export */ const _root = (root);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Symbol.js\\n\\n\\n/** Built-in value references. */\\nvar _Symbol_Symbol = _root.Symbol;\\n\\n/* harmony default export */ const _Symbol = (_Symbol_Symbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getRawTag.js\\n\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar nativeObjectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the raw `toStringTag`.\\n */\\nfunction getRawTag(value) {\\n  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),\\n      tag = value[symToStringTag];\\n\\n  try {\\n    value[symToStringTag] = undefined;\\n    var unmasked = true;\\n  } catch (e) {}\\n\\n  var result = nativeObjectToString.call(value);\\n  if (unmasked) {\\n    if (isOwn) {\\n      value[symToStringTag] = tag;\\n    } else {\\n      delete value[symToStringTag];\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _getRawTag = (getRawTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_objectToString.js\\n/** Used for built-in method references. */\\nvar _objectToString_objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar _objectToString_nativeObjectToString = _objectToString_objectProto.toString;\\n\\n/**\\n * Converts `value` to a string using `Object.prototype.toString`.\\n *\\n * @private\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n */\\nfunction objectToString(value) {\\n  return _objectToString_nativeObjectToString.call(value);\\n}\\n\\n/* harmony default export */ const _objectToString = (objectToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetTag.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar nullTag = '[object Null]',\\n    undefinedTag = '[object Undefined]';\\n\\n/** Built-in value references. */\\nvar _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\\n\\n/**\\n * The base implementation of `getTag` without fallbacks for buggy environments.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction baseGetTag(value) {\\n  if (value == null) {\\n    return value === undefined ? undefinedTag : nullTag;\\n  }\\n  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))\\n    ? _getRawTag(value)\\n    : _objectToString(value);\\n}\\n\\n/* harmony default export */ const _baseGetTag = (baseGetTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_overArg.js\\n/**\\n * Creates a unary function that invokes `func` with its argument transformed.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {Function} transform The argument transform.\\n * @returns {Function} Returns the new function.\\n */\\nfunction overArg(func, transform) {\\n  return function(arg) {\\n    return func(transform(arg));\\n  };\\n}\\n\\n/* harmony default export */ const _overArg = (overArg);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getPrototype.js\\n\\n\\n/** Built-in value references. */\\nvar getPrototype = _overArg(Object.getPrototypeOf, Object);\\n\\n/* harmony default export */ const _getPrototype = (getPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObjectLike.js\\n/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return value != null && typeof value == 'object';\\n}\\n\\n/* harmony default export */ const lodash_es_isObjectLike = (isObjectLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isPlainObject.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar funcProto = Function.prototype,\\n    isPlainObject_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar isPlainObject_hasOwnProperty = isPlainObject_objectProto.hasOwnProperty;\\n\\n/** Used to infer the `Object` constructor. */\\nvar objectCtorString = funcToString.call(Object);\\n\\n/**\\n * Checks if `value` is a plain object, that is, an object created by the\\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.8.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n * }\\n *\\n * _.isPlainObject(new Foo);\\n * // => false\\n *\\n * _.isPlainObject([1, 2, 3]);\\n * // => false\\n *\\n * _.isPlainObject({ 'x': 0, 'y': 0 });\\n * // => true\\n *\\n * _.isPlainObject(Object.create(null));\\n * // => true\\n */\\nfunction isPlainObject(value) {\\n  if (!lodash_es_isObjectLike(value) || _baseGetTag(value) != objectTag) {\\n    return false;\\n  }\\n  var proto = _getPrototype(value);\\n  if (proto === null) {\\n    return true;\\n  }\\n  var Ctor = isPlainObject_hasOwnProperty.call(proto, 'constructor') && proto.constructor;\\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\\n    funcToString.call(Ctor) == objectCtorString;\\n}\\n\\n/* harmony default export */ const lodash_es_isPlainObject = (isPlainObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheClear.js\\n/**\\n * Removes all key-value entries from the list cache.\\n *\\n * @private\\n * @name clear\\n * @memberOf ListCache\\n */\\nfunction listCacheClear() {\\n  this.__data__ = [];\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _listCacheClear = (listCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/eq.js\\n/**\\n * Performs a\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * comparison between two values to determine if they are equivalent.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n * @example\\n *\\n * var object = { 'a': 1 };\\n * var other = { 'a': 1 };\\n *\\n * _.eq(object, object);\\n * // => true\\n *\\n * _.eq(object, other);\\n * // => false\\n *\\n * _.eq('a', 'a');\\n * // => true\\n *\\n * _.eq('a', Object('a'));\\n * // => false\\n *\\n * _.eq(NaN, NaN);\\n * // => true\\n */\\nfunction eq(value, other) {\\n  return value === other || (value !== value && other !== other);\\n}\\n\\n/* harmony default export */ const lodash_es_eq = (eq);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assocIndexOf.js\\n\\n\\n/**\\n * Gets the index at which the `key` is found in `array` of key-value pairs.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {*} key The key to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction assocIndexOf(array, key) {\\n  var length = array.length;\\n  while (length--) {\\n    if (lodash_es_eq(array[length][0], key)) {\\n      return length;\\n    }\\n  }\\n  return -1;\\n}\\n\\n/* harmony default export */ const _assocIndexOf = (assocIndexOf);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheDelete.js\\n\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * Removes `key` and its value from the list cache.\\n *\\n * @private\\n * @name delete\\n * @memberOf ListCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction listCacheDelete(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    return false;\\n  }\\n  var lastIndex = data.length - 1;\\n  if (index == lastIndex) {\\n    data.pop();\\n  } else {\\n    splice.call(data, index, 1);\\n  }\\n  --this.size;\\n  return true;\\n}\\n\\n/* harmony default export */ const _listCacheDelete = (listCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheGet.js\\n\\n\\n/**\\n * Gets the list cache value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf ListCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction listCacheGet(key) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  return index < 0 ? undefined : data[index][1];\\n}\\n\\n/* harmony default export */ const _listCacheGet = (listCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheHas.js\\n\\n\\n/**\\n * Checks if a list cache value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf ListCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction listCacheHas(key) {\\n  return _assocIndexOf(this.__data__, key) > -1;\\n}\\n\\n/* harmony default export */ const _listCacheHas = (listCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_listCacheSet.js\\n\\n\\n/**\\n * Sets the list cache `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf ListCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the list cache instance.\\n */\\nfunction listCacheSet(key, value) {\\n  var data = this.__data__,\\n      index = _assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    ++this.size;\\n    data.push([key, value]);\\n  } else {\\n    data[index][1] = value;\\n  }\\n  return this;\\n}\\n\\n/* harmony default export */ const _listCacheSet = (listCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_ListCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates an list cache object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction ListCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `ListCache`.\\nListCache.prototype.clear = _listCacheClear;\\nListCache.prototype['delete'] = _listCacheDelete;\\nListCache.prototype.get = _listCacheGet;\\nListCache.prototype.has = _listCacheHas;\\nListCache.prototype.set = _listCacheSet;\\n\\n/* harmony default export */ const _ListCache = (ListCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the stack.\\n *\\n * @private\\n * @name clear\\n * @memberOf Stack\\n */\\nfunction stackClear() {\\n  this.__data__ = new _ListCache;\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _stackClear = (stackClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackDelete.js\\n/**\\n * Removes `key` and its value from the stack.\\n *\\n * @private\\n * @name delete\\n * @memberOf Stack\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction stackDelete(key) {\\n  var data = this.__data__,\\n      result = data['delete'](key);\\n\\n  this.size = data.size;\\n  return result;\\n}\\n\\n/* harmony default export */ const _stackDelete = (stackDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackGet.js\\n/**\\n * Gets the stack value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Stack\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction stackGet(key) {\\n  return this.__data__.get(key);\\n}\\n\\n/* harmony default export */ const _stackGet = (stackGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackHas.js\\n/**\\n * Checks if a stack value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Stack\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction stackHas(key) {\\n  return this.__data__.has(key);\\n}\\n\\n/* harmony default export */ const _stackHas = (stackHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isObject.js\\n/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return value != null && (type == 'object' || type == 'function');\\n}\\n\\n/* harmony default export */ const lodash_es_isObject = (isObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isFunction.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar asyncTag = '[object AsyncFunction]',\\n    funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]',\\n    proxyTag = '[object Proxy]';\\n\\n/**\\n * Checks if `value` is classified as a `Function` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\\n * @example\\n *\\n * _.isFunction(_);\\n * // => true\\n *\\n * _.isFunction(/abc/);\\n * // => false\\n */\\nfunction isFunction(value) {\\n  if (!lodash_es_isObject(value)) {\\n    return false;\\n  }\\n  // The use of `Object#toString` avoids issues with the `typeof` operator\\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\\n  var tag = _baseGetTag(value);\\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\\n}\\n\\n/* harmony default export */ const lodash_es_isFunction = (isFunction);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_coreJsData.js\\n\\n\\n/** Used to detect overreaching core-js shims. */\\nvar coreJsData = _root[\\\"__core-js_shared__\\\"];\\n\\n/* harmony default export */ const _coreJsData = (coreJsData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isMasked.js\\n\\n\\n/** Used to detect methods masquerading as native. */\\nvar maskSrcKey = (function() {\\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\\n  return uid ? ('Symbol(src)_1.' + uid) : '';\\n}());\\n\\n/**\\n * Checks if `func` has its source masked.\\n *\\n * @private\\n * @param {Function} func The function to check.\\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\\n */\\nfunction isMasked(func) {\\n  return !!maskSrcKey && (maskSrcKey in func);\\n}\\n\\n/* harmony default export */ const _isMasked = (isMasked);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toSource.js\\n/** Used for built-in method references. */\\nvar _toSource_funcProto = Function.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _toSource_funcToString = _toSource_funcProto.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to convert.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return _toSource_funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\n/* harmony default export */ const _toSource = (toSource);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsNative.js\\n\\n\\n\\n\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar _baseIsNative_funcProto = Function.prototype,\\n    _baseIsNative_objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar _baseIsNative_funcToString = _baseIsNative_funcProto.toString;\\n\\n/** Used to check objects for own properties. */\\nvar _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * The base implementation of `_.isNative` without bad shim checks.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n */\\nfunction baseIsNative(value) {\\n  if (!lodash_es_isObject(value) || _isMasked(value)) {\\n    return false;\\n  }\\n  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;\\n  return pattern.test(_toSource(value));\\n}\\n\\n/* harmony default export */ const _baseIsNative = (baseIsNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getValue.js\\n/**\\n * Gets the value at `key` of `object`.\\n *\\n * @private\\n * @param {Object} [object] The object to query.\\n * @param {string} key The key of the property to get.\\n * @returns {*} Returns the property value.\\n */\\nfunction getValue(object, key) {\\n  return object == null ? undefined : object[key];\\n}\\n\\n/* harmony default export */ const _getValue = (getValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getNative.js\\n\\n\\n\\n/**\\n * Gets the native function at `key` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {string} key The key of the method to get.\\n * @returns {*} Returns the function if it's native, else `undefined`.\\n */\\nfunction getNative(object, key) {\\n  var value = _getValue(object, key);\\n  return _baseIsNative(value) ? value : undefined;\\n}\\n\\n/* harmony default export */ const _getNative = (getNative);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Map.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Map = _getNative(_root, 'Map');\\n\\n/* harmony default export */ const _Map = (Map);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeCreate.js\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar nativeCreate = _getNative(Object, 'create');\\n\\n/* harmony default export */ const _nativeCreate = (nativeCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashClear.js\\n\\n\\n/**\\n * Removes all key-value entries from the hash.\\n *\\n * @private\\n * @name clear\\n * @memberOf Hash\\n */\\nfunction hashClear() {\\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\\n  this.size = 0;\\n}\\n\\n/* harmony default export */ const _hashClear = (hashClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashDelete.js\\n/**\\n * Removes `key` and its value from the hash.\\n *\\n * @private\\n * @name delete\\n * @memberOf Hash\\n * @param {Object} hash The hash to modify.\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction hashDelete(key) {\\n  var result = this.has(key) && delete this.__data__[key];\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _hashDelete = (hashDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashGet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/** Used for built-in method references. */\\nvar _hashGet_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;\\n\\n/**\\n * Gets the hash value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Hash\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction hashGet(key) {\\n  var data = this.__data__;\\n  if (_nativeCreate) {\\n    var result = data[key];\\n    return result === HASH_UNDEFINED ? undefined : result;\\n  }\\n  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;\\n}\\n\\n/* harmony default export */ const _hashGet = (hashGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashHas.js\\n\\n\\n/** Used for built-in method references. */\\nvar _hashHas_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;\\n\\n/**\\n * Checks if a hash value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Hash\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction hashHas(key) {\\n  var data = this.__data__;\\n  return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);\\n}\\n\\n/* harmony default export */ const _hashHas = (hashHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_hashSet.js\\n\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Sets the hash `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Hash\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the hash instance.\\n */\\nfunction hashSet(key, value) {\\n  var data = this.__data__;\\n  this.size += this.has(key) ? 0 : 1;\\n  data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;\\n  return this;\\n}\\n\\n/* harmony default export */ const _hashSet = (hashSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Hash.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = _hashClear;\\nHash.prototype['delete'] = _hashDelete;\\nHash.prototype.get = _hashGet;\\nHash.prototype.has = _hashHas;\\nHash.prototype.set = _hashSet;\\n\\n/* harmony default export */ const _Hash = (Hash);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheClear.js\\n\\n\\n\\n\\n/**\\n * Removes all key-value entries from the map.\\n *\\n * @private\\n * @name clear\\n * @memberOf MapCache\\n */\\nfunction mapCacheClear() {\\n  this.size = 0;\\n  this.__data__ = {\\n    'hash': new _Hash,\\n    'map': new (_Map || _ListCache),\\n    'string': new _Hash\\n  };\\n}\\n\\n/* harmony default export */ const _mapCacheClear = (mapCacheClear);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isKeyable.js\\n/**\\n * Checks if `value` is suitable for use as unique object key.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\\n */\\nfunction isKeyable(value) {\\n  var type = typeof value;\\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\\n    ? (value !== '__proto__')\\n    : (value === null);\\n}\\n\\n/* harmony default export */ const _isKeyable = (isKeyable);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getMapData.js\\n\\n\\n/**\\n * Gets the data for `map`.\\n *\\n * @private\\n * @param {Object} map The map to query.\\n * @param {string} key The reference key.\\n * @returns {*} Returns the map data.\\n */\\nfunction getMapData(map, key) {\\n  var data = map.__data__;\\n  return _isKeyable(key)\\n    ? data[typeof key == 'string' ? 'string' : 'hash']\\n    : data.map;\\n}\\n\\n/* harmony default export */ const _getMapData = (getMapData);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheDelete.js\\n\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  var result = _getMapData(this, key)['delete'](key);\\n  this.size -= result ? 1 : 0;\\n  return result;\\n}\\n\\n/* harmony default export */ const _mapCacheDelete = (mapCacheDelete);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheGet.js\\n\\n\\n/**\\n * Gets the map value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf MapCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction mapCacheGet(key) {\\n  return _getMapData(this, key).get(key);\\n}\\n\\n/* harmony default export */ const _mapCacheGet = (mapCacheGet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheHas.js\\n\\n\\n/**\\n * Checks if a map value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf MapCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction mapCacheHas(key) {\\n  return _getMapData(this, key).has(key);\\n}\\n\\n/* harmony default export */ const _mapCacheHas = (mapCacheHas);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_mapCacheSet.js\\n\\n\\n/**\\n * Sets the map `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf MapCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the map cache instance.\\n */\\nfunction mapCacheSet(key, value) {\\n  var data = _getMapData(this, key),\\n      size = data.size;\\n\\n  data.set(key, value);\\n  this.size += data.size == size ? 0 : 1;\\n  return this;\\n}\\n\\n/* harmony default export */ const _mapCacheSet = (mapCacheSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_MapCache.js\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries == null ? 0 : entries.length;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = _mapCacheClear;\\nMapCache.prototype['delete'] = _mapCacheDelete;\\nMapCache.prototype.get = _mapCacheGet;\\nMapCache.prototype.has = _mapCacheHas;\\nMapCache.prototype.set = _mapCacheSet;\\n\\n/* harmony default export */ const _MapCache = (MapCache);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stackSet.js\\n\\n\\n\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * Sets the stack `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Stack\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the stack cache instance.\\n */\\nfunction stackSet(key, value) {\\n  var data = this.__data__;\\n  if (data instanceof _ListCache) {\\n    var pairs = data.__data__;\\n    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\\n      pairs.push([key, value]);\\n      this.size = ++data.size;\\n      return this;\\n    }\\n    data = this.__data__ = new _MapCache(pairs);\\n  }\\n  data.set(key, value);\\n  this.size = data.size;\\n  return this;\\n}\\n\\n/* harmony default export */ const _stackSet = (stackSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Stack.js\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Creates a stack cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Stack(entries) {\\n  var data = this.__data__ = new _ListCache(entries);\\n  this.size = data.size;\\n}\\n\\n// Add methods to `Stack`.\\nStack.prototype.clear = _stackClear;\\nStack.prototype['delete'] = _stackDelete;\\nStack.prototype.get = _stackGet;\\nStack.prototype.has = _stackHas;\\nStack.prototype.set = _stackSet;\\n\\n/* harmony default export */ const _Stack = (Stack);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayEach.js\\n/**\\n * A specialized version of `_.forEach` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayEach(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length;\\n\\n  while (++index < length) {\\n    if (iteratee(array[index], index, array) === false) {\\n      break;\\n    }\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayEach = (arrayEach);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_defineProperty.js\\n\\n\\nvar defineProperty = (function() {\\n  try {\\n    var func = _getNative(Object, 'defineProperty');\\n    func({}, '', {});\\n    return func;\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _defineProperty = (defineProperty);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignValue.js\\n\\n\\n/**\\n * The base implementation of `assignValue` and `assignMergeValue` without\\n * value checks.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction baseAssignValue(object, key, value) {\\n  if (key == '__proto__' && _defineProperty) {\\n    _defineProperty(object, key, {\\n      'configurable': true,\\n      'enumerable': true,\\n      'value': value,\\n      'writable': true\\n    });\\n  } else {\\n    object[key] = value;\\n  }\\n}\\n\\n/* harmony default export */ const _baseAssignValue = (baseAssignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_assignValue.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _assignValue_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;\\n\\n/**\\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction assignValue(object, key, value) {\\n  var objValue = object[key];\\n  if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) ||\\n      (value === undefined && !(key in object))) {\\n    _baseAssignValue(object, key, value);\\n  }\\n}\\n\\n/* harmony default export */ const _assignValue = (assignValue);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyObject.js\\n\\n\\n\\n/**\\n * Copies properties of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy properties from.\\n * @param {Array} props The property identifiers to copy.\\n * @param {Object} [object={}] The object to copy properties to.\\n * @param {Function} [customizer] The function to customize copied values.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copyObject(source, props, object, customizer) {\\n  var isNew = !object;\\n  object || (object = {});\\n\\n  var index = -1,\\n      length = props.length;\\n\\n  while (++index < length) {\\n    var key = props[index];\\n\\n    var newValue = customizer\\n      ? customizer(object[key], source[key], key, object, source)\\n      : undefined;\\n\\n    if (newValue === undefined) {\\n      newValue = source[key];\\n    }\\n    if (isNew) {\\n      _baseAssignValue(object, key, newValue);\\n    } else {\\n      _assignValue(object, key, newValue);\\n    }\\n  }\\n  return object;\\n}\\n\\n/* harmony default export */ const _copyObject = (copyObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseTimes.js\\n/**\\n * The base implementation of `_.times` without support for iteratee shorthands\\n * or max array length checks.\\n *\\n * @private\\n * @param {number} n The number of times to invoke `iteratee`.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the array of results.\\n */\\nfunction baseTimes(n, iteratee) {\\n  var index = -1,\\n      result = Array(n);\\n\\n  while (++index < n) {\\n    result[index] = iteratee(index);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseTimes = (baseTimes);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsArguments.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]';\\n\\n/**\\n * The base implementation of `_.isArguments`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n */\\nfunction baseIsArguments(value) {\\n  return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;\\n}\\n\\n/* harmony default export */ const _baseIsArguments = (baseIsArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArguments.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar isArguments_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;\\n\\n/**\\n * Checks if `value` is likely an `arguments` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArguments(function() { return arguments; }());\\n * // => true\\n *\\n * _.isArguments([1, 2, 3]);\\n * // => false\\n */\\nvar isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {\\n  return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, 'callee') &&\\n    !propertyIsEnumerable.call(value, 'callee');\\n};\\n\\n/* harmony default export */ const lodash_es_isArguments = (isArguments);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArray.js\\n/**\\n * Checks if `value` is classified as an `Array` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\\n * @example\\n *\\n * _.isArray([1, 2, 3]);\\n * // => true\\n *\\n * _.isArray(document.body.children);\\n * // => false\\n *\\n * _.isArray('abc');\\n * // => false\\n *\\n * _.isArray(_.noop);\\n * // => false\\n */\\nvar isArray = Array.isArray;\\n\\n/* harmony default export */ const lodash_es_isArray = (isArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubFalse.js\\n/**\\n * This method returns `false`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {boolean} Returns `false`.\\n * @example\\n *\\n * _.times(2, _.stubFalse);\\n * // => [false, false]\\n */\\nfunction stubFalse() {\\n  return false;\\n}\\n\\n/* harmony default export */ const lodash_es_stubFalse = (stubFalse);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isBuffer.js\\n\\n\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = freeModule && freeModule.exports === freeExports;\\n\\n/** Built-in value references. */\\nvar Buffer = moduleExports ? _root.Buffer : undefined;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\\n\\n/**\\n * Checks if `value` is a buffer.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\\n * @example\\n *\\n * _.isBuffer(new Buffer(2));\\n * // => true\\n *\\n * _.isBuffer(new Uint8Array(2));\\n * // => false\\n */\\nvar isBuffer = nativeIsBuffer || lodash_es_stubFalse;\\n\\n/* harmony default export */ const lodash_es_isBuffer = (isBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isIndex.js\\n/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/** Used to detect unsigned integer values. */\\nvar reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n\\n/**\\n * Checks if `value` is a valid array-like index.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\\n */\\nfunction isIndex(value, length) {\\n  var type = typeof value;\\n  length = length == null ? MAX_SAFE_INTEGER : length;\\n\\n  return !!length &&\\n    (type == 'number' ||\\n      (type != 'symbol' && reIsUint.test(value))) &&\\n        (value > -1 && value % 1 == 0 && value < length);\\n}\\n\\n/* harmony default export */ const _isIndex = (isIndex);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isLength.js\\n/** Used as references for various `Number` constants. */\\nvar isLength_MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/**\\n * Checks if `value` is a valid array-like length.\\n *\\n * **Note:** This method is loosely based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\\n * @example\\n *\\n * _.isLength(3);\\n * // => true\\n *\\n * _.isLength(Number.MIN_VALUE);\\n * // => false\\n *\\n * _.isLength(Infinity);\\n * // => false\\n *\\n * _.isLength('3');\\n * // => false\\n */\\nfunction isLength(value) {\\n  return typeof value == 'number' &&\\n    value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;\\n}\\n\\n/* harmony default export */ const lodash_es_isLength = (isLength);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsTypedArray.js\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsTypedArray_argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    _baseIsTypedArray_funcTag = '[object Function]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    _baseIsTypedArray_objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values of typed arrays. */\\nvar typedArrayTags = {};\\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\\ntypedArrayTags[uint32Tag] = true;\\ntypedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =\\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\\ntypedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =\\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\\ntypedArrayTags[_baseIsTypedArray_objectTag] = typedArrayTags[regexpTag] =\\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\\ntypedArrayTags[weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n */\\nfunction baseIsTypedArray(value) {\\n  return lodash_es_isObjectLike(value) &&\\n    lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];\\n}\\n\\n/* harmony default export */ const _baseIsTypedArray = (baseIsTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseUnary.js\\n/**\\n * The base implementation of `_.unary` without support for storing metadata.\\n *\\n * @private\\n * @param {Function} func The function to cap arguments for.\\n * @returns {Function} Returns the new capped function.\\n */\\nfunction baseUnary(func) {\\n  return function(value) {\\n    return func(value);\\n  };\\n}\\n\\n/* harmony default export */ const _baseUnary = (baseUnary);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nodeUtil.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _nodeUtil_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _nodeUtil_freeModule = _nodeUtil_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _nodeUtil_moduleExports = _nodeUtil_freeModule && _nodeUtil_freeModule.exports === _nodeUtil_freeExports;\\n\\n/** Detect free variable `process` from Node.js. */\\nvar freeProcess = _nodeUtil_moduleExports && _freeGlobal.process;\\n\\n/** Used to access faster Node.js helpers. */\\nvar nodeUtil = (function() {\\n  try {\\n    // Use `util.types` for Node.js 10+.\\n    var types = _nodeUtil_freeModule && _nodeUtil_freeModule.require && _nodeUtil_freeModule.require('util').types;\\n\\n    if (types) {\\n      return types;\\n    }\\n\\n    // Legacy `process.binding('util')` for Node.js < 10.\\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\\n  } catch (e) {}\\n}());\\n\\n/* harmony default export */ const _nodeUtil = (nodeUtil);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isTypedArray.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\\n\\n/**\\n * Checks if `value` is classified as a typed array.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\\n * @example\\n *\\n * _.isTypedArray(new Uint8Array);\\n * // => true\\n *\\n * _.isTypedArray([]);\\n * // => false\\n */\\nvar isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\\n\\n/* harmony default export */ const lodash_es_isTypedArray = (isTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayLikeKeys.js\\n\\n\\n\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _arrayLikeKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * Creates an array of the enumerable property names of the array-like `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @param {boolean} inherited Specify returning inherited property names.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction arrayLikeKeys(value, inherited) {\\n  var isArr = lodash_es_isArray(value),\\n      isArg = !isArr && lodash_es_isArguments(value),\\n      isBuff = !isArr && !isArg && lodash_es_isBuffer(value),\\n      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),\\n      skipIndexes = isArr || isArg || isBuff || isType,\\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\\n      length = result.length;\\n\\n  for (var key in value) {\\n    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&\\n        !(skipIndexes && (\\n           // Safari 9 has enumerable `arguments.length` in strict mode.\\n           key == 'length' ||\\n           // Node.js 0.10 has enumerable non-index properties on buffers.\\n           (isBuff && (key == 'offset' || key == 'parent')) ||\\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\\n           // Skip index properties.\\n           _isIndex(key, length)\\n        ))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayLikeKeys = (arrayLikeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_isPrototype.js\\n/** Used for built-in method references. */\\nvar _isPrototype_objectProto = Object.prototype;\\n\\n/**\\n * Checks if `value` is likely a prototype object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\\n */\\nfunction isPrototype(value) {\\n  var Ctor = value && value.constructor,\\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || _isPrototype_objectProto;\\n\\n  return value === proto;\\n}\\n\\n/* harmony default export */ const _isPrototype = (isPrototype);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeys.js\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeKeys = _overArg(Object.keys, Object);\\n\\n/* harmony default export */ const _nativeKeys = (nativeKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeys.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeys_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeys(object) {\\n  if (!_isPrototype(object)) {\\n    return _nativeKeys(object);\\n  }\\n  var result = [];\\n  for (var key in Object(object)) {\\n    if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeys = (baseKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isArrayLike.js\\n\\n\\n\\n/**\\n * Checks if `value` is array-like. A value is considered array-like if it's\\n * not a function and has a `value.length` that's an integer greater than or\\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\\n * @example\\n *\\n * _.isArrayLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLike(document.body.children);\\n * // => true\\n *\\n * _.isArrayLike('abc');\\n * // => true\\n *\\n * _.isArrayLike(_.noop);\\n * // => false\\n */\\nfunction isArrayLike(value) {\\n  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);\\n}\\n\\n/* harmony default export */ const lodash_es_isArrayLike = (isArrayLike);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects. See the\\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * for more details.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keys(new Foo);\\n * // => ['a', 'b'] (iteration order is not guaranteed)\\n *\\n * _.keys('hi');\\n * // => ['0', '1']\\n */\\nfunction keys(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keys = (keys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssign.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assign` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssign(object, source) {\\n  return object && _copyObject(source, lodash_es_keys(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssign = (baseAssign);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_nativeKeysIn.js\\n/**\\n * This function is like\\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\\n * except that it includes inherited enumerable properties.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction nativeKeysIn(object) {\\n  var result = [];\\n  if (object != null) {\\n    for (var key in Object(object)) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _nativeKeysIn = (nativeKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseKeysIn.js\\n\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _baseKeysIn_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeysIn(object) {\\n  if (!lodash_es_isObject(object)) {\\n    return _nativeKeysIn(object);\\n  }\\n  var isProto = _isPrototype(object),\\n      result = [];\\n\\n  for (var key in object) {\\n    if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseKeysIn = (baseKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/keysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of the own and inherited enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keysIn(new Foo);\\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\\n */\\nfunction keysIn(object) {\\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);\\n}\\n\\n/* harmony default export */ const lodash_es_keysIn = (keysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseAssignIn.js\\n\\n\\n\\n/**\\n * The base implementation of `_.assignIn` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssignIn(object, source) {\\n  return object && _copyObject(source, lodash_es_keysIn(source), object);\\n}\\n\\n/* harmony default export */ const _baseAssignIn = (baseAssignIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneBuffer.js\\n\\n\\n/** Detect free variable `exports`. */\\nvar _cloneBuffer_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\\n\\n/** Detect free variable `module`. */\\nvar _cloneBuffer_freeModule = _cloneBuffer_freeExports && typeof module == 'object' && module && !module.nodeType && module;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar _cloneBuffer_moduleExports = _cloneBuffer_freeModule && _cloneBuffer_freeModule.exports === _cloneBuffer_freeExports;\\n\\n/** Built-in value references. */\\nvar _cloneBuffer_Buffer = _cloneBuffer_moduleExports ? _root.Buffer : undefined,\\n    allocUnsafe = _cloneBuffer_Buffer ? _cloneBuffer_Buffer.allocUnsafe : undefined;\\n\\n/**\\n * Creates a clone of  `buffer`.\\n *\\n * @private\\n * @param {Buffer} buffer The buffer to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Buffer} Returns the cloned buffer.\\n */\\nfunction cloneBuffer(buffer, isDeep) {\\n  if (isDeep) {\\n    return buffer.slice();\\n  }\\n  var length = buffer.length,\\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\\n\\n  buffer.copy(result);\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneBuffer = (cloneBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copyArray.js\\n/**\\n * Copies the values of `source` to `array`.\\n *\\n * @private\\n * @param {Array} source The array to copy values from.\\n * @param {Array} [array=[]] The array to copy values to.\\n * @returns {Array} Returns `array`.\\n */\\nfunction copyArray(source, array) {\\n  var index = -1,\\n      length = source.length;\\n\\n  array || (array = Array(length));\\n  while (++index < length) {\\n    array[index] = source[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _copyArray = (copyArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayFilter.js\\n/**\\n * A specialized version of `_.filter` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {Array} Returns the new filtered array.\\n */\\nfunction arrayFilter(array, predicate) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayFilter = (arrayFilter);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/stubArray.js\\n/**\\n * This method returns a new empty array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.13.0\\n * @category Util\\n * @returns {Array} Returns the new empty array.\\n * @example\\n *\\n * var arrays = _.times(2, _.stubArray);\\n *\\n * console.log(arrays);\\n * // => [[], []]\\n *\\n * console.log(arrays[0] === arrays[1]);\\n * // => false\\n */\\nfunction stubArray() {\\n  return [];\\n}\\n\\n/* harmony default export */ const lodash_es_stubArray = (stubArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbols.js\\n\\n\\n\\n/** Used for built-in method references. */\\nvar _getSymbols_objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  if (object == null) {\\n    return [];\\n  }\\n  object = Object(object);\\n  return _arrayFilter(nativeGetSymbols(object), function(symbol) {\\n    return _getSymbols_propertyIsEnumerable.call(object, symbol);\\n  });\\n};\\n\\n/* harmony default export */ const _getSymbols = (getSymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbols.js\\n\\n\\n\\n/**\\n * Copies own symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbols(source, object) {\\n  return _copyObject(source, _getSymbols(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbols = (copySymbols);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayPush.js\\n/**\\n * Appends the elements of `values` to `array`.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to append.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayPush(array, values) {\\n  var index = -1,\\n      length = values.length,\\n      offset = array.length;\\n\\n  while (++index < length) {\\n    array[offset + index] = values[index];\\n  }\\n  return array;\\n}\\n\\n/* harmony default export */ const _arrayPush = (arrayPush);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getSymbolsIn.js\\n\\n\\n\\n\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own and inherited enumerable symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nvar getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function(object) {\\n  var result = [];\\n  while (object) {\\n    _arrayPush(result, _getSymbols(object));\\n    object = _getPrototype(object);\\n  }\\n  return result;\\n};\\n\\n/* harmony default export */ const _getSymbolsIn = (getSymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_copySymbolsIn.js\\n\\n\\n\\n/**\\n * Copies own and inherited symbols of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbolsIn(source, object) {\\n  return _copyObject(source, _getSymbolsIn(source), object);\\n}\\n\\n/* harmony default export */ const _copySymbolsIn = (copySymbolsIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseGetAllKeys.js\\n\\n\\n\\n/**\\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n  var result = keysFunc(object);\\n  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));\\n}\\n\\n/* harmony default export */ const _baseGetAllKeys = (baseGetAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeys.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own enumerable property names and symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeys(object) {\\n  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);\\n}\\n\\n/* harmony default export */ const _getAllKeys = (getAllKeys);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getAllKeysIn.js\\n\\n\\n\\n\\n/**\\n * Creates an array of own and inherited enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeysIn(object) {\\n  return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);\\n}\\n\\n/* harmony default export */ const _getAllKeysIn = (getAllKeysIn);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_DataView.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar DataView = _getNative(_root, 'DataView');\\n\\n/* harmony default export */ const _DataView = (DataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Promise.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _Promise_Promise = _getNative(_root, 'Promise');\\n\\n/* harmony default export */ const _Promise = (_Promise_Promise);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Set.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar Set = _getNative(_root, 'Set');\\n\\n/* harmony default export */ const _Set = (Set);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_WeakMap.js\\n\\n\\n\\n/* Built-in method references that are verified to be native. */\\nvar _WeakMap_WeakMap = _getNative(_root, 'WeakMap');\\n\\n/* harmony default export */ const _WeakMap = (_WeakMap_WeakMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_getTag.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _getTag_mapTag = '[object Map]',\\n    _getTag_objectTag = '[object Object]',\\n    promiseTag = '[object Promise]',\\n    _getTag_setTag = '[object Set]',\\n    _getTag_weakMapTag = '[object WeakMap]';\\n\\nvar _getTag_dataViewTag = '[object DataView]';\\n\\n/** Used to detect maps, sets, and weakmaps. */\\nvar dataViewCtorString = _toSource(_DataView),\\n    mapCtorString = _toSource(_Map),\\n    promiseCtorString = _toSource(_Promise),\\n    setCtorString = _toSource(_Set),\\n    weakMapCtorString = _toSource(_WeakMap);\\n\\n/**\\n * Gets the `toStringTag` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nvar getTag = _baseGetTag;\\n\\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\\nif ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||\\n    (_Map && getTag(new _Map) != _getTag_mapTag) ||\\n    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||\\n    (_Set && getTag(new _Set) != _getTag_setTag) ||\\n    (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {\\n  getTag = function(value) {\\n    var result = _baseGetTag(value),\\n        Ctor = result == _getTag_objectTag ? value.constructor : undefined,\\n        ctorString = Ctor ? _toSource(Ctor) : '';\\n\\n    if (ctorString) {\\n      switch (ctorString) {\\n        case dataViewCtorString: return _getTag_dataViewTag;\\n        case mapCtorString: return _getTag_mapTag;\\n        case promiseCtorString: return promiseTag;\\n        case setCtorString: return _getTag_setTag;\\n        case weakMapCtorString: return _getTag_weakMapTag;\\n      }\\n    }\\n    return result;\\n  };\\n}\\n\\n/* harmony default export */ const _getTag = (getTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneArray.js\\n/** Used for built-in method references. */\\nvar _initCloneArray_objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;\\n\\n/**\\n * Initializes an array clone.\\n *\\n * @private\\n * @param {Array} array The array to clone.\\n * @returns {Array} Returns the initialized clone.\\n */\\nfunction initCloneArray(array) {\\n  var length = array.length,\\n      result = new array.constructor(length);\\n\\n  // Add properties assigned by `RegExp#exec`.\\n  if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {\\n    result.index = array.index;\\n    result.input = array.input;\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _initCloneArray = (initCloneArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_Uint8Array.js\\n\\n\\n/** Built-in value references. */\\nvar Uint8Array = _root.Uint8Array;\\n\\n/* harmony default export */ const _Uint8Array = (Uint8Array);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneArrayBuffer.js\\n\\n\\n/**\\n * Creates a clone of `arrayBuffer`.\\n *\\n * @private\\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\\n * @returns {ArrayBuffer} Returns the cloned array buffer.\\n */\\nfunction cloneArrayBuffer(arrayBuffer) {\\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\\n  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneArrayBuffer = (cloneArrayBuffer);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneDataView.js\\n\\n\\n/**\\n * Creates a clone of `dataView`.\\n *\\n * @private\\n * @param {Object} dataView The data view to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned data view.\\n */\\nfunction cloneDataView(dataView, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;\\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\\n}\\n\\n/* harmony default export */ const _cloneDataView = (cloneDataView);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneRegExp.js\\n/** Used to match `RegExp` flags from their coerced string values. */\\nvar reFlags = /\\\\w*$/;\\n\\n/**\\n * Creates a clone of `regexp`.\\n *\\n * @private\\n * @param {Object} regexp The regexp to clone.\\n * @returns {Object} Returns the cloned regexp.\\n */\\nfunction cloneRegExp(regexp) {\\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\\n  result.lastIndex = regexp.lastIndex;\\n  return result;\\n}\\n\\n/* harmony default export */ const _cloneRegExp = (cloneRegExp);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneSymbol.js\\n\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * Creates a clone of the `symbol` object.\\n *\\n * @private\\n * @param {Object} symbol The symbol object to clone.\\n * @returns {Object} Returns the cloned symbol object.\\n */\\nfunction cloneSymbol(symbol) {\\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n}\\n\\n/* harmony default export */ const _cloneSymbol = (cloneSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_cloneTypedArray.js\\n\\n\\n/**\\n * Creates a clone of `typedArray`.\\n *\\n * @private\\n * @param {Object} typedArray The typed array to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned typed array.\\n */\\nfunction cloneTypedArray(typedArray, isDeep) {\\n  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n}\\n\\n/* harmony default export */ const _cloneTypedArray = (cloneTypedArray);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneByTag.js\\n\\n\\n\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _initCloneByTag_boolTag = '[object Boolean]',\\n    _initCloneByTag_dateTag = '[object Date]',\\n    _initCloneByTag_mapTag = '[object Map]',\\n    _initCloneByTag_numberTag = '[object Number]',\\n    _initCloneByTag_regexpTag = '[object RegExp]',\\n    _initCloneByTag_setTag = '[object Set]',\\n    _initCloneByTag_stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',\\n    _initCloneByTag_dataViewTag = '[object DataView]',\\n    _initCloneByTag_float32Tag = '[object Float32Array]',\\n    _initCloneByTag_float64Tag = '[object Float64Array]',\\n    _initCloneByTag_int8Tag = '[object Int8Array]',\\n    _initCloneByTag_int16Tag = '[object Int16Array]',\\n    _initCloneByTag_int32Tag = '[object Int32Array]',\\n    _initCloneByTag_uint8Tag = '[object Uint8Array]',\\n    _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _initCloneByTag_uint16Tag = '[object Uint16Array]',\\n    _initCloneByTag_uint32Tag = '[object Uint32Array]';\\n\\n/**\\n * Initializes an object clone based on its `toStringTag`.\\n *\\n * **Note:** This function only supports cloning values with tags of\\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @param {string} tag The `toStringTag` of the object to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneByTag(object, tag, isDeep) {\\n  var Ctor = object.constructor;\\n  switch (tag) {\\n    case _initCloneByTag_arrayBufferTag:\\n      return _cloneArrayBuffer(object);\\n\\n    case _initCloneByTag_boolTag:\\n    case _initCloneByTag_dateTag:\\n      return new Ctor(+object);\\n\\n    case _initCloneByTag_dataViewTag:\\n      return _cloneDataView(object, isDeep);\\n\\n    case _initCloneByTag_float32Tag: case _initCloneByTag_float64Tag:\\n    case _initCloneByTag_int8Tag: case _initCloneByTag_int16Tag: case _initCloneByTag_int32Tag:\\n    case _initCloneByTag_uint8Tag: case _initCloneByTag_uint8ClampedTag: case _initCloneByTag_uint16Tag: case _initCloneByTag_uint32Tag:\\n      return _cloneTypedArray(object, isDeep);\\n\\n    case _initCloneByTag_mapTag:\\n      return new Ctor;\\n\\n    case _initCloneByTag_numberTag:\\n    case _initCloneByTag_stringTag:\\n      return new Ctor(object);\\n\\n    case _initCloneByTag_regexpTag:\\n      return _cloneRegExp(object);\\n\\n    case _initCloneByTag_setTag:\\n      return new Ctor;\\n\\n    case symbolTag:\\n      return _cloneSymbol(object);\\n  }\\n}\\n\\n/* harmony default export */ const _initCloneByTag = (initCloneByTag);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseCreate.js\\n\\n\\n/** Built-in value references. */\\nvar objectCreate = Object.create;\\n\\n/**\\n * The base implementation of `_.create` without support for assigning\\n * properties to the created object.\\n *\\n * @private\\n * @param {Object} proto The object to inherit from.\\n * @returns {Object} Returns the new object.\\n */\\nvar baseCreate = (function() {\\n  function object() {}\\n  return function(proto) {\\n    if (!lodash_es_isObject(proto)) {\\n      return {};\\n    }\\n    if (objectCreate) {\\n      return objectCreate(proto);\\n    }\\n    object.prototype = proto;\\n    var result = new object;\\n    object.prototype = undefined;\\n    return result;\\n  };\\n}());\\n\\n/* harmony default export */ const _baseCreate = (baseCreate);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_initCloneObject.js\\n\\n\\n\\n\\n/**\\n * Initializes an object clone.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneObject(object) {\\n  return (typeof object.constructor == 'function' && !_isPrototype(object))\\n    ? _baseCreate(_getPrototype(object))\\n    : {};\\n}\\n\\n/* harmony default export */ const _initCloneObject = (initCloneObject);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsMap.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsMap_mapTag = '[object Map]';\\n\\n/**\\n * The base implementation of `_.isMap` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n */\\nfunction baseIsMap(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsMap_mapTag;\\n}\\n\\n/* harmony default export */ const _baseIsMap = (baseIsMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isMap.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsMap = _nodeUtil && _nodeUtil.isMap;\\n\\n/**\\n * Checks if `value` is classified as a `Map` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\\n * @example\\n *\\n * _.isMap(new Map);\\n * // => true\\n *\\n * _.isMap(new WeakMap);\\n * // => false\\n */\\nvar isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;\\n\\n/* harmony default export */ const lodash_es_isMap = (isMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseIsSet.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar _baseIsSet_setTag = '[object Set]';\\n\\n/**\\n * The base implementation of `_.isSet` without Node.js optimizations.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n */\\nfunction baseIsSet(value) {\\n  return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsSet_setTag;\\n}\\n\\n/* harmony default export */ const _baseIsSet = (baseIsSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSet.js\\n\\n\\n\\n\\n/* Node.js helper references. */\\nvar nodeIsSet = _nodeUtil && _nodeUtil.isSet;\\n\\n/**\\n * Checks if `value` is classified as a `Set` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\\n * @example\\n *\\n * _.isSet(new Set);\\n * // => true\\n *\\n * _.isSet(new WeakSet);\\n * // => false\\n */\\nvar isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;\\n\\n/* harmony default export */ const lodash_es_isSet = (isSet);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseClone.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar CLONE_DEEP_FLAG = 1,\\n    CLONE_FLAT_FLAG = 2,\\n    CLONE_SYMBOLS_FLAG = 4;\\n\\n/** `Object#toString` result references. */\\nvar _baseClone_argsTag = '[object Arguments]',\\n    _baseClone_arrayTag = '[object Array]',\\n    _baseClone_boolTag = '[object Boolean]',\\n    _baseClone_dateTag = '[object Date]',\\n    _baseClone_errorTag = '[object Error]',\\n    _baseClone_funcTag = '[object Function]',\\n    _baseClone_genTag = '[object GeneratorFunction]',\\n    _baseClone_mapTag = '[object Map]',\\n    _baseClone_numberTag = '[object Number]',\\n    _baseClone_objectTag = '[object Object]',\\n    _baseClone_regexpTag = '[object RegExp]',\\n    _baseClone_setTag = '[object Set]',\\n    _baseClone_stringTag = '[object String]',\\n    _baseClone_symbolTag = '[object Symbol]',\\n    _baseClone_weakMapTag = '[object WeakMap]';\\n\\nvar _baseClone_arrayBufferTag = '[object ArrayBuffer]',\\n    _baseClone_dataViewTag = '[object DataView]',\\n    _baseClone_float32Tag = '[object Float32Array]',\\n    _baseClone_float64Tag = '[object Float64Array]',\\n    _baseClone_int8Tag = '[object Int8Array]',\\n    _baseClone_int16Tag = '[object Int16Array]',\\n    _baseClone_int32Tag = '[object Int32Array]',\\n    _baseClone_uint8Tag = '[object Uint8Array]',\\n    _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',\\n    _baseClone_uint16Tag = '[object Uint16Array]',\\n    _baseClone_uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values supported by `_.clone`. */\\nvar cloneableTags = {};\\ncloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] =\\ncloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] =\\ncloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] =\\ncloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] =\\ncloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] =\\ncloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] =\\ncloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] =\\ncloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] =\\ncloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] =\\ncloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] =\\ncloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;\\ncloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] =\\ncloneableTags[_baseClone_weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\\n * traversed objects.\\n *\\n * @private\\n * @param {*} value The value to clone.\\n * @param {boolean} bitmask The bitmask flags.\\n *  1 - Deep clone\\n *  2 - Flatten inherited properties\\n *  4 - Clone symbols\\n * @param {Function} [customizer] The function to customize cloning.\\n * @param {string} [key] The key of `value`.\\n * @param {Object} [object] The parent object of `value`.\\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\\n * @returns {*} Returns the cloned value.\\n */\\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\\n  var result,\\n      isDeep = bitmask & CLONE_DEEP_FLAG,\\n      isFlat = bitmask & CLONE_FLAT_FLAG,\\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\\n\\n  if (customizer) {\\n    result = object ? customizer(value, key, object, stack) : customizer(value);\\n  }\\n  if (result !== undefined) {\\n    return result;\\n  }\\n  if (!lodash_es_isObject(value)) {\\n    return value;\\n  }\\n  var isArr = lodash_es_isArray(value);\\n  if (isArr) {\\n    result = _initCloneArray(value);\\n    if (!isDeep) {\\n      return _copyArray(value, result);\\n    }\\n  } else {\\n    var tag = _getTag(value),\\n        isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;\\n\\n    if (lodash_es_isBuffer(value)) {\\n      return _cloneBuffer(value, isDeep);\\n    }\\n    if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || (isFunc && !object)) {\\n      result = (isFlat || isFunc) ? {} : _initCloneObject(value);\\n      if (!isDeep) {\\n        return isFlat\\n          ? _copySymbolsIn(value, _baseAssignIn(result, value))\\n          : _copySymbols(value, _baseAssign(result, value));\\n      }\\n    } else {\\n      if (!cloneableTags[tag]) {\\n        return object ? value : {};\\n      }\\n      result = _initCloneByTag(value, tag, isDeep);\\n    }\\n  }\\n  // Check for circular references and return its corresponding clone.\\n  stack || (stack = new _Stack);\\n  var stacked = stack.get(value);\\n  if (stacked) {\\n    return stacked;\\n  }\\n  stack.set(value, result);\\n\\n  if (lodash_es_isSet(value)) {\\n    value.forEach(function(subValue) {\\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n    });\\n  } else if (lodash_es_isMap(value)) {\\n    value.forEach(function(subValue, key) {\\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n    });\\n  }\\n\\n  var keysFunc = isFull\\n    ? (isFlat ? _getAllKeysIn : _getAllKeys)\\n    : (isFlat ? lodash_es_keysIn : lodash_es_keys);\\n\\n  var props = isArr ? undefined : keysFunc(value);\\n  _arrayEach(props || value, function(subValue, key) {\\n    if (props) {\\n      key = subValue;\\n      subValue = value[key];\\n    }\\n    // Recursively populate clone (susceptible to call stack limits).\\n    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\\n  });\\n  return result;\\n}\\n\\n/* harmony default export */ const _baseClone = (baseClone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/clone.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar clone_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * Creates a shallow clone of `value`.\\n *\\n * **Note:** This method is loosely based on the\\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\\n * arrays. The own enumerable properties of `arguments` objects are cloned\\n * as plain objects. An empty object is returned for uncloneable values such\\n * as error objects, functions, DOM nodes, and WeakMaps.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to clone.\\n * @returns {*} Returns the cloned value.\\n * @see _.cloneDeep\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var shallow = _.clone(objects);\\n * console.log(shallow[0] === objects[0]);\\n * // => true\\n */\\nfunction clone(value) {\\n  return _baseClone(value, clone_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_clone = (clone);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_arrayMap.js\\n/**\\n * A specialized version of `_.map` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} [array] The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction arrayMap(array, iteratee) {\\n  var index = -1,\\n      length = array == null ? 0 : array.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = iteratee(array[index], index, array);\\n  }\\n  return result;\\n}\\n\\n/* harmony default export */ const _arrayMap = (arrayMap);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/isSymbol.js\\n\\n\\n\\n/** `Object#toString` result references. */\\nvar isSymbol_symbolTag = '[object Symbol]';\\n\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' ||\\n    (lodash_es_isObjectLike(value) && _baseGetTag(value) == isSymbol_symbolTag);\\n}\\n\\n/* harmony default export */ const lodash_es_isSymbol = (isSymbol);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/memoize.js\\n\\n\\n/** Error message constants. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/**\\n * Creates a function that memoizes the result of `func`. If `resolver` is\\n * provided, it determines the cache key for storing the result based on the\\n * arguments provided to the memoized function. By default, the first argument\\n * provided to the memoized function is used as the map cache key. The `func`\\n * is invoked with the `this` binding of the memoized function.\\n *\\n * **Note:** The cache is exposed as the `cache` property on the memoized\\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\\n * constructor with one whose instances implement the\\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to have its output memoized.\\n * @param {Function} [resolver] The function to resolve the cache key.\\n * @returns {Function} Returns the new memoized function.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': 2 };\\n * var other = { 'c': 3, 'd': 4 };\\n *\\n * var values = _.memoize(_.values);\\n * values(object);\\n * // => [1, 2]\\n *\\n * values(other);\\n * // => [3, 4]\\n *\\n * object.a = 2;\\n * values(object);\\n * // => [1, 2]\\n *\\n * // Modify the result cache.\\n * values.cache.set(object, ['a', 'b']);\\n * values(object);\\n * // => ['a', 'b']\\n *\\n * // Replace `_.memoize.Cache`.\\n * _.memoize.Cache = WeakMap;\\n */\\nfunction memoize(func, resolver) {\\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  var memoized = function() {\\n    var args = arguments,\\n        key = resolver ? resolver.apply(this, args) : args[0],\\n        cache = memoized.cache;\\n\\n    if (cache.has(key)) {\\n      return cache.get(key);\\n    }\\n    var result = func.apply(this, args);\\n    memoized.cache = cache.set(key, result) || cache;\\n    return result;\\n  };\\n  memoized.cache = new (memoize.Cache || _MapCache);\\n  return memoized;\\n}\\n\\n// Expose `MapCache`.\\nmemoize.Cache = _MapCache;\\n\\n/* harmony default export */ const lodash_es_memoize = (memoize);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_memoizeCapped.js\\n\\n\\n/** Used as the maximum memoize cache size. */\\nvar MAX_MEMOIZE_SIZE = 500;\\n\\n/**\\n * A specialized version of `_.memoize` which clears the memoized function's\\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\\n *\\n * @private\\n * @param {Function} func The function to have its output memoized.\\n * @returns {Function} Returns the new memoized function.\\n */\\nfunction memoizeCapped(func) {\\n  var result = lodash_es_memoize(func, function(key) {\\n    if (cache.size === MAX_MEMOIZE_SIZE) {\\n      cache.clear();\\n    }\\n    return key;\\n  });\\n\\n  var cache = result.cache;\\n  return result;\\n}\\n\\n/* harmony default export */ const _memoizeCapped = (memoizeCapped);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_stringToPath.js\\n\\n\\n/** Used to match property names within property paths. */\\nvar rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]|(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = _memoizeCapped(function(string) {\\n  var result = [];\\n  if (string.charCodeAt(0) === 46 /* . */) {\\n    result.push('');\\n  }\\n  string.replace(rePropName, function(match, number, quote, subString) {\\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\n/* harmony default export */ const _stringToPath = (stringToPath);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_toKey.js\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Converts `value` to a string key if it's not a string or symbol.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {string|symbol} Returns the key.\\n */\\nfunction toKey(value) {\\n  if (typeof value == 'string' || lodash_es_isSymbol(value)) {\\n    return value;\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _toKey = (toKey);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/_baseToString.js\\n\\n\\n\\n\\n\\n/** Used as references for various `Number` constants. */\\nvar _baseToString_INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar _baseToString_symbolProto = _Symbol ? _Symbol.prototype : undefined,\\n    symbolToString = _baseToString_symbolProto ? _baseToString_symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (lodash_es_isArray(value)) {\\n    // Recursively convert values (susceptible to call stack limits).\\n    return _arrayMap(value, baseToString) + '';\\n  }\\n  if (lodash_es_isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -_baseToString_INFINITY) ? '-0' : result;\\n}\\n\\n/* harmony default export */ const _baseToString = (baseToString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toString.js\\n\\n\\n/**\\n * Converts `value` to a string. An empty string is returned for `null`\\n * and `undefined` values. The sign of `-0` is preserved.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {string} Returns the converted string.\\n * @example\\n *\\n * _.toString(null);\\n * // => ''\\n *\\n * _.toString(-0);\\n * // => '-0'\\n *\\n * _.toString([1, 2, 3]);\\n * // => '1,2,3'\\n */\\nfunction toString_toString(value) {\\n  return value == null ? '' : _baseToString(value);\\n}\\n\\n/* harmony default export */ const lodash_es_toString = (toString_toString);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/toPath.js\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Converts `value` to a property path array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Util\\n * @param {*} value The value to convert.\\n * @returns {Array} Returns the new property path array.\\n * @example\\n *\\n * _.toPath('a.b.c');\\n * // => ['a', 'b', 'c']\\n *\\n * _.toPath('a[0].b.c');\\n * // => ['a', '0', 'b', 'c']\\n */\\nfunction toPath(value) {\\n  if (lodash_es_isArray(value)) {\\n    return _arrayMap(value, _toKey);\\n  }\\n  return lodash_es_isSymbol(value) ? [value] : _copyArray(_stringToPath(lodash_es_toString(value)));\\n}\\n\\n/* harmony default export */ const lodash_es_toPath = (toPath);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/tiny-warning/dist/tiny-warning.esm.js\\nvar isProduction = \\\"production\\\" === 'production';\\nfunction warning(condition, message) {\\n  if (!isProduction) {\\n    if (condition) {\\n      return;\\n    }\\n\\n    var text = \\\"Warning: \\\" + message;\\n\\n    if (typeof console !== 'undefined') {\\n      console.warn(text);\\n    }\\n\\n    try {\\n      throw Error(text);\\n    } catch (x) {}\\n  }\\n}\\n\\n/* harmony default export */ const tiny_warning_esm = (warning);\\n\\n// EXTERNAL MODULE: ../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\nvar hoist_non_react_statics_cjs = __webpack_require__(\\\"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\\");\\n;// CONCATENATED MODULE: ../../../node_modules/lodash-es/cloneDeep.js\\n\\n\\n/** Used to compose bitmasks for cloning. */\\nvar cloneDeep_CLONE_DEEP_FLAG = 1,\\n    cloneDeep_CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * This method is like `_.clone` except that it recursively clones `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.0.0\\n * @category Lang\\n * @param {*} value The value to recursively clone.\\n * @returns {*} Returns the deep cloned value.\\n * @see _.clone\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var deep = _.cloneDeep(objects);\\n * console.log(deep[0] === objects[0]);\\n * // => false\\n */\\nfunction cloneDeep(value) {\\n  return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);\\n}\\n\\n/* harmony default export */ const lodash_es_cloneDeep = (cloneDeep);\\n\\n;// CONCATENATED MODULE: ../../../node_modules/formik/dist/formik.esm.js\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfunction _extends() {\\n  _extends = Object.assign || function (target) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i];\\n\\n      for (var key in source) {\\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\\n          target[key] = source[key];\\n        }\\n      }\\n    }\\n\\n    return target;\\n  };\\n\\n  return _extends.apply(this, arguments);\\n}\\n\\nfunction _inheritsLoose(subClass, superClass) {\\n  subClass.prototype = Object.create(superClass.prototype);\\n  subClass.prototype.constructor = subClass;\\n  subClass.__proto__ = superClass;\\n}\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) {\\n  if (source == null) return {};\\n  var target = {};\\n  var sourceKeys = Object.keys(source);\\n  var key, i;\\n\\n  for (i = 0; i < sourceKeys.length; i++) {\\n    key = sourceKeys[i];\\n    if (excluded.indexOf(key) >= 0) continue;\\n    target[key] = source[key];\\n  }\\n\\n  return target;\\n}\\n\\nfunction _assertThisInitialized(self) {\\n  if (self === void 0) {\\n    throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\");\\n  }\\n\\n  return self;\\n}\\n\\n/** @private is the value an empty array? */\\n\\nvar isEmptyArray = function isEmptyArray(value) {\\n  return Array.isArray(value) && value.length === 0;\\n};\\n/** @private is the given object a Function? */\\n\\nvar formik_esm_isFunction = function isFunction(obj) {\\n  return typeof obj === 'function';\\n};\\n/** @private is the given object an Object? */\\n\\nvar formik_esm_isObject = function isObject(obj) {\\n  return obj !== null && typeof obj === 'object';\\n};\\n/** @private is the given object an integer? */\\n\\nvar isInteger = function isInteger(obj) {\\n  return String(Math.floor(Number(obj))) === obj;\\n};\\n/** @private is the given object a string? */\\n\\nvar isString = function isString(obj) {\\n  return Object.prototype.toString.call(obj) === '[object String]';\\n};\\n/** @private is the given object a NaN? */\\n// eslint-disable-next-line no-self-compare\\n\\nvar isNaN$1 = function isNaN(obj) {\\n  return obj !== obj;\\n};\\n/** @private Does a React component have exactly 0 children? */\\n\\nvar isEmptyChildren = function isEmptyChildren(children) {\\n  return external_react_.Children.count(children) === 0;\\n};\\n/** @private is the given object/value a promise? */\\n\\nvar isPromise = function isPromise(value) {\\n  return formik_esm_isObject(value) && formik_esm_isFunction(value.then);\\n};\\n/** @private is the given object/value a type of synthetic event? */\\n\\nvar isInputEvent = function isInputEvent(value) {\\n  return value && formik_esm_isObject(value) && formik_esm_isObject(value.target);\\n};\\n/**\\r\\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\\r\\n * not safe to call document.activeElement if there is nothing focused.\\r\\n *\\r\\n * The activeElement will be null only if the document or document body is not\\r\\n * yet defined.\\r\\n *\\r\\n * @param {?Document} doc Defaults to current document.\\r\\n * @return {Element | null}\\r\\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\\r\\n */\\n\\nfunction getActiveElement(doc) {\\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\\n\\n  if (typeof doc === 'undefined') {\\n    return null;\\n  }\\n\\n  try {\\n    return doc.activeElement || doc.body;\\n  } catch (e) {\\n    return doc.body;\\n  }\\n}\\n/**\\r\\n * Deeply get a value from an object via its path.\\r\\n */\\n\\nfunction getIn(obj, key, def, p) {\\n  if (p === void 0) {\\n    p = 0;\\n  }\\n\\n  var path = lodash_es_toPath(key);\\n\\n  while (obj && p < path.length) {\\n    obj = obj[path[p++]];\\n  }\\n\\n  return obj === undefined ? def : obj;\\n}\\n/**\\r\\n * Deeply set a value from in object via it's path. If the value at `path`\\r\\n * has changed, return a shallow copy of obj with `value` set at `path`.\\r\\n * If `value` has not changed, return the original `obj`.\\r\\n *\\r\\n * Existing objects / arrays along `path` are also shallow copied. Sibling\\r\\n * objects along path retain the same internal js reference. Since new\\r\\n * objects / arrays are only created along `path`, we can test if anything\\r\\n * changed in a nested structure by comparing the object's reference in\\r\\n * the old and new object, similar to how russian doll cache invalidation\\r\\n * works.\\r\\n *\\r\\n * In earlier versions of this function, which used cloneDeep, there were\\r\\n * issues whereby settings a nested value would mutate the parent\\r\\n * instead of creating a new object. `clone` avoids that bug making a\\r\\n * shallow copy of the objects along the update path\\r\\n * so no object is mutated in place.\\r\\n *\\r\\n * Before changing this function, please read through the following\\r\\n * discussions.\\r\\n *\\r\\n * @see https://github.com/developit/linkstate\\r\\n * @see https://github.com/jaredpalmer/formik/pull/123\\r\\n */\\n\\nfunction setIn(obj, path, value) {\\n  var res = lodash_es_clone(obj); // this keeps inheritance when obj is a class\\n\\n  var resVal = res;\\n  var i = 0;\\n  var pathArray = lodash_es_toPath(path);\\n\\n  for (; i < pathArray.length - 1; i++) {\\n    var currentPath = pathArray[i];\\n    var currentObj = getIn(obj, pathArray.slice(0, i + 1));\\n\\n    if (currentObj && (formik_esm_isObject(currentObj) || Array.isArray(currentObj))) {\\n      resVal = resVal[currentPath] = lodash_es_clone(currentObj);\\n    } else {\\n      var nextPath = pathArray[i + 1];\\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\\n    }\\n  } // Return original object if new value is the same as current\\n\\n\\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\\n    return obj;\\n  }\\n\\n  if (value === undefined) {\\n    delete resVal[pathArray[i]];\\n  } else {\\n    resVal[pathArray[i]] = value;\\n  } // If the path array has a single element, the loop did not run.\\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\\n\\n\\n  if (i === 0 && value === undefined) {\\n    delete res[pathArray[i]];\\n  }\\n\\n  return res;\\n}\\n/**\\r\\n * Recursively a set the same value for all keys and arrays nested object, cloning\\r\\n * @param object\\r\\n * @param value\\r\\n * @param visited\\r\\n * @param response\\r\\n */\\n\\nfunction setNestedObjectValues(object, value, visited, response) {\\n  if (visited === void 0) {\\n    visited = new WeakMap();\\n  }\\n\\n  if (response === void 0) {\\n    response = {};\\n  }\\n\\n  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\\n    var k = _Object$keys[_i];\\n    var val = object[k];\\n\\n    if (formik_esm_isObject(val)) {\\n      if (!visited.get(val)) {\\n        visited.set(val, true); // In order to keep array values consistent for both dot path  and\\n        // bracket syntax, we need to check if this is an array so that\\n        // this will output  { friends: [true] } and not { friends: { \\\"0\\\": true } }\\n\\n        response[k] = Array.isArray(val) ? [] : {};\\n        setNestedObjectValues(val, value, visited, response[k]);\\n      }\\n    } else {\\n      response[k] = value;\\n    }\\n  }\\n\\n  return response;\\n}\\n\\nvar FormikContext = /*#__PURE__*/(0,external_react_.createContext)(undefined);\\nvar FormikProvider = FormikContext.Provider;\\nvar FormikConsumer = FormikContext.Consumer;\\nfunction useFormikContext() {\\n  var formik = (0,external_react_.useContext)(FormikContext);\\n  !!!formik ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n  return formik;\\n}\\n\\nfunction formikReducer(state, msg) {\\n  switch (msg.type) {\\n    case 'SET_VALUES':\\n      return _extends({}, state, {\\n        values: msg.payload\\n      });\\n\\n    case 'SET_TOUCHED':\\n      return _extends({}, state, {\\n        touched: msg.payload\\n      });\\n\\n    case 'SET_ERRORS':\\n      if (react_fast_compare_default()(state.errors, msg.payload)) {\\n        return state;\\n      }\\n\\n      return _extends({}, state, {\\n        errors: msg.payload\\n      });\\n\\n    case 'SET_STATUS':\\n      return _extends({}, state, {\\n        status: msg.payload\\n      });\\n\\n    case 'SET_ISSUBMITTING':\\n      return _extends({}, state, {\\n        isSubmitting: msg.payload\\n      });\\n\\n    case 'SET_ISVALIDATING':\\n      return _extends({}, state, {\\n        isValidating: msg.payload\\n      });\\n\\n    case 'SET_FIELD_VALUE':\\n      return _extends({}, state, {\\n        values: setIn(state.values, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_TOUCHED':\\n      return _extends({}, state, {\\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'SET_FIELD_ERROR':\\n      return _extends({}, state, {\\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value)\\n      });\\n\\n    case 'RESET_FORM':\\n      return _extends({}, state, msg.payload);\\n\\n    case 'SET_FORMIK_STATE':\\n      return msg.payload(state);\\n\\n    case 'SUBMIT_ATTEMPT':\\n      return _extends({}, state, {\\n        touched: setNestedObjectValues(state.values, true),\\n        isSubmitting: true,\\n        submitCount: state.submitCount + 1\\n      });\\n\\n    case 'SUBMIT_FAILURE':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    case 'SUBMIT_SUCCESS':\\n      return _extends({}, state, {\\n        isSubmitting: false\\n      });\\n\\n    default:\\n      return state;\\n  }\\n} // Initial empty states // objects\\n\\n\\nvar emptyErrors = {};\\nvar emptyTouched = {};\\nfunction useFormik(_ref) {\\n  var _ref$validateOnChange = _ref.validateOnChange,\\n      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,\\n      _ref$validateOnBlur = _ref.validateOnBlur,\\n      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,\\n      _ref$validateOnMount = _ref.validateOnMount,\\n      validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,\\n      isInitialValid = _ref.isInitialValid,\\n      _ref$enableReinitiali = _ref.enableReinitialize,\\n      enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,\\n      onSubmit = _ref.onSubmit,\\n      rest = _objectWithoutPropertiesLoose(_ref, [\\\"validateOnChange\\\", \\\"validateOnBlur\\\", \\\"validateOnMount\\\", \\\"isInitialValid\\\", \\\"enableReinitialize\\\", \\\"onSubmit\\\"]);\\n\\n  var props = _extends({\\n    validateOnChange: validateOnChange,\\n    validateOnBlur: validateOnBlur,\\n    validateOnMount: validateOnMount,\\n    onSubmit: onSubmit\\n  }, rest);\\n\\n  var initialValues = (0,external_react_.useRef)(props.initialValues);\\n  var initialErrors = (0,external_react_.useRef)(props.initialErrors || emptyErrors);\\n  var initialTouched = (0,external_react_.useRef)(props.initialTouched || emptyTouched);\\n  var initialStatus = (0,external_react_.useRef)(props.initialStatus);\\n  var isMounted = (0,external_react_.useRef)(false);\\n  var fieldRegistry = (0,external_react_.useRef)({});\\n\\n  if (false) {}\\n\\n  (0,external_react_.useEffect)(function () {\\n    isMounted.current = true;\\n    return function () {\\n      isMounted.current = false;\\n    };\\n  }, []);\\n\\n  var _React$useReducer = (0,external_react_.useReducer)(formikReducer, {\\n    values: props.initialValues,\\n    errors: props.initialErrors || emptyErrors,\\n    touched: props.initialTouched || emptyTouched,\\n    status: props.initialStatus,\\n    isSubmitting: false,\\n    isValidating: false,\\n    submitCount: 0\\n  }),\\n      state = _React$useReducer[0],\\n      dispatch = _React$useReducer[1];\\n\\n  var runValidateHandler = (0,external_react_.useCallback)(function (values, field) {\\n    return new Promise(function (resolve, reject) {\\n      var maybePromisedErrors = props.validate(values, field);\\n\\n      if (maybePromisedErrors == null) {\\n        // use loose null check here on purpose\\n        resolve(emptyErrors);\\n      } else if (isPromise(maybePromisedErrors)) {\\n        maybePromisedErrors.then(function (errors) {\\n          resolve(errors || emptyErrors);\\n        }, function (actualException) {\\n          if (false) {}\\n\\n          reject(actualException);\\n        });\\n      } else {\\n        resolve(maybePromisedErrors);\\n      }\\n    });\\n  }, [props.validate]);\\n  /**\\r\\n   * Run validation against a Yup schema and optionally run a function if successful\\r\\n   */\\n\\n  var runValidationSchema = (0,external_react_.useCallback)(function (values, field) {\\n    var validationSchema = props.validationSchema;\\n    var schema = formik_esm_isFunction(validationSchema) ? validationSchema(field) : validationSchema;\\n    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);\\n    return new Promise(function (resolve, reject) {\\n      promise.then(function () {\\n        resolve(emptyErrors);\\n      }, function (err) {\\n        // Yup will throw a validation error if validation fails. We catch those and\\n        // resolve them into Formik errors. We can sniff if something is a Yup error\\n        // by checking error.name.\\n        // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\\n        if (err.name === 'ValidationError') {\\n          resolve(yupToFormErrors(err));\\n        } else {\\n          // We throw any other errors\\n          if (false) {}\\n\\n          reject(err);\\n        }\\n      });\\n    });\\n  }, [props.validationSchema]);\\n  var runSingleFieldLevelValidation = (0,external_react_.useCallback)(function (field, value) {\\n    return new Promise(function (resolve) {\\n      return resolve(fieldRegistry.current[field].validate(value));\\n    });\\n  }, []);\\n  var runFieldLevelValidations = (0,external_react_.useCallback)(function (values) {\\n    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {\\n      return formik_esm_isFunction(fieldRegistry.current[f].validate);\\n    }); // Construct an array with all of the field validation functions\\n\\n    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {\\n      return runSingleFieldLevelValidation(f, getIn(values, f));\\n    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\\n\\n    return Promise.all(fieldValidations).then(function (fieldErrorsList) {\\n      return fieldErrorsList.reduce(function (prev, curr, index) {\\n        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\\n          return prev;\\n        }\\n\\n        if (curr) {\\n          prev = setIn(prev, fieldKeysWithValidation[index], curr);\\n        }\\n\\n        return prev;\\n      }, {});\\n    });\\n  }, [runSingleFieldLevelValidation]); // Run all validations and return the result\\n\\n  var runAllValidations = (0,external_react_.useCallback)(function (values) {\\n    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {\\n      var fieldErrors = _ref2[0],\\n          schemaErrors = _ref2[1],\\n          validateErrors = _ref2[2];\\n      var combinedErrors = es.all([fieldErrors, schemaErrors, validateErrors], {\\n        arrayMerge: arrayMerge\\n      });\\n      return combinedErrors;\\n    });\\n  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run all validations methods and update state accordingly\\n\\n  var validateFormWithHighPriority = useEventCallback(function (values) {\\n    if (values === void 0) {\\n      values = state.values;\\n    }\\n\\n    dispatch({\\n      type: 'SET_ISVALIDATING',\\n      payload: true\\n    });\\n    return runAllValidations(values).then(function (combinedErrors) {\\n      if (!!isMounted.current) {\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n\\n        if (!react_fast_compare_default()(state.errors, combinedErrors)) {\\n          dispatch({\\n            type: 'SET_ERRORS',\\n            payload: combinedErrors\\n          });\\n        }\\n      }\\n\\n      return combinedErrors;\\n    });\\n  });\\n  (0,external_react_.useEffect)(function () {\\n    if (validateOnMount && isMounted.current === true && react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      validateFormWithHighPriority(initialValues.current);\\n    }\\n  }, [validateOnMount, validateFormWithHighPriority]);\\n  var resetForm = (0,external_react_.useCallback)(function (nextState) {\\n    var values = nextState && nextState.values ? nextState.values : initialValues.current;\\n    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};\\n    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};\\n    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;\\n    initialValues.current = values;\\n    initialErrors.current = errors;\\n    initialTouched.current = touched;\\n    initialStatus.current = status;\\n\\n    var dispatchFn = function dispatchFn() {\\n      dispatch({\\n        type: 'RESET_FORM',\\n        payload: {\\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\\n          errors: errors,\\n          touched: touched,\\n          status: status,\\n          values: values,\\n          isValidating: !!nextState && !!nextState.isValidating,\\n          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0\\n        }\\n      });\\n    };\\n\\n    if (props.onReset) {\\n      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);\\n\\n      if (isPromise(maybePromisedOnReset)) {\\n        maybePromisedOnReset.then(dispatchFn);\\n      } else {\\n        dispatchFn();\\n      }\\n    } else {\\n      dispatchFn();\\n    }\\n  }, [props.initialErrors, props.initialStatus, props.initialTouched]);\\n  (0,external_react_.useEffect)(function () {\\n    if (isMounted.current === true && !react_fast_compare_default()(initialValues.current, props.initialValues)) {\\n      if (enableReinitialize) {\\n        initialValues.current = props.initialValues;\\n        resetForm();\\n      }\\n\\n      if (validateOnMount) {\\n        validateFormWithHighPriority(initialValues.current);\\n      }\\n    }\\n  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialErrors.current, props.initialErrors)) {\\n      initialErrors.current = props.initialErrors || emptyErrors;\\n      dispatch({\\n        type: 'SET_ERRORS',\\n        payload: props.initialErrors || emptyErrors\\n      });\\n    }\\n  }, [enableReinitialize, props.initialErrors]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialTouched.current, props.initialTouched)) {\\n      initialTouched.current = props.initialTouched || emptyTouched;\\n      dispatch({\\n        type: 'SET_TOUCHED',\\n        payload: props.initialTouched || emptyTouched\\n      });\\n    }\\n  }, [enableReinitialize, props.initialTouched]);\\n  (0,external_react_.useEffect)(function () {\\n    if (enableReinitialize && isMounted.current === true && !react_fast_compare_default()(initialStatus.current, props.initialStatus)) {\\n      initialStatus.current = props.initialStatus;\\n      dispatch({\\n        type: 'SET_STATUS',\\n        payload: props.initialStatus\\n      });\\n    }\\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\\n  var validateField = useEventCallback(function (name) {\\n    // This will efficiently validate a single field by avoiding state\\n    // changes if the validation function is synchronous. It's different from\\n    // what is called when using validateForm.\\n    if (fieldRegistry.current[name] && formik_esm_isFunction(fieldRegistry.current[name].validate)) {\\n      var value = getIn(state.values, name);\\n      var maybePromise = fieldRegistry.current[name].validate(value);\\n\\n      if (isPromise(maybePromise)) {\\n        // Only flip isValidating if the function is async.\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: true\\n        });\\n        return maybePromise.then(function (x) {\\n          return x;\\n        }).then(function (error) {\\n          dispatch({\\n            type: 'SET_FIELD_ERROR',\\n            payload: {\\n              field: name,\\n              value: error\\n            }\\n          });\\n          dispatch({\\n            type: 'SET_ISVALIDATING',\\n            payload: false\\n          });\\n        });\\n      } else {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: maybePromise\\n          }\\n        });\\n        return Promise.resolve(maybePromise);\\n      }\\n    } else if (props.validationSchema) {\\n      dispatch({\\n        type: 'SET_ISVALIDATING',\\n        payload: true\\n      });\\n      return runValidationSchema(state.values, name).then(function (x) {\\n        return x;\\n      }).then(function (error) {\\n        dispatch({\\n          type: 'SET_FIELD_ERROR',\\n          payload: {\\n            field: name,\\n            value: error[name]\\n          }\\n        });\\n        dispatch({\\n          type: 'SET_ISVALIDATING',\\n          payload: false\\n        });\\n      });\\n    }\\n\\n    return Promise.resolve();\\n  });\\n  var registerField = (0,external_react_.useCallback)(function (name, _ref3) {\\n    var validate = _ref3.validate;\\n    fieldRegistry.current[name] = {\\n      validate: validate\\n    };\\n  }, []);\\n  var unregisterField = (0,external_react_.useCallback)(function (name) {\\n    delete fieldRegistry.current[name];\\n  }, []);\\n  var setTouched = useEventCallback(function (touched, shouldValidate) {\\n    dispatch({\\n      type: 'SET_TOUCHED',\\n      payload: touched\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var setErrors = (0,external_react_.useCallback)(function (errors) {\\n    dispatch({\\n      type: 'SET_ERRORS',\\n      payload: errors\\n    });\\n  }, []);\\n  var setValues = useEventCallback(function (values, shouldValidate) {\\n    var resolvedValues = formik_esm_isFunction(values) ? values(state.values) : values;\\n    dispatch({\\n      type: 'SET_VALUES',\\n      payload: resolvedValues\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();\\n  });\\n  var setFieldError = (0,external_react_.useCallback)(function (field, value) {\\n    dispatch({\\n      type: 'SET_FIELD_ERROR',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n  }, []);\\n  var setFieldValue = useEventCallback(function (field, value, shouldValidate) {\\n    dispatch({\\n      type: 'SET_FIELD_VALUE',\\n      payload: {\\n        field: field,\\n        value: value\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();\\n  });\\n  var executeChange = (0,external_react_.useCallback)(function (eventOrTextValue, maybePath) {\\n    // By default, assume that the first argument is a string. This allows us to use\\n    // handleChange with React Native and React Native Web's onChangeText prop which\\n    // provides just the value of the input.\\n    var field = maybePath;\\n    var val = eventOrTextValue;\\n    var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\\n    // so we handle like we would a normal HTML change event.\\n\\n    if (!isString(eventOrTextValue)) {\\n      // If we can, persist the event\\n      // @see https://reactjs.org/docs/events.html#event-pooling\\n      if (eventOrTextValue.persist) {\\n        eventOrTextValue.persist();\\n      }\\n\\n      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;\\n      var type = target.type,\\n          name = target.name,\\n          id = target.id,\\n          value = target.value,\\n          checked = target.checked,\\n          outerHTML = target.outerHTML,\\n          options = target.options,\\n          multiple = target.multiple;\\n      field = maybePath ? maybePath : name ? name : id;\\n\\n      if (!field && \\\"production\\\" !== \\\"production\\\") {\\n        warnAboutMissingIdentifier({\\n          htmlContent: outerHTML,\\n          documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\\n          handlerName: 'handleChange'\\n        });\\n      }\\n\\n      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes\\n      ? getValueForCheckbox(getIn(state.values, field), checked, value) : !!multiple // <select multiple>\\n      ? getSelectedValues(options) : value;\\n    }\\n\\n    if (field) {\\n      // Set form fields by name\\n      setFieldValue(field, val);\\n    }\\n  }, [setFieldValue, state.values]);\\n  var handleChange = useEventCallback(function (eventOrPath) {\\n    if (isString(eventOrPath)) {\\n      return function (event) {\\n        return executeChange(event, eventOrPath);\\n      };\\n    } else {\\n      executeChange(eventOrPath);\\n    }\\n  });\\n  var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {\\n    if (touched === void 0) {\\n      touched = true;\\n    }\\n\\n    dispatch({\\n      type: 'SET_FIELD_TOUCHED',\\n      payload: {\\n        field: field,\\n        value: touched\\n      }\\n    });\\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\\n    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();\\n  });\\n  var executeBlur = (0,external_react_.useCallback)(function (e, path) {\\n    if (e.persist) {\\n      e.persist();\\n    }\\n\\n    var _e$target = e.target,\\n        name = _e$target.name,\\n        id = _e$target.id,\\n        outerHTML = _e$target.outerHTML;\\n    var field = path ? path : name ? name : id;\\n\\n    if (!field && \\\"production\\\" !== \\\"production\\\") {\\n      warnAboutMissingIdentifier({\\n        htmlContent: outerHTML,\\n        documentationAnchorLink: 'handleblur-e-any--void',\\n        handlerName: 'handleBlur'\\n      });\\n    }\\n\\n    setFieldTouched(field, true);\\n  }, [setFieldTouched]);\\n  var handleBlur = useEventCallback(function (eventOrString) {\\n    if (isString(eventOrString)) {\\n      return function (event) {\\n        return executeBlur(event, eventOrString);\\n      };\\n    } else {\\n      executeBlur(eventOrString);\\n    }\\n  });\\n  var setFormikState = (0,external_react_.useCallback)(function (stateOrCb) {\\n    if (formik_esm_isFunction(stateOrCb)) {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: stateOrCb\\n      });\\n    } else {\\n      dispatch({\\n        type: 'SET_FORMIK_STATE',\\n        payload: function payload() {\\n          return stateOrCb;\\n        }\\n      });\\n    }\\n  }, []);\\n  var setStatus = (0,external_react_.useCallback)(function (status) {\\n    dispatch({\\n      type: 'SET_STATUS',\\n      payload: status\\n    });\\n  }, []);\\n  var setSubmitting = (0,external_react_.useCallback)(function (isSubmitting) {\\n    dispatch({\\n      type: 'SET_ISSUBMITTING',\\n      payload: isSubmitting\\n    });\\n  }, []);\\n  var submitForm = useEventCallback(function () {\\n    dispatch({\\n      type: 'SUBMIT_ATTEMPT'\\n    });\\n    return validateFormWithHighPriority().then(function (combinedErrors) {\\n      // In case an error was thrown and passed to the resolved Promise,\\n      // `combinedErrors` can be an instance of an Error. We need to check\\n      // that and abort the submit.\\n      // If we don't do that, calling `Object.keys(new Error())` yields an\\n      // empty array, which causes the validation to pass and the form\\n      // to be submitted.\\n      var isInstanceOfError = combinedErrors instanceof Error;\\n      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;\\n\\n      if (isActuallyValid) {\\n        // Proceed with submit...\\n        //\\n        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\\n        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\\n        // This would be fine in simple cases, but make it impossible to disable submit\\n        // buttons where people use callbacks or promises as side effects (which is basically\\n        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\\n        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\\n        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\\n        // cleanup of isSubmitting on behalf of the consumer.\\n        var promiseOrUndefined;\\n\\n        try {\\n          promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up\\n          // via setSubmitting(false)\\n\\n          if (promiseOrUndefined === undefined) {\\n            return;\\n          }\\n        } catch (error) {\\n          throw error;\\n        }\\n\\n        return Promise.resolve(promiseOrUndefined).then(function (result) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_SUCCESS'\\n            });\\n          }\\n\\n          return result;\\n        })[\\\"catch\\\"](function (_errors) {\\n          if (!!isMounted.current) {\\n            dispatch({\\n              type: 'SUBMIT_FAILURE'\\n            }); // This is a legit error rejected by the onSubmit fn\\n            // so we don't want to break the promise chain\\n\\n            throw _errors;\\n          }\\n        });\\n      } else if (!!isMounted.current) {\\n        // ^^^ Make sure Formik is still mounted before updating state\\n        dispatch({\\n          type: 'SUBMIT_FAILURE'\\n        }); // throw combinedErrors;\\n\\n        if (isInstanceOfError) {\\n          throw combinedErrors;\\n        }\\n      }\\n\\n      return;\\n    });\\n  });\\n  var handleSubmit = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    } // Warn if form submission is triggered by a <button> without a\\n    // specified `type` attribute during development. This mitigates\\n    // a common gotcha in forms with both reset and submit buttons,\\n    // where the dev forgets to add type=\\\"button\\\" to the reset button.\\n\\n\\n    if (false) { var activeElement; }\\n\\n    submitForm()[\\\"catch\\\"](function (reason) {\\n      console.warn(\\\"Warning: An unhandled error was caught from submitForm()\\\", reason);\\n    });\\n  });\\n  var imperativeMethods = {\\n    resetForm: resetForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    setErrors: setErrors,\\n    setFieldError: setFieldError,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    setFormikState: setFormikState,\\n    submitForm: submitForm\\n  };\\n  var executeSubmit = useEventCallback(function () {\\n    return onSubmit(state.values, imperativeMethods);\\n  });\\n  var handleReset = useEventCallback(function (e) {\\n    if (e && e.preventDefault && formik_esm_isFunction(e.preventDefault)) {\\n      e.preventDefault();\\n    }\\n\\n    if (e && e.stopPropagation && formik_esm_isFunction(e.stopPropagation)) {\\n      e.stopPropagation();\\n    }\\n\\n    resetForm();\\n  });\\n  var getFieldMeta = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      value: getIn(state.values, name),\\n      error: getIn(state.errors, name),\\n      touched: !!getIn(state.touched, name),\\n      initialValue: getIn(initialValues.current, name),\\n      initialTouched: !!getIn(initialTouched.current, name),\\n      initialError: getIn(initialErrors.current, name)\\n    };\\n  }, [state.errors, state.touched, state.values]);\\n  var getFieldHelpers = (0,external_react_.useCallback)(function (name) {\\n    return {\\n      setValue: function setValue(value, shouldValidate) {\\n        return setFieldValue(name, value, shouldValidate);\\n      },\\n      setTouched: function setTouched(value, shouldValidate) {\\n        return setFieldTouched(name, value, shouldValidate);\\n      },\\n      setError: function setError(value) {\\n        return setFieldError(name, value);\\n      }\\n    };\\n  }, [setFieldValue, setFieldTouched, setFieldError]);\\n  var getFieldProps = (0,external_react_.useCallback)(function (nameOrOptions) {\\n    var isAnObject = formik_esm_isObject(nameOrOptions);\\n    var name = isAnObject ? nameOrOptions.name : nameOrOptions;\\n    var valueState = getIn(state.values, name);\\n    var field = {\\n      name: name,\\n      value: valueState,\\n      onChange: handleChange,\\n      onBlur: handleBlur\\n    };\\n\\n    if (isAnObject) {\\n      var type = nameOrOptions.type,\\n          valueProp = nameOrOptions.value,\\n          is = nameOrOptions.as,\\n          multiple = nameOrOptions.multiple;\\n\\n      if (type === 'checkbox') {\\n        if (valueProp === undefined) {\\n          field.checked = !!valueState;\\n        } else {\\n          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));\\n          field.value = valueProp;\\n        }\\n      } else if (type === 'radio') {\\n        field.checked = valueState === valueProp;\\n        field.value = valueProp;\\n      } else if (is === 'select' && multiple) {\\n        field.value = field.value || [];\\n        field.multiple = true;\\n      }\\n    }\\n\\n    return field;\\n  }, [handleBlur, handleChange, state.values]);\\n  var dirty = (0,external_react_.useMemo)(function () {\\n    return !react_fast_compare_default()(initialValues.current, state.values);\\n  }, [initialValues.current, state.values]);\\n  var isValid = (0,external_react_.useMemo)(function () {\\n    return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && formik_esm_isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;\\n  }, [isInitialValid, dirty, state.errors, props]);\\n\\n  var ctx = _extends({}, state, {\\n    initialValues: initialValues.current,\\n    initialErrors: initialErrors.current,\\n    initialTouched: initialTouched.current,\\n    initialStatus: initialStatus.current,\\n    handleBlur: handleBlur,\\n    handleChange: handleChange,\\n    handleReset: handleReset,\\n    handleSubmit: handleSubmit,\\n    resetForm: resetForm,\\n    setErrors: setErrors,\\n    setFormikState: setFormikState,\\n    setFieldTouched: setFieldTouched,\\n    setFieldValue: setFieldValue,\\n    setFieldError: setFieldError,\\n    setStatus: setStatus,\\n    setSubmitting: setSubmitting,\\n    setTouched: setTouched,\\n    setValues: setValues,\\n    submitForm: submitForm,\\n    validateForm: validateFormWithHighPriority,\\n    validateField: validateField,\\n    isValid: isValid,\\n    dirty: dirty,\\n    unregisterField: unregisterField,\\n    registerField: registerField,\\n    getFieldProps: getFieldProps,\\n    getFieldMeta: getFieldMeta,\\n    getFieldHelpers: getFieldHelpers,\\n    validateOnBlur: validateOnBlur,\\n    validateOnChange: validateOnChange,\\n    validateOnMount: validateOnMount\\n  });\\n\\n  return ctx;\\n}\\nfunction Formik(props) {\\n  var formikbag = useFormik(props);\\n  var component = props.component,\\n      children = props.children,\\n      render = props.render,\\n      innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />\\n\\n  (0,external_react_.useImperativeHandle)(innerRef, function () {\\n    return formikbag;\\n  });\\n\\n  if (false) {}\\n\\n  return (0,external_react_.createElement)(FormikProvider, {\\n    value: formikbag\\n  }, component ? (0,external_react_.createElement)(component, formikbag) : render ? render(formikbag) : children // children come last, always called\\n  ? formik_esm_isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null);\\n}\\n\\nfunction warnAboutMissingIdentifier(_ref4) {\\n  var htmlContent = _ref4.htmlContent,\\n      documentationAnchorLink = _ref4.documentationAnchorLink,\\n      handlerName = _ref4.handlerName;\\n  console.warn(\\\"Warning: Formik called `\\\" + handlerName + \\\"`, but you forgot to pass an `id` or `name` attribute to your input:\\\\n    \\\" + htmlContent + \\\"\\\\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#\\\" + documentationAnchorLink + \\\"\\\\n  \\\");\\n}\\n/**\\r\\n * Transform Yup ValidationError to a more usable object\\r\\n */\\n\\n\\nfunction yupToFormErrors(yupError) {\\n  var errors = {};\\n\\n  if (yupError.inner) {\\n    if (yupError.inner.length === 0) {\\n      return setIn(errors, yupError.path, yupError.message);\\n    }\\n\\n    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\\n      var _ref5;\\n\\n      if (_isArray) {\\n        if (_i >= _iterator.length) break;\\n        _ref5 = _iterator[_i++];\\n      } else {\\n        _i = _iterator.next();\\n        if (_i.done) break;\\n        _ref5 = _i.value;\\n      }\\n\\n      var err = _ref5;\\n\\n      if (!getIn(errors, err.path)) {\\n        errors = setIn(errors, err.path, err.message);\\n      }\\n    }\\n  }\\n\\n  return errors;\\n}\\n/**\\r\\n * Validate a yup schema.\\r\\n */\\n\\nfunction validateYupSchema(values, schema, sync, context) {\\n  if (sync === void 0) {\\n    sync = false;\\n  }\\n\\n  if (context === void 0) {\\n    context = {};\\n  }\\n\\n  var validateData = prepareDataForValidation(values);\\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\\n    abortEarly: false,\\n    context: context\\n  });\\n}\\n/**\\r\\n * Recursively prepare values.\\r\\n */\\n\\nfunction prepareDataForValidation(values) {\\n  var data = Array.isArray(values) ? [] : {};\\n\\n  for (var k in values) {\\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\\n      var key = String(k);\\n\\n      if (Array.isArray(values[key]) === true) {\\n        data[key] = values[key].map(function (value) {\\n          if (Array.isArray(value) === true || lodash_es_isPlainObject(value)) {\\n            return prepareDataForValidation(value);\\n          } else {\\n            return value !== '' ? value : undefined;\\n          }\\n        });\\n      } else if (lodash_es_isPlainObject(values[key])) {\\n        data[key] = prepareDataForValidation(values[key]);\\n      } else {\\n        data[key] = values[key] !== '' ? values[key] : undefined;\\n      }\\n    }\\n  }\\n\\n  return data;\\n}\\n/**\\r\\n * deepmerge array merging algorithm\\r\\n * https://github.com/KyleAMathews/deepmerge#combine-array\\r\\n */\\n\\nfunction arrayMerge(target, source, options) {\\n  var destination = target.slice();\\n  source.forEach(function merge(e, i) {\\n    if (typeof destination[i] === 'undefined') {\\n      var cloneRequested = options.clone !== false;\\n      var shouldClone = cloneRequested && options.isMergeableObject(e);\\n      destination[i] = shouldClone ? es(Array.isArray(e) ? [] : {}, e, options) : e;\\n    } else if (options.isMergeableObject(e)) {\\n      destination[i] = es(target[i], e, options);\\n    } else if (target.indexOf(e) === -1) {\\n      destination.push(e);\\n    }\\n  });\\n  return destination;\\n}\\n/** Return multi select values based on an array of options */\\n\\n\\nfunction getSelectedValues(options) {\\n  return Array.from(options).filter(function (el) {\\n    return el.selected;\\n  }).map(function (el) {\\n    return el.value;\\n  });\\n}\\n/** Return the next value for a checkbox */\\n\\n\\nfunction getValueForCheckbox(currentValue, checked, valueProp) {\\n  // If the current value was a boolean, return a boolean\\n  if (typeof currentValue === 'boolean') {\\n    return Boolean(checked);\\n  } // If the currentValue was not a boolean we want to return an array\\n\\n\\n  var currentArrayOfValues = [];\\n  var isValueInArray = false;\\n  var index = -1;\\n\\n  if (!Array.isArray(currentValue)) {\\n    // eslint-disable-next-line eqeqeq\\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\\n      return Boolean(checked);\\n    }\\n  } else {\\n    // If the current value is already an array, use it\\n    currentArrayOfValues = currentValue;\\n    index = currentValue.indexOf(valueProp);\\n    isValueInArray = index >= 0;\\n  } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\\n\\n\\n  if (checked && valueProp && !isValueInArray) {\\n    return currentArrayOfValues.concat(valueProp);\\n  } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\\n\\n\\n  if (!isValueInArray) {\\n    return currentArrayOfValues;\\n  } // If the checkbox was unchecked and the value is in the array, remove the value and return the array\\n\\n\\n  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));\\n} // React currently throws a warning when using useLayoutEffect on the server.\\n// To get around it, we can conditionally useEffect on the server (no-op) and\\n// useLayoutEffect in the browser.\\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\\n\\n\\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? external_react_.useLayoutEffect : external_react_.useEffect;\\n\\nfunction useEventCallback(fn) {\\n  var ref = (0,external_react_.useRef)(fn); // we copy a ref to the callback scoped to the current state/props on each render\\n\\n  useIsomorphicLayoutEffect(function () {\\n    ref.current = fn;\\n  });\\n  return (0,external_react_.useCallback)(function () {\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    return ref.current.apply(void 0, args);\\n  }, []);\\n}\\n\\nfunction useField(propsOrFieldName) {\\n  var formik = useFormikContext();\\n  var getFieldProps = formik.getFieldProps,\\n      getFieldMeta = formik.getFieldMeta,\\n      getFieldHelpers = formik.getFieldHelpers,\\n      registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  var isAnObject = formik_esm_isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>\\n\\n  var props = isAnObject ? propsOrFieldName : {\\n    name: propsOrFieldName\\n  };\\n  var fieldName = props.name,\\n      validateFn = props.validate;\\n  useEffect(function () {\\n    if (fieldName) {\\n      registerField(fieldName, {\\n        validate: validateFn\\n      });\\n    }\\n\\n    return function () {\\n      if (fieldName) {\\n        unregisterField(fieldName);\\n      }\\n    };\\n  }, [registerField, unregisterField, fieldName, validateFn]);\\n\\n  if (false) {}\\n\\n  !fieldName ?  false ? 0 : invariant(false) : void 0;\\n  return [getFieldProps(props), getFieldMeta(fieldName), getFieldHelpers(fieldName)];\\n}\\nfunction Field(_ref) {\\n  var validate = _ref.validate,\\n      name = _ref.name,\\n      render = _ref.render,\\n      children = _ref.children,\\n      is = _ref.as,\\n      component = _ref.component,\\n      props = _objectWithoutPropertiesLoose(_ref, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"children\\\", \\\"as\\\", \\\"component\\\"]);\\n\\n  var _useFormikContext = useFormikContext(),\\n      formik = _objectWithoutPropertiesLoose(_useFormikContext, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n  if (false) {} // Register field and field-level validation with parent <Formik>\\n\\n\\n  var registerField = formik.registerField,\\n      unregisterField = formik.unregisterField;\\n  (0,external_react_.useEffect)(function () {\\n    registerField(name, {\\n      validate: validate\\n    });\\n    return function () {\\n      unregisterField(name);\\n    };\\n  }, [registerField, unregisterField, name, validate]);\\n  var field = formik.getFieldProps(_extends({\\n    name: name\\n  }, props));\\n  var meta = formik.getFieldMeta(name);\\n  var legacyBag = {\\n    field: field,\\n    form: formik\\n  };\\n\\n  if (render) {\\n    return render(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (formik_esm_isFunction(children)) {\\n    return children(_extends({}, legacyBag, {\\n      meta: meta\\n    }));\\n  }\\n\\n  if (component) {\\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n    if (typeof component === 'string') {\\n      var innerRef = props.innerRef,\\n          rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        ref: innerRef\\n      }, field, rest), children);\\n    } // We don't pass `meta` for backwards compat\\n\\n\\n    return (0,external_react_.createElement)(component, _extends({\\n      field: field,\\n      form: formik\\n    }, props), children);\\n  } // default to input here so we can check for both `as` and `children` above\\n\\n\\n  var asElement = is || 'input';\\n\\n  if (typeof asElement === 'string') {\\n    var _innerRef = props.innerRef,\\n        _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n    return (0,external_react_.createElement)(asElement, _extends({\\n      ref: _innerRef\\n    }, field, _rest), children);\\n  }\\n\\n  return (0,external_react_.createElement)(asElement, _extends({}, field, props), children);\\n}\\n\\nvar Form = /*#__PURE__*/(0,external_react_.forwardRef)(function (props, ref) {\\n  // iOS needs an \\\"action\\\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\\n  // We default the action to \\\"#\\\" in case the preventDefault fails (just updates the URL hash)\\n  var action = props.action,\\n      rest = _objectWithoutPropertiesLoose(props, [\\\"action\\\"]);\\n\\n  var _action = action || '#';\\n\\n  var _useFormikContext = useFormikContext(),\\n      handleReset = _useFormikContext.handleReset,\\n      handleSubmit = _useFormikContext.handleSubmit;\\n\\n  return (0,external_react_.createElement)(\\\"form\\\", Object.assign({\\n    onSubmit: handleSubmit,\\n    ref: ref,\\n    onReset: handleReset,\\n    action: _action\\n  }, rest));\\n});\\nForm.displayName = 'Form';\\n\\n/**\\r\\n * A public higher-order component to access the imperative API\\r\\n */\\n\\nfunction withFormik(_ref) {\\n  var _ref$mapPropsToValues = _ref.mapPropsToValues,\\n      mapPropsToValues = _ref$mapPropsToValues === void 0 ? function (vanillaProps) {\\n    var val = {};\\n\\n    for (var k in vanillaProps) {\\n      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {\\n        // @todo TypeScript fix\\n        val[k] = vanillaProps[k];\\n      }\\n    }\\n\\n    return val;\\n  } : _ref$mapPropsToValues,\\n      config = _objectWithoutPropertiesLoose(_ref, [\\\"mapPropsToValues\\\"]);\\n\\n  return function createFormik(Component$1) {\\n    var componentDisplayName = Component$1.displayName || Component$1.name || Component$1.constructor && Component$1.constructor.name || 'Component';\\n    /**\\r\\n     * We need to use closures here for to provide the wrapped component's props to\\r\\n     * the respective withFormik config methods.\\r\\n     */\\n\\n    var C = /*#__PURE__*/function (_React$Component) {\\n      _inheritsLoose(C, _React$Component);\\n\\n      function C() {\\n        var _this;\\n\\n        _this = _React$Component.apply(this, arguments) || this;\\n\\n        _this.validate = function (values) {\\n          return config.validate(values, _this.props);\\n        };\\n\\n        _this.validationSchema = function () {\\n          return formik_esm_isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;\\n        };\\n\\n        _this.handleSubmit = function (values, actions) {\\n          return config.handleSubmit(values, _extends({}, actions, {\\n            props: _this.props\\n          }));\\n        };\\n        /**\\r\\n         * Just avoiding a render callback for perf here\\r\\n         */\\n\\n\\n        _this.renderFormComponent = function (formikProps) {\\n          return createElement(Component$1, Object.assign({}, _this.props, formikProps));\\n        };\\n\\n        return _this;\\n      }\\n\\n      var _proto = C.prototype;\\n\\n      _proto.render = function render() {\\n        var _this$props = this.props,\\n            props = _objectWithoutPropertiesLoose(_this$props, [\\\"children\\\"]);\\n\\n        return createElement(Formik, Object.assign({}, props, config, {\\n          validate: config.validate && this.validate,\\n          validationSchema: config.validationSchema && this.validationSchema,\\n          initialValues: mapPropsToValues(this.props),\\n          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),\\n          initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),\\n          initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),\\n          onSubmit: this.handleSubmit,\\n          children: this.renderFormComponent\\n        }));\\n      };\\n\\n      return C;\\n    }(Component);\\n\\n    C.displayName = \\\"WithFormik(\\\" + componentDisplayName + \\\")\\\";\\n    return hoistNonReactStatics(C, Component$1 // cast type to ComponentClass (even if SFC)\\n    );\\n  };\\n}\\n\\n/**\\r\\n * Connect any component to Formik context, and inject as a prop called `formik`;\\r\\n * @param Comp React Component\\r\\n */\\n\\nfunction connect(Comp) {\\n  var C = function C(props) {\\n    return createElement(FormikConsumer, null, function (formik) {\\n      !!!formik ?  false ? 0 : invariant(false) : void 0;\\n      return createElement(Comp, Object.assign({}, props, {\\n        formik: formik\\n      }));\\n    });\\n  };\\n\\n  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests\\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\\n\\n  C.WrappedComponent = Comp;\\n  C.displayName = \\\"FormikConnect(\\\" + componentDisplayName + \\\")\\\";\\n  return hoistNonReactStatics(C, Comp // cast type to ComponentClass (even if SFC)\\n  );\\n}\\n\\n/**\\r\\n * Some array helpers!\\r\\n */\\n\\nvar move = function move(array, from, to) {\\n  var copy = copyArrayLike(array);\\n  var value = copy[from];\\n  copy.splice(from, 1);\\n  copy.splice(to, 0, value);\\n  return copy;\\n};\\nvar swap = function swap(arrayLike, indexA, indexB) {\\n  var copy = copyArrayLike(arrayLike);\\n  var a = copy[indexA];\\n  copy[indexA] = copy[indexB];\\n  copy[indexB] = a;\\n  return copy;\\n};\\nvar insert = function insert(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy.splice(index, 0, value);\\n  return copy;\\n};\\nvar replace = function replace(arrayLike, index, value) {\\n  var copy = copyArrayLike(arrayLike);\\n  copy[index] = value;\\n  return copy;\\n};\\n\\nvar copyArrayLike = function copyArrayLike(arrayLike) {\\n  if (!arrayLike) {\\n    return [];\\n  } else if (Array.isArray(arrayLike)) {\\n    return [].concat(arrayLike);\\n  } else {\\n    var maxIndex = Object.keys(arrayLike).map(function (key) {\\n      return parseInt(key);\\n    }).reduce(function (max, el) {\\n      return el > max ? el : max;\\n    }, 0);\\n    return Array.from(_extends({}, arrayLike, {\\n      length: maxIndex + 1\\n    }));\\n  }\\n};\\n\\nvar FieldArrayInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FieldArrayInner, _React$Component);\\n\\n  function FieldArrayInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this;\\n\\n    _this.updateArrayField = function (fn, alterTouched, alterErrors) {\\n      var _this$props = _this.props,\\n          name = _this$props.name,\\n          setFormikState = _this$props.formik.setFormikState;\\n      setFormikState(function (prevState) {\\n        var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\\n        var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn; // values fn should be executed before updateErrors and updateTouched,\\n        // otherwise it causes an error with unshift.\\n\\n        var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));\\n        var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;\\n        var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;\\n\\n        if (isEmptyArray(fieldError)) {\\n          fieldError = undefined;\\n        }\\n\\n        if (isEmptyArray(fieldTouched)) {\\n          fieldTouched = undefined;\\n        }\\n\\n        return _extends({}, prevState, {\\n          values: values,\\n          errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,\\n          touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched\\n        });\\n      });\\n    };\\n\\n    _this.push = function (value) {\\n      return _this.updateArrayField(function (arrayLike) {\\n        return [].concat(copyArrayLike(arrayLike), [lodash_es_cloneDeep(value)]);\\n      }, false, false);\\n    };\\n\\n    _this.handlePush = function (value) {\\n      return function () {\\n        return _this.push(value);\\n      };\\n    };\\n\\n    _this.swap = function (indexA, indexB) {\\n      return _this.updateArrayField(function (array) {\\n        return swap(array, indexA, indexB);\\n      }, true, true);\\n    };\\n\\n    _this.handleSwap = function (indexA, indexB) {\\n      return function () {\\n        return _this.swap(indexA, indexB);\\n      };\\n    };\\n\\n    _this.move = function (from, to) {\\n      return _this.updateArrayField(function (array) {\\n        return move(array, from, to);\\n      }, true, true);\\n    };\\n\\n    _this.handleMove = function (from, to) {\\n      return function () {\\n        return _this.move(from, to);\\n      };\\n    };\\n\\n    _this.insert = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return insert(array, index, value);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      }, function (array) {\\n        return insert(array, index, null);\\n      });\\n    };\\n\\n    _this.handleInsert = function (index, value) {\\n      return function () {\\n        return _this.insert(index, value);\\n      };\\n    };\\n\\n    _this.replace = function (index, value) {\\n      return _this.updateArrayField(function (array) {\\n        return replace(array, index, value);\\n      }, false, false);\\n    };\\n\\n    _this.handleReplace = function (index, value) {\\n      return function () {\\n        return _this.replace(index, value);\\n      };\\n    };\\n\\n    _this.unshift = function (value) {\\n      var length = -1;\\n\\n      _this.updateArrayField(function (array) {\\n        var arr = array ? [value].concat(array) : [value];\\n\\n        if (length < 0) {\\n          length = arr.length;\\n        }\\n\\n        return arr;\\n      }, function (array) {\\n        var arr = array ? [null].concat(array) : [null];\\n\\n        if (length < 0) {\\n          length = arr.length;\\n        }\\n\\n        return arr;\\n      }, function (array) {\\n        var arr = array ? [null].concat(array) : [null];\\n\\n        if (length < 0) {\\n          length = arr.length;\\n        }\\n\\n        return arr;\\n      });\\n\\n      return length;\\n    };\\n\\n    _this.handleUnshift = function (value) {\\n      return function () {\\n        return _this.unshift(value);\\n      };\\n    };\\n\\n    _this.handleRemove = function (index) {\\n      return function () {\\n        return _this.remove(index);\\n      };\\n    };\\n\\n    _this.handlePop = function () {\\n      return function () {\\n        return _this.pop();\\n      };\\n    }; // We need TypeScript generics on these, so we'll bind them in the constructor\\n    // @todo Fix TS 3.2.1\\n\\n\\n    _this.remove = _this.remove.bind(_assertThisInitialized(_this));\\n    _this.pop = _this.pop.bind(_assertThisInitialized(_this));\\n    return _this;\\n  }\\n\\n  var _proto = FieldArrayInner.prototype;\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.validateOnChange && this.props.formik.validateOnChange && !react_fast_compare_default()(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name))) {\\n      this.props.formik.validateForm(this.props.formik.values);\\n    }\\n  };\\n\\n  _proto.remove = function remove(index) {\\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var copy = array ? copyArrayLike(array) : [];\\n\\n      if (!result) {\\n        result = copy[index];\\n      }\\n\\n      if (formik_esm_isFunction(copy.splice)) {\\n        copy.splice(index, 1);\\n      }\\n\\n      return copy;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.pop = function pop() {\\n    // Remove relevant pieces of `touched` and `errors` too!\\n    var result;\\n    this.updateArrayField( // so this gets call 3 times\\n    function (array) {\\n      var tmp = array;\\n\\n      if (!result) {\\n        result = tmp && tmp.pop && tmp.pop();\\n      }\\n\\n      return tmp;\\n    }, true, true);\\n    return result;\\n  };\\n\\n  _proto.render = function render() {\\n    var arrayHelpers = {\\n      push: this.push,\\n      pop: this.pop,\\n      swap: this.swap,\\n      move: this.move,\\n      insert: this.insert,\\n      replace: this.replace,\\n      unshift: this.unshift,\\n      remove: this.remove,\\n      handlePush: this.handlePush,\\n      handlePop: this.handlePop,\\n      handleSwap: this.handleSwap,\\n      handleMove: this.handleMove,\\n      handleInsert: this.handleInsert,\\n      handleReplace: this.handleReplace,\\n      handleUnshift: this.handleUnshift,\\n      handleRemove: this.handleRemove\\n    };\\n\\n    var _this$props2 = this.props,\\n        component = _this$props2.component,\\n        render = _this$props2.render,\\n        children = _this$props2.children,\\n        name = _this$props2.name,\\n        _this$props2$formik = _this$props2.formik,\\n        restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var props = _extends({}, arrayHelpers, {\\n      form: restOfFormik,\\n      name: name\\n    });\\n\\n    return component ? (0,external_react_.createElement)(component, props) : render ? render(props) : children // children come last, always called\\n    ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? external_react_.Children.only(children) : null : null;\\n  };\\n\\n  return FieldArrayInner;\\n}(external_react_.Component);\\n\\nFieldArrayInner.defaultProps = {\\n  validateOnChange: true\\n};\\nvar FieldArray = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FieldArrayInner)));\\n\\nvar ErrorMessageImpl = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(ErrorMessageImpl, _React$Component);\\n\\n  function ErrorMessageImpl() {\\n    return _React$Component.apply(this, arguments) || this;\\n  }\\n\\n  var _proto = ErrorMessageImpl.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        render = _this$props.render,\\n        children = _this$props.children,\\n        name = _this$props.name,\\n        rest = _objectWithoutPropertiesLoose(_this$props, [\\\"component\\\", \\\"formik\\\", \\\"render\\\", \\\"children\\\", \\\"name\\\"]);\\n\\n    var touch = getIn(formik.touched, name);\\n    var error = getIn(formik.errors, name);\\n    return !!touch && !!error ? render ? formik_esm_isFunction(render) ? render(error) : null : children ? formik_esm_isFunction(children) ? children(error) : null : component ? (0,external_react_.createElement)(component, rest, error) : error : null;\\n  };\\n\\n  return ErrorMessageImpl;\\n}(external_react_.Component);\\n\\nvar ErrorMessage = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(ErrorMessageImpl)));\\n\\n/**\\r\\n * Custom Field component for quickly hooking into Formik\\r\\n * context and wiring up forms.\\r\\n */\\n\\nvar FastFieldInner = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(FastFieldInner, _React$Component);\\n\\n  function FastFieldInner(props) {\\n    var _this;\\n\\n    _this = _React$Component.call(this, props) || this;\\n    var render = props.render,\\n        children = props.children,\\n        component = props.component,\\n        is = props.as,\\n        name = props.name;\\n    !!render ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && render) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(is && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(component && children && formik_esm_isFunction(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    !!(render && children && !isEmptyChildren(children)) ?  false ? 0 : tiny_warning_esm(false) : void 0;\\n    return _this;\\n  }\\n\\n  var _proto = FastFieldInner.prototype;\\n\\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\\n    if (this.props.shouldUpdate) {\\n      return this.props.shouldUpdate(props, this.props);\\n    } else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n\\n  _proto.componentDidMount = function componentDidMount() {\\n    // Register the Field with the parent Formik. Parent will cycle through\\n    // registered Field's validate fns right prior to submit\\n    this.props.formik.registerField(this.props.name, {\\n      validate: this.props.validate\\n    });\\n  };\\n\\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\\n    if (this.props.name !== prevProps.name) {\\n      this.props.formik.unregisterField(prevProps.name);\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n\\n    if (this.props.validate !== prevProps.validate) {\\n      this.props.formik.registerField(this.props.name, {\\n        validate: this.props.validate\\n      });\\n    }\\n  };\\n\\n  _proto.componentWillUnmount = function componentWillUnmount() {\\n    this.props.formik.unregisterField(this.props.name);\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        name = _this$props.name,\\n        render = _this$props.render,\\n        is = _this$props.as,\\n        children = _this$props.children,\\n        component = _this$props.component,\\n        formik = _this$props.formik,\\n        props = _objectWithoutPropertiesLoose(_this$props, [\\\"validate\\\", \\\"name\\\", \\\"render\\\", \\\"as\\\", \\\"children\\\", \\\"component\\\", \\\"shouldUpdate\\\", \\\"formik\\\"]);\\n\\n    var restOfFormik = _objectWithoutPropertiesLoose(formik, [\\\"validate\\\", \\\"validationSchema\\\"]);\\n\\n    var field = formik.getFieldProps(_extends({\\n      name: name\\n    }, props));\\n    var meta = {\\n      value: getIn(formik.values, name),\\n      error: getIn(formik.errors, name),\\n      touched: !!getIn(formik.touched, name),\\n      initialValue: getIn(formik.initialValues, name),\\n      initialTouched: !!getIn(formik.initialTouched, name),\\n      initialError: getIn(formik.initialErrors, name)\\n    };\\n    var bag = {\\n      field: field,\\n      meta: meta,\\n      form: restOfFormik\\n    };\\n\\n    if (render) {\\n      return render(bag);\\n    }\\n\\n    if (formik_esm_isFunction(children)) {\\n      return children(bag);\\n    }\\n\\n    if (component) {\\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\\n      if (typeof component === 'string') {\\n        var innerRef = props.innerRef,\\n            rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n        return (0,external_react_.createElement)(component, _extends({\\n          ref: innerRef\\n        }, field, rest), children);\\n      } // We don't pass `meta` for backwards compat\\n\\n\\n      return (0,external_react_.createElement)(component, _extends({\\n        field: field,\\n        form: formik\\n      }, props), children);\\n    } // default to input here so we can check for both `as` and `children` above\\n\\n\\n    var asElement = is || 'input';\\n\\n    if (typeof asElement === 'string') {\\n      var _innerRef = props.innerRef,\\n          _rest = _objectWithoutPropertiesLoose(props, [\\\"innerRef\\\"]);\\n\\n      return (0,external_react_.createElement)(asElement, _extends({\\n        ref: _innerRef\\n      }, field, _rest), children);\\n    }\\n\\n    return (0,external_react_.createElement)(asElement, _extends({}, field, props), children);\\n  };\\n\\n  return FastFieldInner;\\n}(external_react_.Component);\\n\\nvar FastField = /*#__PURE__*/(/* unused pure expression or super */ null && (connect(FastFieldInner)));\\n\\n\\n//# sourceMappingURL=formik.esm.js.map\\n\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: ./Components/load-error-message/index.js + 1 modules\\nvar load_error_message = __webpack_require__(\\\"./Components/load-error-message/index.js\\\");\\n;// CONCATENATED MODULE: ./Components/article/article.jsx\\n\\n\\n\\n\\n\\n\\nvar Article = function Article(_ref) {\\n  var title = _ref.title,\\n      descriptions = _ref.descriptions,\\n      onClickLearnMore = _ref.onClickLearnMore;\\n  var has_descriptions = (descriptions === null || descriptions === void 0 ? void 0 : descriptions.length) > 0;\\n  var has_single_description = (descriptions === null || descriptions === void 0 ? void 0 : descriptions.length) === 1;\\n  return /*#__PURE__*/external_react_.createElement(\\\"article\\\", {\\n    className: \\\"da-article\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"h4\\\",\\n    color: \\\"prominent\\\",\\n    line_height: \\\"m\\\",\\n    size: \\\"xs\\\",\\n    weight: \\\"bold\\\",\\n    className: \\\"da-article__header\\\"\\n  }, title), has_descriptions && /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, has_single_description ? /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"p\\\",\\n    size: \\\"xxs\\\",\\n    line_height: \\\"m\\\"\\n  }, descriptions[0]) : /*#__PURE__*/external_react_.createElement(\\\"ul\\\", {\\n    className: \\\"da-article__list\\\"\\n  }, descriptions.map(function (description, idx) {\\n    return /*#__PURE__*/external_react_.createElement(\\\"li\\\", {\\n      key: idx\\n    }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n      size: \\\"xxs\\\",\\n      line_height: \\\"xs\\\"\\n    }, description.component || description));\\n  }))), onClickLearnMore && /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-article__learn-more\\\",\\n    onClick: onClickLearnMore\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: \\\"xxs\\\",\\n    color: \\\"loss-danger\\\",\\n    line_height: \\\"s\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Learn more\\\"\\n  })), /*#__PURE__*/external_react_.createElement(components_.Icon, {\\n    icon: \\\"IcChevronRight\\\",\\n    className: \\\"da-article__learn-more-icon\\\",\\n    color: \\\"red\\\"\\n  })));\\n};\\n\\nArticle.propTypes = {\\n  descriptions: (prop_types_default()).array.isRequired,\\n  onClickLearnMore: (prop_types_default()).func,\\n  title: (prop_types_default()).string.isRequired\\n};\\n/* harmony default export */ const article = (Article);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-article.jsx\\n\\n\\n\\n\\nvar ApiTokenArticle = function ApiTokenArticle() {\\n  return /*#__PURE__*/external_react_default().createElement(article, {\\n    title: (0,translations_.localize)('API token'),\\n    descriptions: [/*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      key: 0,\\n      i18n_default_text: \\\"To access your mobile apps and other third-party apps, you'll first need to generate an API token.\\\"\\n    })]\\n  });\\n};\\n\\n/* harmony default export */ const api_token_article = (ApiTokenArticle);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-card.jsx\\nfunction api_token_card_extends() { api_token_card_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return api_token_card_extends.apply(this, arguments); }\\n\\n\\n\\n\\n\\n\\nvar ApiTokenCard = function ApiTokenCard(_ref) {\\n  var name = _ref.name,\\n      value = _ref.value,\\n      display_name = _ref.display_name,\\n      description = _ref.description,\\n      setFieldValue = _ref.setFieldValue;\\n  return /*#__PURE__*/external_react_.createElement(Field, {\\n    name: name\\n  }, function (_ref2) {\\n    var field = _ref2.field;\\n    return /*#__PURE__*/external_react_.createElement(components_.CompositeCheckbox, api_token_card_extends({}, field, {\\n      onChange: function onChange() {\\n        return setFieldValue(name, !value);\\n      },\\n      value: value,\\n      className: \\\"api-token__checkbox\\\",\\n      defaultChecked: value,\\n      label: display_name,\\n      description: description\\n    }));\\n  });\\n};\\n\\nApiTokenCard.propTypes = {\\n  description: (prop_types_default()).string.isRequired,\\n  display_name: (prop_types_default()).string.isRequired,\\n  name: (prop_types_default()).string.isRequired,\\n  value: prop_types_default().oneOfType([(prop_types_default()).string, (prop_types_default()).bool]),\\n  setFieldValue: (prop_types_default()).func.isRequired\\n};\\n/* harmony default export */ const api_token_card = (ApiTokenCard);\\n// EXTERNAL MODULE: external \\\"react-dom\\\"\\nvar external_react_dom_ = __webpack_require__(\\\"react-dom\\\");\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-context.js\\n\\nvar ApiTokenContext = /*#__PURE__*/external_react_.createContext();\\n/* harmony default export */ const api_token_context = (ApiTokenContext);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-footer.jsx\\n\\n\\n\\n\\n\\n\\nvar ApiTokenFooter = function ApiTokenFooter() {\\n  var _React$useContext = external_react_.useContext(api_token_context),\\n      footer_ref = _React$useContext.footer_ref,\\n      toggleOverlay = _React$useContext.toggleOverlay;\\n\\n  return /*#__PURE__*/(0,external_react_dom_.createPortal)( /*#__PURE__*/external_react_.createElement(components_.AppSettings.Footer, null, /*#__PURE__*/external_react_.createElement(components_.AppSettings.Footer.Left, null, /*#__PURE__*/external_react_.createElement(\\\"a\\\", {\\n    className: \\\"link link--prominent\\\",\\n    onClick: toggleOverlay\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: \\\"xxs\\\",\\n    line_height: \\\"m\\\",\\n    weight: \\\"bold\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Learn more about API token\\\"\\n  }))))), footer_ref);\\n};\\n\\n/* harmony default export */ const api_token_footer = (ApiTokenFooter);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-overlay.jsx\\n\\n\\n\\n\\n\\nvar ApiTokenOverlay = function ApiTokenOverlay() {\\n  var _React$useContext = external_react_.useContext(api_token_context),\\n      overlay_ref = _React$useContext.overlay_ref,\\n      toggleOverlay = _React$useContext.toggleOverlay;\\n\\n  return /*#__PURE__*/external_react_.createElement(components_.Popup.Overlay, {\\n    descriptions: [{\\n      key: 'api_token_desc_1',\\n      component: /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        key: 0,\\n        i18n_default_text: \\\"To access our mobile apps and other third-party apps, you'll first need to generate an API token.\\\"\\n      })\\n    }],\\n    done_text: (0,translations_.localize)('Done'),\\n    overlay_ref: overlay_ref,\\n    title: (0,translations_.localize)('API Token'),\\n    toggleOverlay: toggleOverlay\\n  });\\n};\\n\\n/* harmony default export */ const api_token_overlay = (ApiTokenOverlay);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-delete-buttons.jsx\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\"undefined\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar ApiTokenDeleteButtons = function ApiTokenDeleteButtons(_ref) {\\n  var token = _ref.token;\\n\\n  var _React$useContext = external_react_.useContext(api_token_context),\\n      deleteToken = _React$useContext.deleteToken;\\n\\n  var _React$useState = external_react_.useState(false),\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\n      is_deleting = _React$useState2[0],\\n      setIsDeleting = _React$useState2[1];\\n\\n  var isMounted = (0,shared_.useIsMounted)();\\n  var timeout_ref = external_react_.useRef(null);\\n\\n  var getConfirmationBeforeDelete = function getConfirmationBeforeDelete() {\\n    return setIsDeleting(true);\\n  };\\n\\n  var handleNo = function handleNo() {\\n    return setIsDeleting(false);\\n  };\\n\\n  var handleYes = function handleYes() {\\n    deleteToken(token.token)[\\\"finally\\\"](function () {\\n      if (isMounted()) setIsDeleting(false);\\n    });\\n  };\\n\\n  external_react_.useEffect(function () {\\n    if (is_deleting) {\\n      timeout_ref.current = setTimeout(function () {\\n        if (isMounted()) setIsDeleting(false);\\n      }, 10000);\\n    } else {\\n      clearTimeout(timeout_ref.current);\\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\\n\\n  }, [is_deleting]);\\n\\n  if (is_deleting) {\\n    return /*#__PURE__*/external_react_.createElement(components_.Button.Group, null, /*#__PURE__*/external_react_.createElement(components_.Button, {\\n      type: \\\"button\\\",\\n      secondary: true,\\n      small: true,\\n      onClick: handleNo\\n    }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n      i18n_default_text: \\\"No\\\"\\n    })), /*#__PURE__*/external_react_.createElement(components_.Button, {\\n      type: \\\"button\\\",\\n      secondary: true,\\n      small: true,\\n      onClick: handleYes\\n    }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Yes\\\"\\n    })));\\n  }\\n\\n  return /*#__PURE__*/external_react_.createElement(components_.Button, {\\n    type: \\\"button\\\",\\n    secondary: true,\\n    small: true,\\n    onClick: getConfirmationBeforeDelete\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Delete\\\"\\n  }));\\n};\\n\\nApiTokenDeleteButtons.propTypes = {\\n  token: prop_types_default().shape({\\n    display_name: (prop_types_default()).string.isRequired,\\n    last_used: (prop_types_default()).string.isRequired,\\n    scopes: (prop_types_default()).string.isRequired,\\n    token: (prop_types_default()).string.isRequired\\n  }).isRequired\\n};\\n/* harmony default export */ const api_token_delete_buttons = (ApiTokenDeleteButtons);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-table-row-cell.jsx\\n\\n\\n\\n\\n\\nvar ApiTokenTableRowCell = function ApiTokenTableRowCell(_ref) {\\n  var className = _ref.className,\\n      children = _ref.children,\\n      should_bypass_text = _ref.should_bypass_text;\\n\\n  if (should_bypass_text) {\\n    return /*#__PURE__*/external_react_.createElement(\\\"td\\\", {\\n      className: classnames_default()('da-api-token__table-cell', className)\\n    }, children);\\n  }\\n\\n  return /*#__PURE__*/external_react_.createElement(\\\"td\\\", {\\n    className: classnames_default()('da-api-token__table-cell', className)\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    color: \\\"prominent \\\",\\n    size: \\\"xs\\\",\\n    line_height: \\\"m\\\"\\n  }, children));\\n};\\n\\nApiTokenTableRowCell.propTypes = {\\n  children: (prop_types_default()).any.isRequired,\\n  should_bypass_text: (prop_types_default()).bool\\n};\\n/* harmony default export */ const api_token_table_row_cell = (ApiTokenTableRowCell);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-table-row.jsx\\n\\n\\n\\n\\n\\n\\n\\nvar ApiTokenTableRow = function ApiTokenTableRow(_ref) {\\n  var token = _ref.token;\\n  return /*#__PURE__*/external_react_.createElement(\\\"tr\\\", {\\n    className: \\\"da-api-token__table-cell-row\\\"\\n  }, /*#__PURE__*/external_react_.createElement(api_token_table_row_cell, {\\n    className: \\\"da-api-token__table-cell--name\\\"\\n  }, token.display_name), /*#__PURE__*/external_react_.createElement(api_token_table_row_cell, {\\n    should_bypass_text: true\\n  }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-api-token__clipboard-wrapper\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"p\\\",\\n    color: \\\"prominent \\\",\\n    size: \\\"xs\\\",\\n    line_height: \\\"m\\\"\\n  }, token.token), /*#__PURE__*/external_react_.createElement(components_.Clipboard, {\\n    className: \\\"da-api-token__clipboard\\\",\\n    info_message: (0,translations_.localize)('Click here to copy token'),\\n    popover_props: {\\n      relative_render: false,\\n      zIndex: 9999\\n    },\\n    success_message: (0,translations_.localize)('Token copied!'),\\n    text_copy: token.token\\n  }))), /*#__PURE__*/external_react_.createElement(api_token_table_row_cell, null, token.scopes), /*#__PURE__*/external_react_.createElement(api_token_table_row_cell, null, token.last_used), /*#__PURE__*/external_react_.createElement(api_token_table_row_cell, {\\n    should_bypass_text: true\\n  }, /*#__PURE__*/external_react_.createElement(api_token_delete_buttons, {\\n    token: token\\n  })));\\n};\\n\\nApiTokenTableRow.propTypes = {\\n  token: prop_types_default().shape({\\n    display_name: (prop_types_default()).string.isRequired,\\n    last_used: (prop_types_default()).string.isRequired,\\n    scopes: (prop_types_default()).string.isRequired,\\n    token: (prop_types_default()).string.isRequired\\n  }).isRequired\\n};\\n/* harmony default export */ const api_token_table_row = (ApiTokenTableRow);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-table-row-header.jsx\\n\\n\\n\\n\\nvar ApiTokenTableRowHeader = function ApiTokenTableRowHeader(_ref) {\\n  var text = _ref.text;\\n  return /*#__PURE__*/external_react_.createElement(\\\"th\\\", {\\n    className: \\\"da-api-token__table-header\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    color: \\\"prominent \\\",\\n    size: \\\"xs\\\",\\n    line_height: \\\"m\\\",\\n    weight: \\\"bold\\\"\\n  }, text));\\n};\\n\\nApiTokenTableRowHeader.propTypes = {\\n  text: (prop_types_default()).string.isRequired\\n};\\n/* harmony default export */ const api_token_table_row_header = (ApiTokenTableRowHeader);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token-table.jsx\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar ApiTokenTable = function ApiTokenTable() {\\n  var _React$useContext = external_react_.useContext(api_token_context),\\n      api_tokens = _React$useContext.api_tokens;\\n\\n  var formatTokenScopes = function formatTokenScopes(str) {\\n    var string = str || '';\\n    var replace_filter = string.replace(/-|_/g, ' ');\\n    var sentenced_case = replace_filter[0].toUpperCase() + replace_filter.slice(1).toLowerCase();\\n    return sentenced_case;\\n  };\\n\\n  var getScopeValue = function getScopeValue(token) {\\n    var titled_scopes = token.scopes.map(function (scope) {\\n      return formatTokenScopes(scope);\\n    });\\n    var mapped_scopes = titled_scopes.length === 5 ? (0,translations_.localize)('All') : titled_scopes.join(', ');\\n    var date_format = token.last_used ? (0,shared_.formatDate)(token.last_used, 'DD/MM/YYYY') : (0,translations_.localize)('Never');\\n    return {\\n      display_name: token.display_name,\\n      scopes: mapped_scopes,\\n      last_used: date_format,\\n      token: token.token\\n    };\\n  };\\n\\n  if ((0,shared_.isMobile)()) {\\n    return api_tokens.map(function (token_data) {\\n      var token = getScopeValue(token_data);\\n      return /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n        key: token.token,\\n        className: \\\"da-api-token__scope\\\"\\n      }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n        className: \\\"da-api-token__scope-item\\\"\\n      }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"h5\\\",\\n        size: \\\"xxs\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"xs\\\",\\n        weight: \\\"bold\\\"\\n      }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"Name\\\"\\n      })), /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        className: \\\"da-api-token__scope-item--name\\\",\\n        as: \\\"p\\\",\\n        size: \\\"s\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"m\\\"\\n      }, token.display_name))), /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n        className: \\\"da-api-token__scope-item\\\"\\n      }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"h5\\\",\\n        size: \\\"xxs\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"xs\\\",\\n        weight: \\\"bold\\\"\\n      }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"Token\\\"\\n      })), /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n        className: \\\"da-api-token__clipboard-wrapper\\\"\\n      }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        size: \\\"xs\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"m\\\"\\n      }, token.token), /*#__PURE__*/external_react_.createElement(components_.Clipboard, {\\n        className: \\\"da-api-token__clipboard\\\",\\n        popover_props: {\\n          relative_render: false,\\n          zIndex: 9999\\n        },\\n        text_copy: token.token\\n      }))), /*#__PURE__*/external_react_.createElement(\\\"div\\\", null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"h5\\\",\\n        size: \\\"xxs\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"xs\\\",\\n        weight: \\\"bold\\\"\\n      }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"Last Used\\\"\\n      })), /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"p\\\",\\n        size: \\\"s\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"m\\\"\\n      }, token.last_used))), /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n        className: \\\"da-api-token__scope-item\\\"\\n      }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"h5\\\",\\n        size: \\\"xxs\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"xs\\\",\\n        weight: \\\"bold\\\"\\n      }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"Scope\\\"\\n      })), /*#__PURE__*/external_react_.createElement(components_.Text, {\\n        as: \\\"p\\\",\\n        size: \\\"s\\\",\\n        color: \\\"general\\\",\\n        line_height: \\\"m\\\"\\n      }, token.scopes)), /*#__PURE__*/external_react_.createElement(\\\"div\\\", null, /*#__PURE__*/external_react_.createElement(api_token_delete_buttons, {\\n        token: token\\n      }))));\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_.createElement(\\\"table\\\", {\\n    className: \\\"da-api-token__table\\\"\\n  }, /*#__PURE__*/external_react_.createElement(\\\"thead\\\", null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", {\\n    className: \\\"da-api-token__table-header-row\\\"\\n  }, /*#__PURE__*/external_react_.createElement(api_token_table_row_header, {\\n    text: (0,translations_.localize)('Name')\\n  }), /*#__PURE__*/external_react_.createElement(api_token_table_row_header, {\\n    text: (0,translations_.localize)('Token')\\n  }), /*#__PURE__*/external_react_.createElement(api_token_table_row_header, {\\n    text: (0,translations_.localize)('Scopes')\\n  }), /*#__PURE__*/external_react_.createElement(api_token_table_row_header, {\\n    text: (0,translations_.localize)('Last used')\\n  }), /*#__PURE__*/external_react_.createElement(api_token_table_row_header, {\\n    text: (0,translations_.localize)('Action')\\n  }))), /*#__PURE__*/external_react_.createElement(\\\"tbody\\\", null, api_tokens.map(function (api_token) {\\n    return /*#__PURE__*/external_react_.createElement(api_token_table_row, {\\n      key: api_token.token,\\n      token: getScopeValue(api_token)\\n    });\\n  })));\\n};\\n\\n/* harmony default export */ const api_token_table = (ApiTokenTable);\\n;// CONCATENATED MODULE: ./Components/api-token/api-token.jsx\\nfunction api_token_extends() { api_token_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return api_token_extends.apply(this, arguments); }\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { api_token_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction api_token_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction api_token_slicedToArray(arr, i) { return api_token_arrayWithHoles(arr) || api_token_iterableToArrayLimit(arr, i) || api_token_unsupportedIterableToArray(arr, i) || api_token_nonIterableRest(); }\\n\\nfunction api_token_nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction api_token_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return api_token_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return api_token_arrayLikeToArray(o, minLen); }\\n\\nfunction api_token_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction api_token_iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\"undefined\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction api_token_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar MIN_TOKEN = 2;\\nvar MAX_TOKEN = 32;\\n\\nvar ApiToken = function ApiToken(_ref) {\\n  var footer_ref = _ref.footer_ref,\\n      is_app_settings = _ref.is_app_settings,\\n      is_switching = _ref.is_switching,\\n      overlay_ref = _ref.overlay_ref,\\n      setIsOverlayShown = _ref.setIsOverlayShown,\\n      ws = _ref.ws;\\n  var isMounted = (0,shared_.useIsMounted)();\\n  var prev_is_switching = external_react_.useRef(is_switching);\\n\\n  var _React$useReducer = external_react_.useReducer(function (prev_state, value) {\\n    return _objectSpread(_objectSpread({}, prev_state), value);\\n  }, {\\n    api_tokens: [],\\n    is_loading: true,\\n    is_success: false,\\n    is_overlay_shown: false,\\n    error_message: '',\\n    show_delete: false,\\n    dispose_token: '',\\n    is_delete_loading: false,\\n    is_delete_success: false\\n  }),\\n      _React$useReducer2 = api_token_slicedToArray(_React$useReducer, 2),\\n      state = _React$useReducer2[0],\\n      setState = _React$useReducer2[1];\\n\\n  external_react_.useEffect(function () {\\n    getApiTokens();\\n    return function () {\\n      return setState({\\n        dispose_token: ''\\n      });\\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);\\n  external_react_.useEffect(function () {\\n    if (prev_is_switching.current !== is_switching) {\\n      prev_is_switching.current = is_switching;\\n      getApiTokens();\\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\\n\\n  }, [is_switching]);\\n  external_react_.useEffect(function () {\\n    if (typeof setIsOverlayShown === 'function') {\\n      setIsOverlayShown(state.is_overlay_shown);\\n    }\\n  }, [state.is_overlay_shown, setIsOverlayShown]);\\n  var initial_form = {\\n    token_name: '',\\n    read: false,\\n    trade: false,\\n    payments: false,\\n    admin: false,\\n    trading_information: false\\n  };\\n\\n  var toggleOverlay = function toggleOverlay() {\\n    return setState({\\n      is_overlay_shown: !state.is_overlay_shown\\n    });\\n  };\\n\\n  var validateFields = function validateFields(values) {\\n    var errors = {};\\n    var token_name = values.token_name && values.token_name.trim();\\n\\n    if (!token_name) {\\n      errors.token_name = (0,translations_.localize)('Please enter a token name.');\\n    } else if (!/^[A-Za-z0-9\\\\s_]+$/g.test(token_name)) {\\n      errors.token_name = (0,translations_.localize)('Only letters, numbers, and underscores are allowed.');\\n    } else if (token_name.length < MIN_TOKEN) {\\n      errors.token_name = (0,translations_.localize)('Length of token name must be between {{MIN_TOKEN}} and {{MAX_TOKEN}} characters.', {\\n        MIN_TOKEN: MIN_TOKEN,\\n        MAX_TOKEN: MAX_TOKEN\\n      });\\n    } else if (token_name.length > MAX_TOKEN) {\\n      errors.token_name = (0,translations_.localize)('Maximum {{MAX_TOKEN}} characters.', {\\n        MAX_TOKEN: MAX_TOKEN\\n      });\\n    }\\n\\n    return errors;\\n  };\\n\\n  var selectedTokenScope = function selectedTokenScope(values) {\\n    return Object.keys(values).filter(function (item) {\\n      return item !== 'token_name' && values[item];\\n    });\\n  };\\n\\n  var handleSubmit = /*#__PURE__*/function () {\\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(values, _ref2) {\\n      var setSubmitting, setFieldError, resetForm, token_response;\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              setSubmitting = _ref2.setSubmitting, setFieldError = _ref2.setFieldError, resetForm = _ref2.resetForm;\\n              _context.next = 3;\\n              return ws.apiToken({\\n                api_token: 1,\\n                new_token: values.token_name,\\n                new_token_scopes: selectedTokenScope(values)\\n              });\\n\\n            case 3:\\n              token_response = _context.sent;\\n\\n              if (token_response.error) {\\n                setFieldError('token_name', token_response.error.message);\\n              } else if (isMounted()) {\\n                setState({\\n                  is_success: true,\\n                  api_tokens: (0,shared_.getPropertyValue)(token_response, ['api_token', 'tokens'])\\n                });\\n                setTimeout(function () {\\n                  if (isMounted()) setState({\\n                    is_success: false\\n                  });\\n                }, 500);\\n              }\\n\\n              resetForm();\\n              setSubmitting(false);\\n\\n            case 7:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    }));\\n\\n    return function handleSubmit(_x, _x2) {\\n      return _ref3.apply(this, arguments);\\n    };\\n  }();\\n\\n  var populateTokenResponse = function populateTokenResponse(response) {\\n    if (!isMounted()) return;\\n\\n    if (response.error) {\\n      setState({\\n        is_loading: false,\\n        error_message: (0,shared_.getPropertyValue)(response, ['error', 'message'])\\n      });\\n    } else {\\n      setState({\\n        is_loading: false,\\n        api_tokens: (0,shared_.getPropertyValue)(response, ['api_token', 'tokens'])\\n      });\\n    }\\n  };\\n\\n  var getApiTokens = /*#__PURE__*/function () {\\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n      var token_response;\\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n        while (1) {\\n          switch (_context2.prev = _context2.next) {\\n            case 0:\\n              setState({\\n                is_loading: true\\n              });\\n              _context2.next = 3;\\n              return ws.authorized.apiToken({\\n                api_token: 1\\n              });\\n\\n            case 3:\\n              token_response = _context2.sent;\\n              populateTokenResponse(token_response);\\n\\n            case 5:\\n            case \\\"end\\\":\\n              return _context2.stop();\\n          }\\n        }\\n      }, _callee2);\\n    }));\\n\\n    return function getApiTokens() {\\n      return _ref4.apply(this, arguments);\\n    };\\n  }();\\n\\n  var deleteToken = /*#__PURE__*/function () {\\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(token) {\\n      var token_response;\\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n        while (1) {\\n          switch (_context3.prev = _context3.next) {\\n            case 0:\\n              setState({\\n                is_delete_loading: true\\n              });\\n              _context3.next = 3;\\n              return ws.authorized.apiToken({\\n                api_token: 1,\\n                delete_token: token\\n              });\\n\\n            case 3:\\n              token_response = _context3.sent;\\n              populateTokenResponse(token_response);\\n              if (isMounted()) setState({\\n                is_delete_loading: false,\\n                is_delete_success: true\\n              });\\n              setTimeout(function () {\\n                if (isMounted) setState({\\n                  is_delete_success: false\\n                });\\n              }, 500);\\n\\n            case 7:\\n            case \\\"end\\\":\\n              return _context3.stop();\\n          }\\n        }\\n      }, _callee3);\\n    }));\\n\\n    return function deleteToken(_x3) {\\n      return _ref5.apply(this, arguments);\\n    };\\n  }();\\n\\n  var api_tokens = state.api_tokens,\\n      is_loading = state.is_loading,\\n      is_success = state.is_success,\\n      error_message = state.error_message,\\n      is_overlay_shown = state.is_overlay_shown;\\n\\n  if (is_loading || is_switching) {\\n    return /*#__PURE__*/external_react_.createElement(components_.Loading, {\\n      is_fullscreen: false,\\n      className: \\\"account__initial-loader\\\"\\n    });\\n  }\\n\\n  if (error_message) {\\n    return /*#__PURE__*/external_react_.createElement(load_error_message.default, {\\n      error_message: error_message\\n    });\\n  }\\n\\n  var context_value = {\\n    api_tokens: api_tokens,\\n    toggleOverlay: toggleOverlay,\\n    deleteToken: deleteToken,\\n    footer_ref: footer_ref,\\n    overlay_ref: overlay_ref\\n  };\\n  return /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(api_token_context.Provider, {\\n    value: context_value\\n  }, /*#__PURE__*/external_react_.createElement(\\\"section\\\", {\\n    className: classnames_default()('da-api-token', {\\n      'da-api-token--app-settings': is_app_settings\\n    })\\n  }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-api-token__wrapper\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.ThemedScrollbars, {\\n    className: \\\"da-api-token__scrollbars\\\",\\n    is_bypassed: (0,shared_.isMobile)()\\n  }, !is_app_settings && (0,shared_.isMobile)() && /*#__PURE__*/external_react_.createElement(api_token_article, null), /*#__PURE__*/external_react_.createElement(Formik, {\\n    initialValues: initial_form,\\n    onSubmit: handleSubmit,\\n    validate: validateFields\\n  }, function (_ref6) {\\n    var values = _ref6.values,\\n        errors = _ref6.errors,\\n        isValid = _ref6.isValid,\\n        dirty = _ref6.dirty,\\n        touched = _ref6.touched,\\n        handleChange = _ref6.handleChange,\\n        handleBlur = _ref6.handleBlur,\\n        isSubmitting = _ref6.isSubmitting,\\n        setFieldValue = _ref6.setFieldValue;\\n    return /*#__PURE__*/external_react_.createElement(Form, {\\n      noValidate: true\\n    }, /*#__PURE__*/external_react_.createElement(components_.Timeline, {\\n      className: \\\"da-api-token__timeline\\\"\\n    }, /*#__PURE__*/external_react_.createElement(components_.Timeline.Item, {\\n      item_title: (0,translations_.localize)('Select scopes based on the access you need.')\\n    }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n      className: \\\"da-api-token__checkbox-wrapper\\\"\\n    }, /*#__PURE__*/external_react_.createElement(api_token_card, {\\n      name: \\\"read\\\",\\n      value: values.read,\\n      setFieldValue: setFieldValue,\\n      display_name: (0,translations_.localize)('Read'),\\n      description: (0,translations_.localize)('View account activity such as settings, limits, balance sheets, trade purchase history, and more.')\\n    }), /*#__PURE__*/external_react_.createElement(api_token_card, {\\n      name: \\\"trade\\\",\\n      value: values.trade,\\n      display_name: (0,translations_.localize)('Trade'),\\n      setFieldValue: setFieldValue,\\n      description: (0,translations_.localize)('Buy and sell contracts, renew expired purchases, and top up demo accounts.')\\n    }), /*#__PURE__*/external_react_.createElement(api_token_card, {\\n      name: \\\"payments\\\",\\n      value: values.payments,\\n      display_name: (0,translations_.localize)('Payments'),\\n      setFieldValue: setFieldValue,\\n      description: (0,translations_.localize)('Withdraw to payment agents, and transfer funds between accounts.')\\n    }), /*#__PURE__*/external_react_.createElement(api_token_card, {\\n      name: \\\"admin\\\",\\n      value: values.admin,\\n      display_name: (0,translations_.localize)('Admin'),\\n      setFieldValue: setFieldValue,\\n      description: (0,translations_.localize)('Open accounts, manage settings, manage token usage, and more.')\\n    }), /*#__PURE__*/external_react_.createElement(api_token_card, {\\n      name: \\\"trading_information\\\",\\n      value: values.trading_information,\\n      display_name: (0,translations_.localize)('Trading information'),\\n      setFieldValue: setFieldValue,\\n      description: (0,translations_.localize)('View the trading history.')\\n    }))), /*#__PURE__*/external_react_.createElement(components_.Timeline.Item, {\\n      item_title: (0,translations_.localize)(\\\"Name your token and click on 'Create' to generate your token.\\\")\\n    }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n      className: \\\"da-api-token__input-group\\\"\\n    }, /*#__PURE__*/external_react_.createElement(Field, {\\n      name: \\\"token_name\\\"\\n    }, function (_ref7) {\\n      var field = _ref7.field;\\n      return /*#__PURE__*/external_react_.createElement(components_.Input, api_token_extends({}, field, {\\n        \\\"data-lpignore\\\": \\\"true\\\",\\n        type: \\\"text\\\",\\n        className: \\\"da-api-token__input\\\",\\n        label: (0,translations_.localize)('Token name'),\\n        value: values.token_name,\\n        onChange: handleChange,\\n        onBlur: handleBlur,\\n        hint: (0,translations_.localize)('Length of token name must be between 2 and 32 characters.'),\\n        required: true,\\n        error: touched.token_name && errors.token_name\\n      }));\\n    }), /*#__PURE__*/external_react_.createElement(components_.Button, {\\n      className: classnames_default()('da-api-token__button', {\\n        'da-api-token__button--success': is_success\\n      }),\\n      type: \\\"submit\\\",\\n      is_disabled: !dirty || isSubmitting || !isValid || !selectedTokenScope(values).length,\\n      has_effect: true,\\n      is_loading: isSubmitting,\\n      is_submit_success: is_success,\\n      text: (0,translations_.localize)('Create'),\\n      primary: true,\\n      large: true\\n    }))), /*#__PURE__*/external_react_.createElement(components_.Timeline.Item, {\\n      item_title: (0,translations_.localize)('Copy and paste the token into the app.')\\n    }, /*#__PURE__*/external_react_.createElement(api_token_table, null))));\\n  })), !is_app_settings && (0,shared_.isDesktop)() && /*#__PURE__*/external_react_.createElement(api_token_article, {\\n    title: (0,translations_.localize)('API token'),\\n    descriptions: [/*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n      key: 0,\\n      i18n_default_text: \\\"To access our mobile apps and other third-party apps, you'll first need to generate an API token.\\\"\\n    })]\\n  }))), footer_ref && /*#__PURE__*/external_react_.createElement(api_token_footer, null), overlay_ref && is_overlay_shown && /*#__PURE__*/external_react_.createElement(api_token_overlay, null)));\\n};\\n\\nApiToken.propTypes = {\\n  footer_ref: prop_types_default().shape({\\n    current: (prop_types_default()).any\\n  }),\\n  is_app_settings: (prop_types_default()).bool,\\n  is_switching: (prop_types_default()).bool,\\n  overlay_ref: prop_types_default().shape({\\n    current: (prop_types_default()).any\\n  }),\\n  setIsOverlayShown: (prop_types_default()).func,\\n  ws: (prop_types_default()).any.isRequired\\n};\\n/* harmony default export */ const api_token = (ApiToken);\\n;// CONCATENATED MODULE: ./Components/api-token/index.js\\n\\n\\n/* harmony default export */ const Components_api_token = (api_token);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Components/api-token/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/icon-message-content/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_icon_message_content)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n;// CONCATENATED MODULE: ./Components/icon-message-content/icon-message-content.jsx\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\nvar IconMessageContent = function IconMessageContent(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      full_width = _ref.full_width,\\n      icon = _ref.icon,\\n      icon_row = _ref.icon_row,\\n      message = _ref.message,\\n      text = _ref.text;\\n  return /*#__PURE__*/external_react_default().createElement(components_.Div100vhContainer, {\\n    className: classnames_default()('account-management__message-wrapper', {\\n      'account-management__message-wrapper-full-width': full_width\\n    }),\\n    is_disabled: (0,shared_.isDesktop)(),\\n    height_offset: \\\"110px\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-management__message-content', _defineProperty({}, \\\"\\\".concat(className, \\\"__message-content\\\"), className))\\n  }, icon && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-management__message-icon', _defineProperty({}, \\\"\\\".concat(className, \\\"__message-icon\\\"), className))\\n  }, icon), icon_row && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", null, icon_row), /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"div\\\",\\n    color: \\\"general\\\",\\n    weight: \\\"bold\\\",\\n    size: \\\"s\\\",\\n    align: \\\"center\\\",\\n    className: classnames_default()('account-management__message', _defineProperty({}, \\\"\\\".concat(className, \\\"__message\\\"), className))\\n  }, message), text && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-management__text-container\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    className: classnames_default()(_defineProperty({}, \\\"\\\".concat(className, \\\"__text\\\"), className)),\\n    as: \\\"p\\\",\\n    size: \\\"xs\\\",\\n    align: \\\"center\\\"\\n  }, text)), children));\\n};\\n\\nIconMessageContent.propTypes = {\\n  children: prop_types.PropTypes.oneOfType([prop_types.PropTypes.object, prop_types.PropTypes.array]),\\n  className: prop_types.PropTypes.string,\\n  full_width: prop_types.PropTypes.bool,\\n  icon: prop_types.PropTypes.object,\\n  message: prop_types.PropTypes.oneOfType([prop_types.PropTypes.node, prop_types.PropTypes.string, prop_types.PropTypes.object]),\\n  text: prop_types.PropTypes.string\\n};\\n/* harmony default export */ const icon_message_content = (IconMessageContent);\\n;// CONCATENATED MODULE: ./Components/icon-message-content/index.js\\n\\n/* harmony default export */ const Components_icon_message_content = (icon_message_content);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2ljb24tbWVzc2FnZS1jb250ZW50L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi9Db21wb25lbnRzL2ljb24tbWVzc2FnZS1jb250ZW50L2ljb24tbWVzc2FnZS1jb250ZW50LmpzeD82ODc5Iiwid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9pY29uLW1lc3NhZ2UtY29udGVudC9pbmRleC5qcz9hY2M0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQcm9wVHlwZXMgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgRGl2MTAwdmhDb250YWluZXIsIFRleHQgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5pbXBvcnQgeyBpc0Rlc2t0b3AgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcblxuY29uc3QgSWNvbk1lc3NhZ2VDb250ZW50ID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgZnVsbF93aWR0aCwgaWNvbiwgaWNvbl9yb3csIG1lc3NhZ2UsIHRleHQgfSkgPT4gKFxuICAgIDxEaXYxMDB2aENvbnRhaW5lclxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2FjY291bnQtbWFuYWdlbWVudF9fbWVzc2FnZS13cmFwcGVyJywge1xuICAgICAgICAgICAgJ2FjY291bnQtbWFuYWdlbWVudF9fbWVzc2FnZS13cmFwcGVyLWZ1bGwtd2lkdGgnOiBmdWxsX3dpZHRoLFxuICAgICAgICB9KX1cbiAgICAgICAgaXNfZGlzYWJsZWQ9e2lzRGVza3RvcCgpfVxuICAgICAgICBoZWlnaHRfb2Zmc2V0PScxMTBweCdcbiAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnYWNjb3VudC1tYW5hZ2VtZW50X19tZXNzYWdlLWNvbnRlbnQnLCB7XG4gICAgICAgICAgICAgICAgW2Ake2NsYXNzTmFtZX1fX21lc3NhZ2UtY29udGVudGBdOiBjbGFzc05hbWUsXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgICAge2ljb24gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdhY2NvdW50LW1hbmFnZW1lbnRfX21lc3NhZ2UtaWNvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtgJHtjbGFzc05hbWV9X19tZXNzYWdlLWljb25gXTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtpY29ufVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtpY29uX3JvdyAmJiA8ZGl2PntpY29uX3Jvd308L2Rpdj59XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGFzPSdkaXYnXG4gICAgICAgICAgICAgICAgY29sb3I9J2dlbmVyYWwnXG4gICAgICAgICAgICAgICAgd2VpZ2h0PSdib2xkJ1xuICAgICAgICAgICAgICAgIHNpemU9J3MnXG4gICAgICAgICAgICAgICAgYWxpZ249J2NlbnRlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2FjY291bnQtbWFuYWdlbWVudF9fbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgW2Ake2NsYXNzTmFtZX1fX21lc3NhZ2VgXTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHttZXNzYWdlfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAge3RleHQgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhY2NvdW50LW1hbmFnZW1lbnRfX3RleHQtY29udGFpbmVyJz5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Ake2NsYXNzTmFtZX1fX3RleHRgXTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcz0ncCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9J3hzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ249J2NlbnRlcidcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RleHR9XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgIDwvRGl2MTAwdmhDb250YWluZXI+XG4pO1xuXG5JY29uTWVzc2FnZUNvbnRlbnQucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYXJyYXldKSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZnVsbF93aWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaWNvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuZXhwb3J0IGRlZmF1bHQgSWNvbk1lc3NhZ2VDb250ZW50O1xuIiwiaW1wb3J0IEljb25NZXNzYWdlQ29udGVudCBmcm9tICcuL2ljb24tbWVzc2FnZS1jb250ZW50LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IEljb25NZXNzYWdlQ29udGVudDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUxBO0FBUUE7QUFEQTtBQU9BO0FBREE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQWFBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQU5BO0FBckNBO0FBQ0E7QUFxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQVFBOztBQ3BFQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/icon-message-content/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/load-error-message/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* reexport */ load_error_message)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: ./Components/icon-message-content/index.js + 1 modules\\nvar icon_message_content = __webpack_require__(\\\"./Components/icon-message-content/index.js\\\");\\n;// CONCATENATED MODULE: ./Components/load-error-message/load-error-message.jsx\\n\\n\\n // TODO: Needs UI\\n\\nvar LoadErrorMessage = function LoadErrorMessage(_ref) {\\n  var error_message = _ref.error_message;\\n  return /*#__PURE__*/external_react_default().createElement(icon_message_content.default, {\\n    message: error_message,\\n    icon: /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n      icon: \\\"IcPoaLock\\\",\\n      size: 128\\n    })\\n  });\\n};\\n\\n/* harmony default export */ const load_error_message = (LoadErrorMessage);\\n;// CONCATENATED MODULE: ./Components/load-error-message/index.js\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2xvYWQtZXJyb3ItbWVzc2FnZS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9sb2FkLWVycm9yLW1lc3NhZ2UvbG9hZC1lcnJvci1tZXNzYWdlLmpzeD9iMDMwIiwid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9sb2FkLWVycm9yLW1lc3NhZ2UvaW5kZXguanM/NDZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCBJY29uTWVzc2FnZUNvbnRlbnQgZnJvbSAnQ29tcG9uZW50cy9pY29uLW1lc3NhZ2UtY29udGVudCc7XG5cbi8vIFRPRE86IE5lZWRzIFVJXG5jb25zdCBMb2FkRXJyb3JNZXNzYWdlID0gKHsgZXJyb3JfbWVzc2FnZSB9KSA9PiAoXG4gICAgPEljb25NZXNzYWdlQ29udGVudCBtZXNzYWdlPXtlcnJvcl9tZXNzYWdlfSBpY29uPXs8SWNvbiBpY29uPSdJY1BvYUxvY2snIHNpemU9ezEyOH0gLz59IC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkRXJyb3JNZXNzYWdlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9sb2FkLWVycm9yLW1lc3NhZ2UuanN4JztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQURBO0FBQ0E7QUFHQTs7QUNUQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./Components/load-error-message/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n  Copyright (c) 2017 Jed Watson.\\n  Licensed under the MIT License (MIT), see\\n  http://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\n\\tfunction classNames () {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg) && arg.length) {\\n\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcz8zZGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQSxVQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/formik/node_modules/react-fast-compare/index.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"\\n\\nvar isArray = Array.isArray;\\nvar keyList = Object.keys;\\nvar hasProp = Object.prototype.hasOwnProperty;\\nvar hasElementType = typeof Element !== 'undefined';\\n\\nfunction equal(a, b) {\\n  // fast-deep-equal index.js 2.0.1\\n  if (a === b) return true;\\n\\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\\n    var arrA = isArray(a)\\n      , arrB = isArray(b)\\n      , i\\n      , length\\n      , key;\\n\\n    if (arrA && arrB) {\\n      length = a.length;\\n      if (length != b.length) return false;\\n      for (i = length; i-- !== 0;)\\n        if (!equal(a[i], b[i])) return false;\\n      return true;\\n    }\\n\\n    if (arrA != arrB) return false;\\n\\n    var dateA = a instanceof Date\\n      , dateB = b instanceof Date;\\n    if (dateA != dateB) return false;\\n    if (dateA && dateB) return a.getTime() == b.getTime();\\n\\n    var regexpA = a instanceof RegExp\\n      , regexpB = b instanceof RegExp;\\n    if (regexpA != regexpB) return false;\\n    if (regexpA && regexpB) return a.toString() == b.toString();\\n\\n    var keys = keyList(a);\\n    length = keys.length;\\n\\n    if (length !== keyList(b).length)\\n      return false;\\n\\n    for (i = length; i-- !== 0;)\\n      if (!hasProp.call(b, keys[i])) return false;\\n    // end fast-deep-equal\\n\\n    // start react-fast-compare\\n    // custom handling for DOM elements\\n    if (hasElementType && a instanceof Element && b instanceof Element)\\n      return a === b;\\n\\n    // custom handling for React\\n    for (i = length; i-- !== 0;) {\\n      key = keys[i];\\n      if (key === '_owner' && a.$$typeof) {\\n        // React-specific: avoid traversing React elements' _owner.\\n        //  _owner contains circular references\\n        // and is not needed when comparing the actual elements (and not their owners)\\n        // .$$typeof and ._store on just reasonable markers of a react element\\n        continue;\\n      } else {\\n        // all other properties should be traversed as usual\\n        if (!equal(a[key], b[key])) return false;\\n      }\\n    }\\n    // end react-fast-compare\\n\\n    // fast-deep-equal index.js 2.0.1\\n    return true;\\n  }\\n\\n  return a !== a && b !== b;\\n}\\n// end fast-deep-equal\\n\\nmodule.exports = function exportedEqual(a, b) {\\n  try {\\n    return equal(a, b);\\n  } catch (error) {\\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\\n      // warn on circular references, don't crash\\n      // browsers give this different errors name and messages:\\n      // chrome/safari: \\\"RangeError\\\", \\\"Maximum call stack size exceeded\\\"\\n      // firefox: \\\"InternalError\\\", too much recursion\\\"\\n      // edge: \\\"Error\\\", \\\"Out of stack space\\\"\\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\\n      return false;\\n    }\\n    // some other error. we should definitely know about these\\n    throw error;\\n  }\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zvcm1pay9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zvcm1pay9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzP2VkNTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG4gICAgLy8gc3RhcnQgcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgYiBpbnN0YW5jZW9mIEVsZW1lbnQpXG4gICAgICByZXR1cm4gYSA9PT0gYjtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5kIHJlYWN0LWZhc3QtY29tcGFyZVxuXG4gICAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydGVkRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB8fCAoZXJyb3IubnVtYmVyID09PSAtMjE0NjgyODI2MCkpIHtcbiAgICAgIC8vIHdhcm4gb24gY2lyY3VsYXIgcmVmZXJlbmNlcywgZG9uJ3QgY3Jhc2hcbiAgICAgIC8vIGJyb3dzZXJzIGdpdmUgdGhpcyBkaWZmZXJlbnQgZXJyb3JzIG5hbWUgYW5kIG1lc3NhZ2VzOlxuICAgICAgLy8gY2hyb21lL3NhZmFyaTogXCJSYW5nZUVycm9yXCIsIFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIlxuICAgICAgLy8gZmlyZWZveDogXCJJbnRlcm5hbEVycm9yXCIsIHRvbyBtdWNoIHJlY3Vyc2lvblwiXG4gICAgICAvLyBlZGdlOiBcIkVycm9yXCIsIFwiT3V0IG9mIHN0YWNrIHNwYWNlXCJcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogcmVhY3QtZmFzdC1jb21wYXJlIGRvZXMgbm90IGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLicsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/formik/node_modules/react-fast-compare/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nvar reactIs = __webpack_require__(\\\"../../../node_modules/react-is/index.js\\\");\\n\\n/**\\n * Copyright 2015, Yahoo! Inc.\\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\\n */\\nvar REACT_STATICS = {\\n  childContextTypes: true,\\n  contextType: true,\\n  contextTypes: true,\\n  defaultProps: true,\\n  displayName: true,\\n  getDefaultProps: true,\\n  getDerivedStateFromError: true,\\n  getDerivedStateFromProps: true,\\n  mixins: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar KNOWN_STATICS = {\\n  name: true,\\n  length: true,\\n  prototype: true,\\n  caller: true,\\n  callee: true,\\n  arguments: true,\\n  arity: true\\n};\\nvar FORWARD_REF_STATICS = {\\n  '$$typeof': true,\\n  render: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true\\n};\\nvar MEMO_STATICS = {\\n  '$$typeof': true,\\n  compare: true,\\n  defaultProps: true,\\n  displayName: true,\\n  propTypes: true,\\n  type: true\\n};\\nvar TYPE_STATICS = {};\\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\\n\\nfunction getStatics(component) {\\n  // React v16.11 and below\\n  if (reactIs.isMemo(component)) {\\n    return MEMO_STATICS;\\n  } // React v16.12 and above\\n\\n\\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\\n}\\n\\nvar defineProperty = Object.defineProperty;\\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\\nvar getPrototypeOf = Object.getPrototypeOf;\\nvar objectPrototype = Object.prototype;\\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\\n  if (typeof sourceComponent !== 'string') {\\n    // don't hoist over string (html) components\\n    if (objectPrototype) {\\n      var inheritedComponent = getPrototypeOf(sourceComponent);\\n\\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\\n      }\\n    }\\n\\n    var keys = getOwnPropertyNames(sourceComponent);\\n\\n    if (getOwnPropertySymbols) {\\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\\n    }\\n\\n    var targetStatics = getStatics(targetComponent);\\n    var sourceStatics = getStatics(sourceComponent);\\n\\n    for (var i = 0; i < keys.length; ++i) {\\n      var key = keys[i];\\n\\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\\n\\n        try {\\n          // Avoid failures from read-only properties\\n          defineProperty(targetComponent, key, descriptor);\\n        } catch (e) {}\\n      }\\n    }\\n  }\\n\\n  return targetComponent;\\n}\\n\\nmodule.exports = hoistNonReactStatics;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzPzkwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz83MGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzP2FkODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/cjs/react-is.production.min.js\":\n/***/ ((__unused_webpack_module, exports) => {\n\n\"use strict\";\neval(\"/** @license React v16.13.1\\n * react-is.production.min.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nvar b=\\\"function\\\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\\\"react.element\\\"):60103,d=b?Symbol.for(\\\"react.portal\\\"):60106,e=b?Symbol.for(\\\"react.fragment\\\"):60107,f=b?Symbol.for(\\\"react.strict_mode\\\"):60108,g=b?Symbol.for(\\\"react.profiler\\\"):60114,h=b?Symbol.for(\\\"react.provider\\\"):60109,k=b?Symbol.for(\\\"react.context\\\"):60110,l=b?Symbol.for(\\\"react.async_mode\\\"):60111,m=b?Symbol.for(\\\"react.concurrent_mode\\\"):60111,n=b?Symbol.for(\\\"react.forward_ref\\\"):60112,p=b?Symbol.for(\\\"react.suspense\\\"):60113,q=b?\\nSymbol.for(\\\"react.suspense_list\\\"):60120,r=b?Symbol.for(\\\"react.memo\\\"):60115,t=b?Symbol.for(\\\"react.lazy\\\"):60116,v=b?Symbol.for(\\\"react.block\\\"):60121,w=b?Symbol.for(\\\"react.fundamental\\\"):60117,x=b?Symbol.for(\\\"react.responder\\\"):60118,y=b?Symbol.for(\\\"react.scope\\\"):60119;\\nfunction z(a){if(\\\"object\\\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\\\"object\\\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\\nexports.isValidElementType=function(a){return\\\"string\\\"===typeof a||\\\"function\\\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\\\"object\\\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanM/MGE5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/cjs/react-is.production.min.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/react-is/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n\\nif (true) {\\n  module.exports = __webpack_require__(\\\"../../../node_modules/react-is/cjs/react-is.production.min.js\\\");\\n} else {}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzc2ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FFQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/react-is/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-dom\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_562963__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_562963__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_562963__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_562963__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_562963__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_562963__.o(definition, key) && !__nested_webpack_require_562963__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_562963__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_562963__(\"./Components/api-token/index.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/js/api-token.js\n");

/***/ })

}]);