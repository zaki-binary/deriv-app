/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tooltip {
  text-decoration: none;
  font-size: inherit;
  color: var(--text-prominent); }
  .dc-tooltip:before {
    background: var(--status-default); }
  .dc-tooltip:after, .dc-tooltip[data-tooltip-pos='top']:after {
    border-top-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-default); }
  .dc-tooltip[data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-default); }
  .dc-tooltip__balloon-icon {
    position: absolute;
    top: 0;
    left: -319px;
    z-index: 999;
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none; }
    .dc-tooltip__balloon-icon--show {
      transition: opacity 0.3s 0.2s;
      opacity: 1; }
  .dc-tooltip[data-tooltip] {
    cursor: auto;
    cursor: initial;
    display: block; }
    .dc-tooltip[data-tooltip]:before {
      background: var(--status-default); }
    .dc-tooltip[data-tooltip]:after, .dc-tooltip[data-tooltip][data-tooltip-pos='top']:after {
      border-top-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
      border-top-color: transparent;
      border-right-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
      border-top-color: transparent;
      border-left-color: var(--status-default); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
      border-top-color: transparent;
      border-bottom-color: var(--status-default); }
    .dc-tooltip[data-tooltip]:hover:after, .dc-tooltip[data-tooltip]:hover:before {
      opacity: 0.96;
      pointer-events: auto;
      transform: translate(-50%, 0); }
    .dc-tooltip[data-tooltip]:before, .dc-tooltip[data-tooltip]:after {
      opacity: 0;
      pointer-events: none;
      transition: all 0.18s ease-out 0.18s;
      bottom: 100%;
      left: 50%;
      position: absolute;
      z-index: 1;
      transform: translate(-50%, 1em);
      transform-origin: top; }
    .dc-tooltip[data-tooltip]:before {
      font-size: 1.2rem;
      color: var(--text-colored-background);
      font-weight: 400;
      text-transform: none;
      text-align: left;
      line-height: 1.25;
      line-height: 1.5;
      text-decoration: none;
      letter-spacing: normal;
      border-radius: 4px;
      content: attr(data-tooltip);
      padding: 0.7em;
      margin-bottom: 10px;
      width: -webkit-max-content;
      width: -moz-max-content;
      width: max-content;
      width: 220px;
      max-width: 280px; }
    .dc-tooltip[data-tooltip]:after {
      border: solid transparent;
      content: '';
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
      border-width: 6px;
      margin-bottom: -2px; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='right']:after {
      bottom: auto;
      left: 100%;
      top: 50%;
      transform: translate(-1em, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:before {
      margin-left: 1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='right']:hover:before {
      transform: translate(0, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='left']:after {
      bottom: auto;
      left: auto;
      right: 100%;
      top: 50%;
      transform: translate(1em, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:before {
      margin-right: 1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='left']:hover:before {
      transform: translate(0, -50%); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before, .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:after {
      bottom: auto;
      left: 50%;
      top: 100%;
      transform: translate(-50%, -1em); }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:before {
      margin-top: 1.1em; }
    .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:after, .dc-tooltip[data-tooltip][data-tooltip-pos='bottom']:hover:before {
      transform: translate(-50%, 0); }
  .dc-tooltip--with-label[data-tooltip]:before, .dc-tooltip--with-label[data-tooltip]:after {
    margin-top: 1em; }
  .dc-tooltip--error[data-tooltip]:before {
    background: var(--status-danger); }
  .dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger); }
  .dc-tooltip--error[data-tooltip]:after, .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:after, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%); }
  .dc-tooltip--error[data-tooltip]:before, .dc-tooltip--error[data-tooltip][data-tooltip-pos='left']:before {
    width: 180px; }
  .dc-tooltip--error-secondary[data-tooltip]:before {
    background: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='top']:after {
    border-top-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='right']:after {
    border-top-color: transparent;
    border-right-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after {
    border-top-color: transparent;
    border-left-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='bottom']:after {
    border-top-color: transparent;
    border-bottom-color: var(--status-danger); }
  .dc-tooltip--error-secondary[data-tooltip]:after, .dc-tooltip--error-secondary[data-tooltip]:before, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:after, .dc-tooltip--error-secondary[data-tooltip][data-tooltip-pos='left']:before {
    opacity: 0.96;
    pointer-events: auto;
    transform: translate(0, -50%);
    top: 55%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tick-progress {
  display: grid;
  grid-gap: 0.8rem; }
  .dc-tick-progress__tick {
    border-radius: 50%;
    width: 0.8rem;
    height: 0.8rem;
    background-color: var(--fill-disabled); }
    .dc-tick-progress__tick--on {
      background-color: var(--brand-secondary); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-themed-scrollbars */
.dc-themed-scrollbars {
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
  /* Firefox only */
  scrollbar-color: var(--state-active) var(--general-main-1);
  scrollbar-width: thin; }
  .dc-themed-scrollbars__autohide::-webkit-scrollbar-thumb {
    display: none; }
  .dc-themed-scrollbars__autohide--is-hovered::-webkit-scrollbar-thumb {
    display: unset; }
  .dc-themed-scrollbars--has-horizontal {
    overflow-x: auto; }
  .dc-themed-scrollbars--hidden-scrollbar::-webkit-scrollbar {
    display: none !important; }
  .dc-themed-scrollbars--only-horizontal {
    overflow-y: hidden;
    overflow-x: auto; }
    .dc-themed-scrollbars--only-horizontal-overlay {
      overflow-y: hidden;
      overflow-x: overlay; }
  .dc-themed-scrollbars-wrapper {
    display: flex;
    justify-content: space-between;
    margin-bottom: -3rem;
    padding-bottom: 3rem;
    white-space: nowrap; }
    .dc-themed-scrollbars-wrapper li {
      display: inline-block;
      box-sizing: border-box;
      padding: 0 3rem;
      vertical-align: middle;
      width: unset;
      height: 40px; }
      @media (min-width: 320px) and (max-width: 767px) {
        .dc-themed-scrollbars-wrapper li {
          padding: 0 1.1rem; } }
  .dc-themed-scrollbars::-webkit-scrollbar {
    width: 5px;
    height: 5px;
    background-color: transparent;
    border-radius: 10px; }
  .dc-themed-scrollbars::-webkit-scrollbar-track {
    background-color: transparent; }
  .dc-themed-scrollbars::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: var(--state-active); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-toast; */
.dc-toast {
  width: 100vw;
  transition: transform 0.25s ease, opacity 0.25s linear;
  display: flex;
  justify-content: center;
  align-items: center;
  pointer-events: none; }
  .dc-toast__message {
    max-width: calc(100vw - 3.2rem);
    padding: 0.4rem 0.8rem;
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: center;
    line-height: 1.5;
    color: var(--text-colored-background);
    border-radius: 4px;
    min-height: 34px;
    display: flex;
    align-items: center;
    pointer-events: all; }
  .dc-toast__error .dc-toast__message {
    background-color: var(--status-danger); }
  .dc-toast__info .dc-toast__message {
    background: var(--status-info);
    font-size: 1.2rem;
    /* iPhone SE screen height fixes due to UI space restrictions */ }
    @media only screen and (max-height: 580px) {
      .dc-toast__info .dc-toast__message {
        font-size: 1rem; } }
  .dc-toast--enter, .dc-toast--exit {
    transform: scale(1, 0);
    opacity: 0; }
  .dc-toast--enter-done {
    transform: scale(1, 1);
    opacity: 1; }
  .dc-toast--blinker .dc-toast__message {
    -webkit-animation: toast_blinking 0.4s alternate infinite;
            animation: toast_blinking 0.4s alternate infinite; }
  .dc-toast:not(:first-child) {
    margin-top: 1rem; }

@-webkit-keyframes toast_blinking {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes toast_blinking {
  40% {
    opacity: 1; }
  100% {
    opacity: 0; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-toggle-switch {
  height: 0;
  width: 0;
  visibility: hidden; }
  .dc-toggle-switch__label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    width: 100px;
    height: 50px;
    background: var(--general-disabled);
    border-radius: 100px;
    position: relative;
    transition: background-color 0.25s; }
    .dc-toggle-switch__label:active .dc-toggle-switch__button {
      width: 55%; }
  .dc-toggle-switch__button {
    content: '';
    position: absolute;
    top: 6px;
    left: 8px;
    width: 37%;
    height: 75%;
    border-radius: 50%;
    transition: 0.25s;
    background: var(--text-colored-background); }
  .dc-toggle-switch:checked + .dc-toggle-switch__label {
    background: var(--text-profit-success); }
  .dc-toggle-switch:checked + .dc-toggle-switch__label .dc-toggle-switch__button {
    left: calc(100% - 8px);
    transform: translateX(-100%); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-tick-picker {
  width: 100%;
  max-width: 300px;
  height: 328px;
  background-color: inherit;
  display: flex;
  flex-direction: column;
  justify-content: flex-end; }
  .dc-tick-picker div {
    display: flex; }
  .dc-tick-picker__calculation {
    margin-bottom: 28px;
    justify-content: space-evenly;
    align-items: center; }
    .dc-tick-picker__calculation .dc-tick-picker__holder {
      color: var(--purchase-main-2);
      flex-direction: column;
      justify-content: center;
      text-align: center;
      margin: 0 1.4rem; }
    .dc-tick-picker__calculation .operator {
      background-color: var(--general-section-2);
      width: 48px;
      height: 48px; }
      .dc-tick-picker__calculation .operator .dc-btn__text {
        transform: scale(2); }
  .dc-tick-picker__submit-wrapper {
    margin-bottom: 1.6rem;
    justify-content: center; }
    .dc-tick-picker__submit-wrapper button {
      background-color: var(--general-section-2);
      height: 48px;
      width: 112px; }
      .dc-tick-picker__submit-wrapper button span {
        color: var(--text-prominent);
        font-size: 1.6rem; }
    .dc-tick-picker__submit-wrapper--is-disabled {
      pointer-events: none; }
      .dc-tick-picker__submit-wrapper--is-disabled .dc-btn {
        background-color: var(--general-disabled); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-timeline__flex {
  display: flex;
  border-left: var(--brand-red-coral) solid 1px;
  position: relative; }
  .dc-timeline__flex--no-border {
    border-left: unset; }

.dc-timeline__container {
  margin-top: 4px;
  margin-left: 20px; }

.dc-timeline__title {
  max-width: 500px; }

.dc-timeline__oval {
  width: 24px;
  height: 24px;
  line-height: 2.35rem;
  background-color: var(--brand-red-coral);
  border-radius: 50%;
  text-align: center;
  margin-right: 8px;
  position: absolute;
  padding-left: 1px;
  left: -13px; }

.dc-timeline__content {
  margin: 16px 0;
  color: var(--text-prominent); }
  .dc-timeline__content:last-of-type {
    margin-bottom: 0; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* Loading Spinner */
/** @define block-ui */
.block-ui {
  position: absolute;
  z-index: 3;
  top: 0;
  left: 0.2em;
  right: 0;
  bottom: 0;
  width: calc(100% - 4px);
  height: 100%;
  background: var(--overlay-inside-dialog); }
  .block-ui__loading {
    position: absolute;
    top: calc(50% - 22px);
    left: calc(50% - 16px);
    z-index: 11; }
    .block-ui__loading-spinner {
      position: relative;
      margin: 0 auto;
      width: 4.2em; }
      .block-ui__loading-spinner:before {
        content: '';
        display: block;
        padding-top: 100%; }
      .block-ui__loading-spinner-circular {
        -webkit-animation: rotate 2s linear infinite;
                animation: rotate 2s linear infinite;
        height: 100%;
        transform-origin: center center;
        width: 100%;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        margin: auto; }
      .block-ui__loading-spinner-path {
        stroke-dasharray: 1, 200;
        stroke-dashoffset: 0;
        -webkit-animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
                animation: dash 1.5s ease-in-out infinite, colorRed 6s ease-in-out infinite;
        stroke-linecap: round; }

/* Spinner Loader Animation */
@-webkit-keyframes rotate {
  100% {
    transform: rotate(360deg); } }
@keyframes rotate {
  100% {
    transform: rotate(360deg); } }

@-webkit-keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px; } }

@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px; } }

@-webkit-keyframes colorRed {
  100%,
  0% {
    stroke: var(--brand-red-coral); } }

@keyframes colorRed {
  100%,
  0% {
    stroke: var(--brand-red-coral); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-vertical-tab {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
  border-radius: 4px;
  height: 100%; }
  .dc-vertical-tab:not(.dc-vertical-tab--floating) {
    background-color: var(--general-section-1); }
  .dc-vertical-tab--floating {
    justify-content: center; }
  .dc-vertical-tab--grid {
    display: grid;
    height: calc(100vh - 48px);
    grid-template-areas: 'form-sidebar form-title' 'form-sidebar form-content';
    grid-template-rows: 5.2rem auto; }
  .dc-vertical-tab__title {
    grid-area: form-title;
    height: 5rem;
    border-top: 1px solid var(--general-section-1); }
  .dc-vertical-tab__content-container, .dc-vertical-tab__content-inner {
    position: relative;
    z-index: 0;
    height: 100%;
    width: 100%;
    display: flex; }
  .dc-vertical-tab--full-screen {
    min-height: calc(100vh - 84px);
    width: 100%; }
  .dc-vertical-tab--full-screen.dc-vertical-tab--floating {
    min-height: calc( 100vh - 48px - 36px - 53px - 2.4rem); }
  .dc-vertical-tab:not(.dc-vertical-tab--full-screen):not(.dc-vertical-tab--floating) .dc-vertical-tab__content {
    padding: 2.4rem; }
  .dc-vertical-tab__action-bar {
    width: 100%;
    display: flex;
    flex-flow: row-reverse nowrap;
    justify-content: space-between;
    align-items: center;
    padding: 1.6rem;
    box-sizing: border-box; }
    .dc-vertical-tab__action-bar-wrapper {
      cursor: pointer;
      padding: 0.4rem 0.4rem 0.2rem;
      border-radius: 4px;
      margin-left: auto; }
      .dc-vertical-tab__action-bar-wrapper:hover {
        background: var(--general-hover); }
  .dc-vertical-tab__tab {
    display: flex;
    min-width: 28%;
    height: 100%;
    flex-direction: column;
    border-radius: 4px 0 0 4px;
    background-color: var(--general-section-1);
    position: relative; }
    .dc-vertical-tab__tab--floating {
      min-width: 256px;
      padding: 0.8rem;
      border-radius: 8px; }
      .dc-vertical-tab__tab--floating .dc-vertical-tab__header--highlight {
        width: calc(100% - 1.6rem);
        border-radius: 4px; }
    .dc-vertical-tab__tab-meta-wrapper {
      grid-area: form-sidebar; }
      .dc-vertical-tab__tab-meta-wrapper--floating {
        position: -webkit-sticky;
        position: sticky;
        top: calc(2.4rem + 41px); }
    .dc-vertical-tab__tab-bottom-note {
      position: -webkit-sticky;
      position: sticky;
      margin-top: 1.6rem; }
  .dc-vertical-tab__header-title {
    padding: 1.6rem;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none; }
  .dc-vertical-tab--grouped .dc-vertical-tab__header {
    padding-left: 4.4rem; }
    .dc-vertical-tab--grouped .dc-vertical-tab__header--highlight {
      z-index: -1; }
    .dc-vertical-tab--grouped .dc-vertical-tab__header--active {
      padding-left: 4.8rem; }
  .dc-vertical-tab__header__icon.dc-vertical-tab__header__icon--active {
    margin-right: 2rem; }
  .dc-vertical-tab__header-group-chevron {
    position: absolute;
    right: 2.4rem;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1); }
    .dc-vertical-tab__header-group-chevron--invert {
      transform: rotate(180deg); }
  .dc-vertical-tab__header, .dc-vertical-tab__header-group {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: none;
    text-align: left;
    line-height: 1.5;
    line-height: 1.5;
    color: var(--text-general);
    padding: 1rem 1.2rem 1rem 1.6rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: background-color 0.1s ease-in;
    text-decoration: none;
    z-index: 1;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none; }
    .dc-vertical-tab__header:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active), .dc-vertical-tab__header-group:hover:not(.dc-vertical-tab__header--active):not(.dc-vertical-tab__header-group--active) {
      background-color: var(--state-hover); }
    .dc-vertical-tab__header__link, .dc-vertical-tab__header-group__link {
      font-weight: normal;
      margin-right: 0.4rem; }
    .dc-vertical-tab__header__icon, .dc-vertical-tab__header-group__icon {
      margin-right: 1.6rem; }
      .dc-vertical-tab__header__icon--active, .dc-vertical-tab__header-group__icon--active {
        --fill-color1: var(--text-prominent); }
    .dc-vertical-tab__header__counter, .dc-vertical-tab__header-group__counter {
      margin-left: 1rem; }
    .dc-vertical-tab__header--active .dc-vertical-tab__header__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header__link, .dc-vertical-tab__header--active .dc-vertical-tab__header-group__link, .dc-vertical-tab__header-group--active .dc-vertical-tab__header-group__link {
      color: var(--text-prominent);
      font-weight: bold; }
    .dc-vertical-tab__header--highlight, .dc-vertical-tab__header-group--highlight {
      position: absolute;
      display: block;
      content: '';
      color: var(--text-prominent);
      background-color: var(--state-normal);
      border-left: 4px solid var(--brand-red-coral);
      width: 100%;
      height: 41px;
      transform: translate3d(0, 0, 0);
      z-index: 0; }
    .dc-vertical-tab__header--new, .dc-vertical-tab__header-group--new {
      font-size: 1rem;
      font-weight: bold;
      padding: 0 0.4rem;
      margin: 0 0.4rem;
      background-color: var(--text-loss-danger);
      color: var(--status-colored-background);
      border-radius: 8px; }
    .dc-vertical-tab__header--floating, .dc-vertical-tab__header-group--floating {
      border-radius: 4px; }
  .dc-vertical-tab__content {
    width: 100%;
    height: 100%;
    min-height: inherit;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    border-radius: 0 4px 4px 0;
    position: relative;
    background-color: var(--general-main-1);
    grid-area: form-content; }
    .dc-vertical-tab__content-container {
      flex-flow: column nowrap;
      flex-grow: 1; }
    .dc-vertical-tab__content-side-note {
      max-width: 256px;
      margin-left: 2.4rem; }
      .dc-vertical-tab__content-side-note-item {
        background-color: var(--general-section-1);
        border-radius: 8px;
        padding: 1.6rem 2.4rem;
        color: var(--text-general);
        font-size: var(--text-size-xxs);
        line-height: 1.5;
        margin-bottom: 1rem; }
    .dc-vertical-tab__content.dc-vertical-tab:not(.dc-vertical-tab--full-screen) {
      padding: 2.4rem;
      height: 100%; }
    .dc-vertical-tab__content--floating {
      max-width: 952px;
      min-width: 672px;
      margin-left: 2.4rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-virtual-wallet-card {
  background: var(--wallet-virtual);
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }
  .dc-virtual-wallet-card__actions-container {
    display: flex;
    flex-direction: row;
    height: 4.3rem;
    justify-content: space-between;
    padding-left: 1.6rem;
    width: calc(100% - 18rem); }
  .dc-virtual-wallet-card__action {
    align-items: center;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.25s ease-in-out; }
    .dc-virtual-wallet-card__action--icon {
      border: 0.33px solid var(--general-main-1);
      border-radius: 0.8rem;
      padding: 0.24rem;
      transform: scale(1.6);
      transition: transform 0.25s ease-in-out; }
    .dc-virtual-wallet-card__action--text {
      display: flex;
      padding-top: 0.4rem;
      transform: scale(1);
      transition: transform 0.25s ease-in-out; }
  .dc-virtual-wallet-card__content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 0 1.6rem; }
    .dc-virtual-wallet-card__content--no-footer {
      justify-content: flex-end;
      padding-bottom: 1.6rem; }
  .dc-virtual-wallet-card__header {
    display: flex;
    justify-content: flex-end;
    padding: 1.6rem 1.6rem 0.4rem; }
    .dc-virtual-wallet-card__header--icon {
      height: 4rem;
      width: 6.4rem; }
  .dc-virtual-wallet-card--no-funds {
    background: rgba(255, 255, 255, 0.32);
    position: absolute; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.wizard {
  width: inherit;
  height: inherit; }

