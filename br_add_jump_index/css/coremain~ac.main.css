/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */ }
  .dc-accordion__wrapper > div:last-child {
    border-bottom-right-radius: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-width: 1px; }

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem; }
  .dc-accordion__item--first {
    border-top-right-radius: 4px;
    border-top-left-radius: 4px; }
  .dc-accordion__item--open .dc-accordion__item-header {
    border-bottom: 1px solid var(--general-section-1); }
  .dc-accordion__item--open .dc-accordion__item-content {
    display: block; }
  .dc-accordion__item--close .dc-accordion__item-content {
    display: none; }
  .dc-accordion__item-header {
    cursor: pointer;
    line-height: 1.43;
    padding: 8px 16px; }
    .dc-accordion__item-header-icon {
      vertical-align: middle;
      /* postcss-bem-linter: ignore */ }
      .dc-accordion__item-header-icon-wrapper {
        float: right;
        padding-left: 16px; }
      .dc-accordion__item-header-icon path,
      .dc-accordion__item-header-icon rect {
        fill: var(--text-general); }
  .dc-accordion__item-content {
    padding: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-app-card__wrapper {
  display: flex;
  flex-direction: column;
  position: relative;
  align-items: flex-start; }
  .dc-app-card__wrapper--virtual {
    width: 28rem;
    height: 21.4rem;
    background: var(--app-card-virtual);
    border-radius: 0.8rem;
    padding: 0.8rem 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--virtual {
        width: 27.2rem;
        height: 17.6rem;
        padding: 0.8rem 1.2rem; } }
    .dc-app-card__wrapper--virtual-swap-free {
      background: var(--app-card-virtual-swap-free); }
  .dc-app-card__wrapper--real {
    width: 28rem;
    height: 18.2rem;
    background: var(--general-main-1);
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.05), 0px 16px 20px rgba(0, 0, 0, 0.05);
    border-radius: 1.6rem;
    padding: 1.6rem; }
    .dc-app-card__wrapper--real-background {
      position: absolute;
      top: 0;
      left: 0;
      height: 6rem;
      width: 100%;
      border-radius: 1.6rem 1.6rem 0 0; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--real {
        width: 27.2rem;
        height: 14.4rem;
        padding: 1.2rem; } }
  .dc-app-card__wrapper--mini {
    height: 12.8rem;
    width: 21.6rem;
    padding: 1.6rem; }
  .dc-app-card__wrapper--micro {
    height: 9.6rem;
    width: 16.2rem;
    padding: 1.2rem; }

.dc-app-card__badge {
  height: 1.6rem;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 0.8rem;
  padding: 0.2rem 0.8rem;
  border-radius: 1.2rem; }

.dc-app-card-header__wrapper {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center; }

.dc-app-card-header__container {
  display: flex;
  flex-direction: row; }

.dc-app-card-header__badge--demo {
  background: var(--badge-white);
  cursor: text; }

.dc-app-card-header__badge--swap-free {
  background: var(--badge-green);
  cursor: text; }

.dc-app-card-header__badge--add-real {
  height: 2.4rem;
  background: var(--badge-blue);
  margin-right: unset;
  cursor: pointer; }
  .dc-app-card-header__badge--add-real-icon {
    height: 1.2rem;
    width: 1.2rem;
    border: 1px solid var(--general-main-1);
    border-radius: 0.6rem; }
  .dc-app-card-header__badge--add-real-text {
    margin-left: 0.4rem; }

.dc-app-card-body__wrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: flex-start;
  z-index: 5; }
  .dc-app-card-body__wrapper--no-hover {
    flex-grow: 1;
    justify-content: space-between; }
  .dc-app-card-body__wrapper--virtual-default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__wrapper--virtual-default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__wrapper--virtual-mini {
    margin-top: 0; }
  .dc-app-card-body__wrapper--virtual-micro {
    flex-grow: unset;
    justify-content: unset; }
  .dc-app-card-body__wrapper--real-micro {
    flex-grow: unset;
    justify-content: unset; }

.dc-app-card-body__app-info-wrapper {
  display: flex;
  align-items: center; }

.dc-app-card-body__app-info-icon--default {
  height: 48px;
  width: 48px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-body__app-info-icon--default {
      height: 32px;
      width: 32px; } }

.dc-app-card-body__app-info-icon--mini {
  height: 24px;
  width: 24px; }

.dc-app-card-body__app-info-icon--micro {
  height: 18px;
  width: 18px; }

.dc-app-card-body__app-info-name--default {
  margin-left: 0.8rem; }

.dc-app-card-body__app-info-name--mini {
  margin-left: 0.6rem; }

.dc-app-card-body__app-info-name--micro {
  margin-left: 0.4rem; }

.dc-app-card-body__balance-info-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%; }

.dc-app-card-body__balance-info-content {
  display: flex;
  flex-direction: column;
  justify-content: center; }
  .dc-app-card-body__balance-info-content--default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__balance-info-content--default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__balance-info-content--mini {
    margin-top: 0.8rem; }
  .dc-app-card-body__balance-info-content--micro {
    margin-top: 0.4rem; }

.dc-app-card-body__badge--swap-free {
  background: var(--badge-violet);
  cursor: text;
  margin-right: unset;
  position: absolute;
  right: 1rem;
  top: 1rem; }

.dc-app-card-footer__wrapper {
  width: calc(100% - 3.2rem);
  height: 3.2rem;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  position: absolute;
  bottom: 1.6rem; }
  .dc-app-card-footer__wrapper--default {
    bottom: 1.8rem; }
  .dc-app-card-footer__wrapper--mini {
    bottom: 1.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-footer__wrapper {
      height: unset;
      bottom: 1.2rem; } }

.dc-app-card-footer__info {
  display: flex;
  flex-direction: column;
  justify-content: center; }

.dc-app-card-actions__wrapper {
  height: 3.2rem;
  width: calc(100% - 2.4rem);
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  position: absolute;
  bottom: 1.2rem; }

.dc-app-card-actions__content-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s;
  cursor: pointer; }
  .dc-app-card-actions__content-wrapper:hover {
    transform: scale(1.5); }

.dc-app-card-actions__icon {
  height: 1.6rem;
  width: 1.6rem; }
  .dc-app-card-actions__icon--hover {
    padding: 0.2rem;
    border-radius: 0.8rem; }
    .dc-app-card-actions__icon--hover-virtual {
      border: 1px solid var(--general-main-1); }
    .dc-app-card-actions__icon--hover-real {
      border: 1px solid var(--border-hover-1); }
  .dc-app-card-actions__icon--play {
    height: 3.2rem;
    width: 3.2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 1.6rem;
    background: var(--brand-red-coral);
    transition: transform 0.2s;
    cursor: pointer; }
    @media (min-width: 1024px) {
      .dc-app-card-actions__icon--play:hover {
        transform: scale(1.3); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-app-settings {
  height: 100%;
  display: flex;
  flex-direction: row;
  position: relative; }
  .dc-app-settings__content {
    flex: 1;
    min-height: 0; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-settings__content {
        overflow-y: auto; } }
    .dc-app-settings__content-container {
      flex: 1;
      display: flex;
      flex-direction: column; }
  .dc-app-settings__footer {
    padding: 0 2.4rem;
    width: 100%;
    display: flex;
    align-items: center; }
    .dc-app-settings__footer-wrapper {
      background-color: var(--general-main-2);
      border-top: 2px solid var(--general-section-2);
      display: flex;
      align-items: center;
      flex: 0;
      min-height: 7.2rem;
      max-height: 7.2rem; }
      .dc-app-settings__footer-wrapper:empty {
        display: none; }
    .dc-app-settings__footer-right {
      margin-left: auto; }
  .dc-app-settings__menu {
    border-right: 1px solid var(--general-section-2);
    padding: 1.6rem 0.8rem;
    position: relative;
    min-width: -webkit-max-content;
    min-width: -moz-max-content;
    min-width: max-content; }
    .dc-app-settings__menu-highlight {
      transition: transform 0.25s ease;
      position: absolute;
      width: 4px;
      height: 32px;
      background-color: var(--brand-red-coral);
      top: 0;
      right: 8px; }
    .dc-app-settings__menu-item {
      padding: 0.6rem 2.1rem 0.6rem 0.8rem;
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
      white-space: pre; }
      .dc-app-settings__menu-item:not(.dc-app-settings__menu-item--active) {
        cursor: pointer; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.terms-of-use {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  margin: 0 8rem !important;
  width: 84% !important; }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use {
    margin: unset !important;
    width: unset !important; } }

.terms-of-use__checkbox {
  margin-top: 1.6rem; }

.terms-of-use__checkbox:last-of-type {
  margin-bottom: 5rem; }

.terms-of-use__hr {
  height: 2px;
  margin: 1.6rem 0 0;
  width: 100%;
  border-top: 1px solid var(--general-section-1); }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use__hr {
    border-top-width: 2px;
    border-color: var(--border-disabled);
    width: 100%; } }

.terms-of-use h4 {
  margin: 1rem 0;
  text-transform: none; }

.terms-of-use p {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  text-transform: none;
  color: var(--text-general); }

.terms-of-use input {
  display: none; }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use .dc-checkbox__box {
    width: 2.4rem;
    height: 2.4rem; }
  .terms-of-use .dc-checkbox__box .dc-icon {
    width: 2.4rem;
    height: 2.4rem; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.da-icon-with-message {
  margin-top: 8rem;
  padding: 3.2rem;
  display: flex;
  align-items: center;
  flex-direction: column; }

.da-icon-with-message__text {
  margin-top: 1rem; }

.da-icon-with-message-full-width {
  width: calc(100vw - 33rem); }

@media (min-width: 320px) and (max-width: 767px) {
  .da-icon-with-message {
    width: 100vw; } }

.da-article {
  background-color: var(--general-section-1);
  width: 25.6rem;
  padding: 1.6rem 2.4rem;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  border-radius: 8px; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-article {
    width: calc(100% - 3.2rem);
    margin: 1.6rem; } }

@media (min-width: 768px) {
  .da-article {
    margin-left: 1.2rem; } }

.da-article__header {
  margin-bottom: 0.8rem; }

.da-article__list {
  list-style-type: disc;
  padding-left: 1.6rem; }

.da-article__list s li::marker {
  font-size: var(--text-size-xs); }

.da-article__list li + li {
  margin-top: 0.8rem; }

.da-article__learn-more {
  cursor: pointer;
  margin-top: 1.6rem;
  display: flex;
  align-items: center; }

.da-article__learn-more:hover {
  -webkit-text-decoration: underline var(--brand-red-coral);
  text-decoration: underline var(--brand-red-coral); }

.da-article__learn-more-icon {
  margin-left: 0.4rem; }

.da-account-limits {
  display: flex; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-account-limits {
    flex-direction: column; } }

.da-account-limits__table {
  width: calc(100% - 2.4rem); }

@media (min-width: 320px) and (max-width: 767px) {
  .da-account-limits__table {
    width: 100%; } }

.da-account-limits__table tr {
  border-bottom: 1px solid var(--general-section-2);
  display: flex;
  justify-content: space-between; }

.da-account-limits__table + .da-account-limits__table {
  margin-top: 1.2rem; }

.da-account-limits__table-header, .da-account-limits__table-cell {
  padding: 0.8rem 0;
  display: inline-flex; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-account-limits__table-header, .da-account-limits__table-cell {
    flex-direction: column; } }

.da-account-limits__table-header > .dc-text, .da-account-limits__table-cell > .dc-text {
  align-items: center; }

.da-account-limits__table-header > .dc-text + div, .da-account-limits__table-cell > .dc-text + div {
  display: flex;
  align-items: center; }

.da-account-limits__table-header > .dc-text + div .dc-popover__target__icon, .da-account-limits__table-cell > .dc-text + div .dc-popover__target__icon {
  display: flex;
  align-items: center; }

.da-account-limits__table-header--left, .da-account-limits__table-cell--left {
  text-align: left; }

.da-account-limits__table-header--right, .da-account-limits__table-cell--right {
  text-align: right; }

.da-account-limits__table-wrapper {
  flex: 1; }

@media (min-width: 1024px) {
  .da-account-limits__table-wrapper {
    margin-right: 1rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .da-account-limits__table-wrapper {
    margin: 0 2rem 2rem; } }

.da-account-limits__text-container {
  margin: 1.2rem 0; }

.da-account-limits__text-container:last-child {
  margin-bottom: 0; }

.da-account-limits__popover {
  margin-left: 0.8rem; }

@media (min-width: 768px) {
  .da-account-limits--app-settings {
    padding: 2.4rem; } }

@media (min-width: 320px) and (max-width: 767px) {
  .da-account-limits--app-settings {
    padding: 1.6rem 0 0; } }

.da-account-limits--app-settings .da-account-limits__table {
  width: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.da-article {
  background-color: var(--general-section-1);
  width: 25.6rem;
  padding: 1.6rem 2.4rem;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  border-radius: 8px; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-article {
    width: calc(100% - 3.2rem);
    margin: 1.6rem; } }

@media (min-width: 768px) {
  .da-article {
    margin-left: 1.2rem; } }

.da-article__header {
  margin-bottom: 0.8rem; }

.da-article__list {
  list-style-type: disc;
  padding-left: 1.6rem; }

.da-article__list s li::marker {
  font-size: var(--text-size-xs); }

.da-article__list li + li {
  margin-top: 0.8rem; }

.da-article__learn-more {
  cursor: pointer;
  margin-top: 1.6rem;
  display: flex;
  align-items: center; }

.da-article__learn-more:hover {
  -webkit-text-decoration: underline var(--brand-red-coral);
  text-decoration: underline var(--brand-red-coral); }

.da-article__learn-more-icon {
  margin-left: 0.4rem; }

.da-api-token {
  max-height: 100%;
  width: 100%; }

@media (min-width: 768px) {
  .da-api-token--app-settings {
    padding: 2.4rem; } }

.da-api-token .dc-timeline__container {
  width: 100%; }

.da-api-token .dc-table__cell {
  padding: 1.8rem 0; }

.da-api-token .dc-popover__target {
  display: flex; }

.da-api-token .dc-dialog__content {
  max-width: 100%;
  width: 100%;
  height: 100%; }

.da-api-token__wrapper {
  display: flex;
  width: 100%;
  height: 100%; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-api-token__wrapper {
    flex-direction: column; } }

.da-api-token__input-group {
  display: flex;
  margin-top: 2.7rem; }

.da-api-token__input {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  border-right: 0; }

.da-api-token__button {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  margin-left: -1px; }

.da-api-token__checkbox-wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  grid-gap: 1.6rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-api-token__checkbox-wrapper {
    grid-template-columns: 1fr; } }

.da-api-token__clipboard {
  margin-left: 0.8rem; }

.da-api-token__clipboard-wrapper {
  display: flex;
  align-items: center; }

.da-api-token__table {
  width: 100%; }

.da-api-token__table-header {
  padding: 2.4rem 0;
  text-align: left; }

.da-api-token__table-header-row {
  border-bottom: 2px solid var(--general-section-1); }

.da-api-token__table-cell {
  padding: 2.4rem 0; }

.da-api-token__table-cell-row {
  border-bottom: 1px solid var(--general-section-1); }

.da-api-token__table-cell--name > .dc-text {
  word-break: break-all; }

.da-api-token__timeline {
  padding: 0 1.4rem 1.6rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-api-token__timeline {
    margin-left: 1.2rem; }
  .da-api-token__timeline .dc-timeline__flex {
    margin-top: 2.4rem; } }

.da-api-token__portal-footer {
  padding: 0 2.4rem; }

.da-api-token__scope {
  background-color: var(--general-section-1);
  padding: 0.8rem;
  margin-bottom: 1.6rem; }

.da-api-token__scope-item {
  margin-bottom: 0.8rem;
  display: grid;
  grid-template-columns: 1.6fr 0.4fr; }

.da-api-token__scope-item--name {
  word-break: break-all; }

.da-api-token__scope-item > div {
  display: flex;
  flex-direction: column;
  justify-content: center; }

.da-api-token__scope-item:last-child {
  margin-bottom: 0; }

.da-api-token__scrollbars {
  height: 100%;
  width: 100%; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.da-icon-with-message {
  margin-top: 8rem;
  padding: 3.2rem;
  display: flex;
  align-items: center;
  flex-direction: column; }

.da-icon-with-message__text {
  margin-top: 1rem; }

.da-icon-with-message-full-width {
  width: calc(100vw - 33rem); }

@media (min-width: 320px) and (max-width: 767px) {
  .da-icon-with-message {
    width: 100vw; } }

.da-article {
  background-color: var(--general-section-1);
  width: 25.6rem;
  padding: 1.6rem 2.4rem;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  border-radius: 8px; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-article {
    width: calc(100% - 3.2rem);
    margin: 1.6rem; } }

@media (min-width: 768px) {
  .da-article {
    margin-left: 1.2rem; } }

.da-article__header {
  margin-bottom: 0.8rem; }

.da-article__list {
  list-style-type: disc;
  padding-left: 1.6rem; }

.da-article__list s li::marker {
  font-size: var(--text-size-xs); }

.da-article__list li + li {
  margin-top: 0.8rem; }

.da-article__learn-more {
  cursor: pointer;
  margin-top: 1.6rem;
  display: flex;
  align-items: center; }

.da-article__learn-more:hover {
  -webkit-text-decoration: underline var(--brand-red-coral);
  text-decoration: underline var(--brand-red-coral); }

.da-article__learn-more-icon {
  margin-left: 0.4rem; }

.da-self-exclusion {
  max-height: 100%;
  width: 100%; }

@media (min-width: 768px) {
  .da-self-exclusion--app-settings {
    padding: 2.4rem; } }

.da-self-exclusion .dc-dialog__content {
  max-width: 100%;
  width: 100%;
  height: 100%; }

.da-self-exclusion .dc-input__label {
  background: var(--general-main-1); }

.da-self-exclusion .dc-field--error {
  padding-left: 0; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion-article__content {
    margin: 1.6rem; } }

.da-self-exclusion-article__content--is-in-modal {
  max-width: 440px;
  margin: 2.4rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion-article__content--is-in-modal {
    max-height: 480px;
    margin: 1.6rem; } }

.da-self-exclusion-article__content-header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid var(--border-normal);
  padding: 0.8rem; }

.da-self-exclusion-article__content-icon {
  cursor: pointer; }

.da-self-exclusion-article__content-list {
  list-style: disc;
  padding-left: 1.8rem; }

.da-self-exclusion-article__content-list li::marker {
  font-size: var(--text-size-s); }

.da-self-exclusion-article__content-list li:first-child {
  margin-top: 2.4rem; }

.da-self-exclusion-article__content-list li + li {
  margin-top: 3.5rem; }

.da-self-exclusion-article__content-button {
  margin-top: 3.5rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion-article__content > :last-child {
    padding-bottom: 2.4rem; } }

.da-self-exclusion__confirm-limits {
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
  padding: 2.4rem; }

.da-self-exclusion__confirm-limits-header {
  margin: 3.3rem 0 0.8rem; }

.da-self-exclusion__confirm-limits-desc {
  margin-bottom: 2.4rem; }

.da-self-exclusion__confirm-limits-image {
  width: 12.8rem;
  height: 12.8rem; }

.da-self-exclusion__confirm-limits-buttons {
  display: flex;
  flex-direction: column;
  align-items: center; }

.da-self-exclusion__confirm-limits-buttons > button:first-child {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin-bottom: 1.6rem; }

.da-self-exclusion__confirm-limits-error {
  margin-top: 1.6rem;
  font-size: 1.4rem;
  color: var(--text-loss-danger);
  font-weight: 700;
  text-transform: none;
  text-align: center;
  line-height: 1.5; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__confirm-limits {
    width: 300px;
    height: 272px; } }

.da-self-exclusion__wrapper {
  display: flex;
  width: 100%;
  height: 100%; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__wrapper {
    flex-direction: column;
    overflow-y: auto; }
  .da-self-exclusion__wrapper:not(.da-self-exclusion__wrapper--show-article) {
    max-height: calc(100% - 72px); } }

.da-self-exclusion__error {
  margin-top: 1.6rem;
  margin-bottom: 1.6rem; }

.da-self-exclusion__confirm {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__confirm {
    padding: 1.6rem; } }

.da-self-exclusion__confirm-header {
  margin-top: 3.6rem;
  margin-bottom: 1.4rem; }

.da-self-exclusion__confirm-item {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 1.6rem;
  padding: 1.6rem 0;
  border-bottom: 1px solid var(--border-normal);
  max-width: 40rem;
  width: 100%; }

.da-self-exclusion__confirm-note {
  margin: 2.4rem 0;
  max-width: 67.2rem; }

.da-self-exclusion__back {
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  display: flex;
  align-items: center;
  cursor: pointer; }

.da-self-exclusion__back:hover {
  text-decoration: underline; }

.da-self-exclusion__back > svg {
  width: 1.6rem;
  height: 1.6rem;
  margin-right: 0.8rem; }

.da-self-exclusion__form {
  margin-right: 1rem;
  height: 100%; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__form {
    margin: 1.6rem;
    padding-bottom: 1.6rem; } }

.da-self-exclusion__header {
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  margin-bottom: 1.6rem;
  margin-top: 2.4rem; }

.da-self-exclusion__header-border {
  display: flex;
  white-space: nowrap; }

.da-self-exclusion__header-border:after {
  border-top: 1px solid var(--general-section-1);
  content: '';
  height: 100%;
  width: 100%;
  margin-top: 0.8rem;
  display: block;
  margin-left: 0.8rem; }

.da-self-exclusion__header:first-child {
  margin-top: 0; }

.da-self-exclusion__item {
  background: var(--general-main-1);
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  justify-content: space-between; }

.da-self-exclusion__item-wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 1.6rem; }

@media (max-width: 1024px) {
  .da-self-exclusion__item-wrapper {
    grid-template-columns: 1fr; } }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__item-wrapper {
    grid-template-columns: 1fr; } }

.da-self-exclusion__item-title {
  font-size: 1.4rem;
  color: var(--text-prominent);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  margin-bottom: 0.8rem; }

.da-self-exclusion__item-field {
  margin-bottom: 1.4rem; }

.da-self-exclusion__link {
  color: var(--text-general); }

.da-self-exclusion__scrollbars {
  height: 100%;
  width: 100%;
  flex: 1; }

.da-self-exclusion__button-wrapper {
  position: -webkit-sticky;
  position: sticky;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 7.2rem;
  padding: 1.4rem 2.4rem;
  background-color: var(--general-main-1);
  border-top: 1px solid var(--border-normal);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 2.4rem; }

@media (min-width: 320px) and (max-width: 767px) {
  .da-self-exclusion__button-wrapper {
    position: absolute; } }

.da-self-exclusion__warning {
  background-color: rgba(255, 173, 58, 0.3);
  border-radius: 4px;
  margin-top: 0.8rem;
  position: relative; }

.da-self-exclusion__warning-icon {
  position: absolute;
  top: 0.8rem;
  left: 0.8rem; }

.da-self-exclusion__warning-textbox {
  padding: 0.9rem 3.2rem; }

.da-self-exclusion__warning-link {
  color: var(--text-general);
  cursor: pointer;
  font-weight: bold;
  text-decoration: none; }

.da-self-exclusion__portal-footer {
  display: flex;
  justify-content: space-between;
  padding: 0 2.4rem;
  background-color: var(--general-main-2);
  width: 100%;
  align-items: center; }

