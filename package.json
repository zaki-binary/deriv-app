{
  "name": "root",
  "private": true,
  "devDependencies": {
    "@babel/core": "^7.11.6",
    "@babel/plugin-proposal-class-properties": "^7.10.4",
    "@babel/plugin-proposal-decorators": "^7.10.4",
    "@babel/plugin-proposal-export-default-from": "^7.10.4",
    "@babel/plugin-proposal-export-namespace-from": "^7.10.4",
    "@babel/plugin-proposal-nullish-coalescing-operator": "^7.10.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.11.0",
    "@babel/plugin-proposal-optional-chaining": "^7.11.0",
    "@babel/plugin-proposal-unicode-property-regex": "^7.10.4",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/preset-env": "^7.11.5",
    "@babel/preset-react": "^7.10.4",
    "@jest/globals": "^26.5.3",
    "@testing-library/react": "^11.0.4",
    "babel-eslint": "^10.1.0",
    "babel-polyfill": "^6.26.0",
    "eslint": "^7.9.0",
    "eslint-config-airbnb-base": "^14.0.0",
    "eslint-config-binary": "^1.0.2",
    "eslint-config-prettier": "^6.11.0",
    "eslint-formatter-pretty": "^4.0.0",
    "eslint-import-resolver-webpack": "^0.12.2",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-prettier": "^3.1.4",
    "eslint-plugin-react": "^7.20.6",
    "eslint-plugin-react-hooks": "^4.1.2",
    "husky": "^4.2.5",
    "jest": "^26.4.2",
    "lerna": "^3.22.0",
    "lint-staged": "^10.4.0",
    "prettier": "^2.1.2",
    "react-test-renderer": "^16.13.1",
    "stylelint-config-prettier": "^8.0.2",
    "stylelint-formatter-pretty": "^2.1.0",
    "stylelint-no-unsupported-browser-features": "^4.0.0",
    "stylelint-selector-bem-pattern": "^2.1.0",
    "stylelint-webpack-plugin": "^2.1.0"
  },
  "scripts": {
    "bootstrap": "f () { npm ci && lerna link && lerna bootstrap --ci --hoist --strict && lerna link && npm run build:travis ;}; f",
    "build": "f () { lerna exec --scope=@deriv/${1:-'*'} -- npm run build $2 ;}; f",
    "build:crypto": "export IS_CRYPTO_APP=true && npm run build && export IS_CRYPTO_APP=",
    "build:local": "f () { lerna exec --scope @deriv/trader --scope @deriv/bot-web-ui --parallel -- npm run build $1 ;}; f",
    "build:travis": "lerna exec --scope @deriv/shared --scope @deriv/components --scope @deriv/translations  --scope @deriv/account --scope @deriv/p2p -- npm run build:travis",
    "build:prod": "export NODE_ENV=staging && npm run build && export NODE_ENV=",
    "clean": "echo \"Remove $(git rev-parse --show-toplevel)/node_modules\" && lerna clean && rm -rf \"$(git rev-parse --show-toplevel)/node_modules\"",
    "deploy": "f () { npm run build:travis && npm run build:local && lerna exec --scope @deriv/core -- npm run deploy $@ ;}; f",
    "deploy:clean": "f () { npm run build:travis && npm run build:local && lerna exec --scope @deriv/core -- npm run deploy:clean $@ ;}; f",
    "deploy:folder": "f () { npm run build:travis && npm run build:local $1 && lerna exec --scope @deriv/core -- npm run deploy:folder $@ ;}; f",
    "prettify": "./node_modules/.bin/prettier --config ./.prettierrc --write \"./packages/*/{stories,script,src,build}/**/*.{js,jsx,scss}\"",
    "precommit": "lint-staged --allow-empty",
    "publish_package": "f () { lerna exec --scope=@deriv/${1:-'*'} -- npm run publish_package $2 ;}; f",
    "serve": "f () { lerna exec --scope=@deriv/${1:-'*'} -- npm run serve $npm_config_open;}; f",
    "start": "f () { lerna exec --scope=@deriv/${1:-'*'} -- npm run start ;}; f",
    "test": "f () { bash ./scripts/circleci-config.test.sh && npm run test:stylelint  && npm run test:eslint && npm run test:jest ;}; f",
    "test:eslint": "./node_modules/.bin/eslint \"./packages/*/src/**/*.?(js|jsx)\"",
    "test:mocha": "f () { lerna exec --scope=@deriv/${1:-'*'} -- npm run test:mocha ;}; f",
    "test:stylelint": "stylelint \"./packages/*/src/**/*.s(a|c)ss\"",
    "test:jest": "jest --all --maxWorkers=2",
    "stylelint:fix": "stylelint \"./packages/*/src/**/*.s(a|c)ss\" --fix",
    "translate": "f () { lerna exec --scope @deriv/translations -- npm run translate ;}; f",
    "stylelint-check": "stylelint-config-prettier-check"
  },
  "husky": {
    "hooks": {
      "post-merge": "bash ./hooks/post-merge.sh",
      "pre-commit": "npm run precommit"
    }
  }
}
