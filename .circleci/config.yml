version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          name: "Git restore cache"
          keys:
            - source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
            - source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - source-v{{ .Environment.CACHE_VERSION }}-
      - run:
          name: "Fetch git tags"
          command: |
            mkdir -p ~/.ssh
            echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: "Compress git objects"
          command: git gc
      - save_cache:
          name: Git save cache
          key: source-v{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

  npm_install_from_cache:
    description: "npm install and save cache"
    steps:
      - run:
          name: "Create cache key"
          command: echo $(find . ./packages/ -maxdepth 2 -name package-lock.json -type f -exec md5sum {} \; | sort -n | md5sum | cut -d" " -f1) >> CACHE_KEY1
      - restore_cache:
          keys:
            - node-v{{ .Environment.CACHE_VERSION }}-{{ checksum "CACHE_KEY1" }}
      - run:
          name: "Install npm packages"
          command: |
            if [ -d "./node_modules" ]; then
              echo "Found cache. Using cached node_modules."
              node_modules/lerna/cli.js link
            else
              echo "Could not find cache. Bootstrapping..."
              npm run bootstrap
            fi
      - save_cache:
          name: "Saving node_modules cache"
          key: node-v{{ .Environment.CACHE_VERSION }}-{{ checksum "CACHE_KEY1" }}
          paths:
            # VERIFY_CACHE_FOLDERS_START (DO NOT REMOVE)
            - "node_modules"
            - "packages/account/node_modules"
            - "packages/bot-skeleton/node_modules"
            - "packages/bot-web-ui/node_modules"
            - "packages/components/node_modules"
            - "packages/core/node_modules"
            - "packages/indicators/node_modules"
            - "packages/p2p/node_modules"
            - "packages/shared/node_modules"
            - "packages/trader/node_modules"
            - "packages/translations/node_modules"
            # VERIFY_CACHE_FOLDERS_END (DO NOT REMOVE)

  build:
    description: "Build"
    steps:
      - run:
          name: "Build all packages"
          command: npm run build

  build_crypto:
    description: "Build crypto"
    steps:
      - run:
          name: "Build all packages for deriv crypto"
          command: npm run build:crypto

  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for app.deriv.com with version *$(cat packages/core/dist/version)*"
          success_message: "Release succeeded for app.deriv.com with version *$(cat packages/core/dist/version)*"
          webhook: ${SLACK_WEBHOOK}

  deploy:
    description: "Deploy to static branches"
    parameters:
      target_branch:
        type: string
    steps:
      - attach_workspace:
          at: packages/core/dist
      - run:
          name: Tag build
          command: echo "<< parameters.target_branch >>-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > packages/core/dist/version
      - run:
          name: Install and configure dependencies
          command: |
            mkdir "${HOME}/.npm-packages"
            npm config set prefix "${HOME}/.npm-packages"
            npm i -g gh-pages
            git config user.email "ci-build@binary.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "01:67:4a:6d:26:9c:70:c4:1a:60:91:88:d9:dd:f0:83"
      - run:
          name: Deploy docs to gh-pages branch
          command: /home/circleci/.npm-packages/bin/gh-pages -d packages/core/dist --branch << parameters.target_branch >> --message "[skip ci]"

  docker_build_push:
    description: "Build and Push image to docker hub"
    parameters:
      docker_image_latest_tag:
        type: string
        default: "latest-staging"
      docker_image_name:
        type: string
        default: "deriv-app"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Building docker image
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            docker build -t ${DOCKHUB_ORGANISATION}/<< parameters.docker_image_name >>:${TAG} -t ${DOCKHUB_ORGANISATION}/<< parameters.docker_image_name >>:<< parameters.docker_image_latest_tag >> .
      - run:
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/<< parameters.docker_image_name >>

  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_svc_name:
        type: string
        default: "staging-deriv-app"
      k8s_image_name:
        type: string
        default: "deriv-app"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service deriv-app
          command: |
            TAG=${CIRCLE_TAG:-$CIRCLE_SHA1}
            for SERVER_ID in {1..5}
            do
              KUBE_SERVER_REF="KUBE_SERVER_$SERVER_ID"
              SERVICEACCOUNT_TOKEN_REF="SERVICEACCOUNT_TOKEN_$SERVER_ID"
              CA_CRT_REF="CA_CRT_$SERVER_ID"
              if [ ! -z "${!KUBE_SERVER_REF}" ]
              then
                echo "Deploying to cluster $SERVER_ID"
                CA_CRT="${!CA_CRT_REF}"
                KUBE_SERVER="${!KUBE_SERVER_REF}"
                SERVICEACCOUNT_TOKEN="${!SERVICEACCOUNT_TOKEN_REF}"
                echo $CA_CRT | base64 --decode > ca.crt
                kubectl --server=${KUBE_SERVER} --certificate-authority=ca.crt --token=$SERVICEACCOUNT_TOKEN set image deployment/<< parameters.k8s_svc_name >> << parameters.k8s_svc_name >>=${DOCKHUB_ORGANISATION}/<< parameters.k8s_image_name >>:${TAG}
              fi
            done

jobs:
  build:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build

  build_crypto:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build_crypto

  release_staging:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build
      - deploy:
          target_branch: staging
      - docker_build_push
      - k8s_deploy
      - notify_slack
    environment:
      NODE_ENV: staging

  release_staging_crypto:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build_crypto
      - deploy:
          target_branch: staging-crypto
      - docker_build_push:
          docker_image_name: deriv-app-crypto
          docker_image_latest_tag: latest-staging-crypto
      - k8s_deploy:
          k8s_svc_name: staging-deriv-app-crypto
          k8s_image_name: deriv-app-crypto
      - notify_slack
    environment:
      NODE_ENV: staging

  release_production:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build
      - deploy:
          target_branch: production
      - docker_build_push:
          docker_image_latest_tag: latest
      - k8s_deploy:
          k8s_svc_name: production-deriv-app
      - notify_slack
    environment:
      NODE_ENV: staging

  release_production_crypto:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build_crypto
      - deploy:
          target_branch: production-crypto
      - docker_build_push:
          docker_image_name: deriv-app-crypto
          docker_image_latest_tag: latest
      - k8s_deploy:
          k8s_svc_name: production-deriv-app-crypto
          k8s_image_name: deriv-app-crypto
      - notify_slack
    environment:
      NODE_ENV: staging
  
  build_and_test:
    docker:
      - image: circleci/node:12.18.0-stretch
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - build
      - run:
          name: "Run tests"
          command: npm test

workflows:
  release_staging:
    jobs:
      - release_staging:
          filters:
            branches:
              only: /^master$/
      - release_staging_crypto:
          filters:
            branches:
              only: /^master$/

  release_production:
    jobs:
      - release_production:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/

  release_production_crypto:
    jobs:
      - release_production_crypto:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^crypto-production.*/

  test:
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore:
                - master
                - gh-pages
            tags:
              ignore: /.*/
